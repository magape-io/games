! function(f) {
    if ("object" == typeof exports && "undefined" != typeof module) module.exports = f();
    else if ("function" == typeof define && define.amd) define([], f);
    else {
        var g;
        g = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, g.p3lib = f()
    }
}(function() {
    return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = "function" == typeof require && require;
                    if (!u && a) return a(o, !0);
                    if (i) return i(o, !0);
                    var f = new Error("Cannot find module '" + o + "'");
                    throw f.code = "MODULE_NOT_FOUND", f
                }
                var l = n[o] = {
                    exports: {}
                };
                t[o][0].call(l.exports, function(e) {
                    var n = t[o][1][e];
                    return s(n ? n : e)
                }, l, l.exports, e, t, n, r)
            }
            return n[o].exports
        }
        for (var i = "function" == typeof require && require, o = 0; o < r.length; o++) s(r[o]);
        return s
    }({
        1: [
            function(require, module, exports) {
                "use strict";

                function Application() {}
                var Common = (require("./AudioParams"), require("./Common")),
                    SavedData = require("./SavedData"),
                    HiscoreManager = require("./HiscoreManager"),
                    MainMenuScene = require("./scenes/MainMenuScene"),
                    ArcadeGameScene = (require("./scenes/PreloaderScene"), require("./scenes/ArcadeGameScene")),
                    GameQuitOverlay = require("./overlays/GameQuitOverlay"),
                    HowToPlayOverlay = require("./overlays/HowToPlayOverlay"),
                    ArcadePauseOverlay = require("./overlays/ArcadePauseOverlay"),
                    ArcadeGameOverOverlay = require("./overlays/ArcadeGameOverOverlay"),
                    AchievementsOverlay = require("./overlays/AchievementsOverlay"),
                    LeaderboardOverlay = require("./overlays/LeaderboardOverlay"),
                    ExitToArcadeOverlay = require("./overlays/ExitToArcadeOverlay"),
                    SkipTutorialOverlay = require("./overlays/SkipTutorialOverlay"),
                    EnterNameOverlay = require("./overlays/EnterNameOverlay"),
                    StoryModeOverlay = require("./overlays/StoryModeOverlay");
                require("./lib/SwipeTransition");
                module.exports = Application, Application.prototype.init = function() {
                    if (void 0 == Common.generatedTextures.blackSquare) {
                        var gr = new PIXI.Graphics;
                        gr.beginFill(0), gr.drawRect(0, 0, 2, 2), gr.endFill(), Common.generatedTextures.blackSquare = Common.renderer.generateTexture(gr, 1, PIXI.SCALE_MODES.LINEAR)
                    }
                    if (void 0 == Common.generatedTextures.whiteSquare) {
                        var gr = new PIXI.Graphics;
                        gr.beginFill(16777215), gr.drawRect(0, 0, 2, 2), gr.endFill(), Common.generatedTextures.whiteSquare = Common.renderer.generateTexture(gr, 1, PIXI.SCALE_MODES.LINEAR)
                    }
                    Common.savedData = new SavedData, Common.savedData.init(), 
                    // Common.hiscoreManager = new HiscoreManager(Common.config.hiscore.gameId, Common.config.hiscore.sharedKey), Common.hiscoreManager.init(), 
                    Common.savedData.hasSeenTutorial ? this.showMainMenuScene() : this.showArcadeGameScene()
                }, Application.prototype.showMainMenuScene = function() {
                    var scene = new MainMenuScene;
                    scene.signals.showAchievements.add(function(scene) {
                        this.showAchievementsOverlay()
                    }, this), scene.signals.showLeaderboard.add(function(scene) {
                        this.showLeaderboardOverlay()
                    }, this), scene.signals.showHowToPlay.add(function(scene) {
                        this.showHowToPlayOverlay()
                    }, this), scene.signals.showExitToArcade.add(function(scene) {
                        this.showExitToArcadeOverlay()
                    }, this), scene.signals.showArcadeStart.add(function(scene) {
                        this.showArcadeGameScene()
                    }, this), scene.signals.showStoryMessage.add(function(scene) {
                        this.showStoryMessage()
                    }, this);
                    var transition = new p3.FadeTransition(0, 1);
                    return Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showExitToArcadeOverlay = function() {
                    var scene = new ExitToArcadeOverlay;
                    scene.signals.previous.add(function(scene) {
                        Common.sceneManager.remove()
                    }, this);
                    var transition = new p3.Transition;
                    return transition.replace = !1, transition.push = !0, Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showStoryMessage = function() {
                    var scene = new StoryModeOverlay;
                    scene.signals.previous.add(function(scene) {
                        Common.sceneManager.remove()
                    }, this);
                    var transition = new p3.Transition;
                    return transition.replace = !1, transition.push = !0, Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showSkipTutorialOverlay = function() {
                    var scene = new SkipTutorialOverlay;
                    scene.signals.previous.add(function(scene) {
                        Common.sceneManager.remove()
                    }, this), scene.signals.next.add(function(scene) {
                        Common.sceneManager.remove(), this.showMainMenuScene()
                    }, this), scene.signals.resume.add(function() {
                        Common.sceneManager.remove(), Common.sceneManager._stack[Common.sceneManager._stack.length - 2].showGUI()
                    }, this);
                    var transition = new p3.Transition;
                    return transition.replace = !1, transition.push = !0, Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showGameQuitOverlay = function() {
                    var scene = new GameQuitOverlay;
                    scene.signals.next.add(function(scene) {
                        this.showMainMenuScene()
                    }, this), scene.signals.previous.add(function(scene) {
                        Common.sceneManager.remove(), Common.sceneManager._stack[Common.sceneManager._stack.length - 2].showGUI()
                    }, this);
                    var transition = new p3.Transition;
                    return transition.replace = !1, transition.push = !0, Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showAchievementsOverlay = function(subMenu) {
                    var scene = new AchievementsOverlay(subMenu);
                    scene.signals.previous.add(function(scene) {
                        Common.sceneManager.remove(), "function" == typeof Common.sceneManager._stack[Common.sceneManager._stack.length - 2].showGUI && Common.sceneManager._stack[Common.sceneManager._stack.length - 2].showGUI()
                    }, this);
                    var transition = new p3.Transition;
                    return transition.replace = !1, transition.push = !0, Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showLeaderboardOverlay = function(subMenu) {
                    var scene = new LeaderboardOverlay(subMenu);
                    scene.signals.previous.add(function(scene) {
                        Common.sceneManager.remove(), "function" == typeof Common.sceneManager._stack[Common.sceneManager._stack.length - 2].showGUI && Common.sceneManager._stack[Common.sceneManager._stack.length - 2].showGUI()
                    }, this);
                    var transition = new p3.Transition;
                    return transition.replace = !1, transition.push = !0, Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showHowToPlayOverlay = function(subMenu) {
                    var scene = new HowToPlayOverlay(subMenu);
                    scene.signals.previous.add(function(scene) {
                        Common.sceneManager.remove(), "function" == typeof Common.sceneManager._stack[Common.sceneManager._stack.length - 2].showGUI && Common.sceneManager._stack[Common.sceneManager._stack.length - 2].showGUI()
                    }, this);
                    var transition = new p3.Transition;
                    return transition.replace = !1, transition.push = !0, Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showEnterNameOverlay = function() {
                    Common.savedData.isNameSet() || Common.savedData.setName("AAA");
                    var scene = new EnterNameOverlay;
                    scene.signals.previous.add(function(scene) {
                        Common.sceneManager.remove(), this.showArcadeGameOverOverlay()
                    }, this);
                    var transition = new p3.Transition;
                    return transition.replace = !1, transition.push = !0, Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showArcadeGameOverOverlay = function() {
                    var scene = new ArcadeGameOverOverlay;
                    scene.signals.home.add(function(scene) {
                        Common.sceneManager.remove(), this.showMainMenuScene()
                    }, this), scene.signals.restart.add(function(scene) {
                        Common.sceneManager.remove(), this.showArcadeGameScene()
                    }, this), scene.signals.showAchievements.add(function(scene) {
                        Common.sceneManager.remove(), this.showAchievementsOverlay(!0)
                    }, this), scene.signals.showLeaderboard.add(function(scene) {
                        Common.sceneManager.remove(), this.showLeaderboardOverlay(!0)
                    }, this);
                    var transition = new p3.Transition;
                    return transition.replace = !1, transition.push = !0, Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showArcadeGameScene = function() {
                    var scene = new ArcadeGameScene;
                    scene.signals.pause.add(function() {
                        this.showArcadePauseOverlay()
                    }, this), scene.signals.skipTutorial.add(function() {
                        this.showSkipTutorialOverlay()
                    }, this), scene.signals.showGameOver.add(function() {
                        Common.savedData.isNameSet() && !Common.savedData.lastArcadeMatch.isDailyRecord ? this.showArcadeGameOverOverlay() : this.showEnterNameOverlay()
                    }, this), scene.signals.restart.add(function(scene) {
                        Common.sceneManager.remove(), this.showArcadeGameScene()
                    }, this), scene.signals.showSplash.add(function(scene) {
                        Common.sceneManager.remove(), this.showMainMenuScene()
                    }, this);
                    var transition = new p3.FadeTransition(0, 2);
                    return Common.sceneManager.add(scene, transition), scene
                }, Application.prototype.showArcadePauseOverlay = function() {
                    var scene = new ArcadePauseOverlay;
                    scene.signals.resume.add(function() {
                        Common.sceneManager.remove(), Common.sceneManager._stack[Common.sceneManager._stack.length - 2].showGUI()
                    }, this), scene.signals.quit.add(function() {
                        this.showGameQuitOverlay()
                    }, this), scene.signals.restart.add(function() {
                        Common.sceneManager.remove(), this.showArcadeGameScene()
                    }, this), scene.signals.showHowToPlay.add(function() {
                        this.showHowToPlayOverlay(!0)
                    }, this), scene.signals.showAchievements.add(function() {
                        this.showAchievementsOverlay()
                    }, this);
                    var transition = new p3.Transition;
                    return transition.replace = !1, transition.push = !0, Common.sceneManager.add(scene, transition), scene
                }
            }, {
                "./AudioParams": 4,
                "./Common": 5,
                "./HiscoreManager": 6,
                "./SavedData": 10,
                "./lib/SwipeTransition": 75,
                "./overlays/AchievementsOverlay": 76,
                "./overlays/ArcadeGameOverOverlay": 77,
                "./overlays/ArcadePauseOverlay": 78,
                "./overlays/EnterNameOverlay": 79,
                "./overlays/ExitToArcadeOverlay": 80,
                "./overlays/GameQuitOverlay": 81,
                "./overlays/HowToPlayOverlay": 82,
                "./overlays/LeaderboardOverlay": 83,
                "./overlays/SkipTutorialOverlay": 84,
                "./overlays/StoryModeOverlay": 85,
                "./scenes/ArcadeGameScene": 86,
                "./scenes/MainMenuScene": 87,
                "./scenes/PreloaderScene": 88
            }
        ],
        2: [
            function(require, module, exports) {
                "use strict";

                function Audio() {
                    this.id = -1, this.howl = null
                }
                module.exports = Audio
            }, {}
        ],
        3: [
            function(require, module, exports) {
                function AudioManager() {
                    this._cache = {}, this._music = null, this._isMuted = !1;
                    var hidden;
                    "undefined" != typeof document.hidden ? (hidden = "hidden", this.visibilityChange = "visibilitychange") : "undefined" != typeof document.mozHidden ? (hidden = "mozHidden", this.visibilityChange = "mozvisibilitychange") : "undefined" != typeof document.msHidden ? (hidden = "msHidden", this.visibilityChange = "msvisibilitychange") : "undefined" != typeof document.webkitHidden && (hidden = "webkitHidden", this.visibilityChange = "webkitvisibilitychange"), document.addEventListener(this.visibilityChange, function() {
                        document[hidden] ? Howler.volume(0) : Howler.volume(1)
                    }, !1)
                }
                var Audio = require("./Audio"),
                    AudioParams = require("./AudioParams");
                module.exports = AudioManager, AudioManager.prototype.addSounds = function(sounds, extensions, basePath) {
                    basePath = basePath || "";
                    var howl, name, url, urls, extension, i, j;
                    for (i = 0; i < sounds.length; ++i) {
                        for (url = basePath + sounds[i], url = url.split("/"), name = url[url.length - 1], urls = [], j = 0; j < extensions.length; ++j) extension = extensions[j], urls.push(url.join("/") + extension);
                        howl = new Howl({
                            src: urls,
                            volume: 1,
                            loop: !1,
                            autoplay: !1
                        }), howl.name = name, this._cache[name] = howl
                    }
                }, AudioManager.prototype.removeSounds = function(sounds) {
                    for (var name, n, howl, i = 0; i < sounds.length; ++i) {
                        name = sounds[i];
                        for (n in this._cache)
                            if (this._cache.hasOwnProperty(key) && (howl = this._cache[key], howl.name == n)) {
                                howl.unload(), delete this._cache[name];
                                break
                            }
                    }
                }, AudioManager.prototype.playSound = function(name, params) {
                    params = params || new AudioParams;
                    var id = -1;
                    "string" != typeof name && (name = name[Math.floor(Math.random() * name.length)]);
                    var howl = this._cache[name];
                    if (!howl) return console.warn("Could not find sound - " + name), id;
                    id = howl.play(), howl.volume(params.volume, id), howl.loop(params.loop, id);
                    var audio = new Audio;
                    return audio.id = id, audio.howl = howl, audio
                }, AudioManager.prototype.playMusic = function(name, params) {
                    params = params || new AudioParams;
                    var id = -1;
                    if ("string" != typeof name && (name = name[Math.floor(Math.random() * name.length)]), this._music && this._music.name == name) return this._music;
                    var howl = this._cache[name];
                    if (!howl) return console.warn("Could not find music - " + name), null;
                    howl.__onend = function() {
                        params.callback && params.callback.call(params.scope)
                    }, howl.on("end", howl.__onend), p3.Device && p3.Device.isAndroidStockBrowser && (howl.buffer = !0), id = howl.play(), howl.volume(params.volume, id), howl.loop(!0, id);
                    var audio = new Audio;
                    return audio.id = id, audio.howl = howl, params.fadeIn > 0 && this.fadeIn(audio, params.fadeIn), this._music = audio, audio
                }, AudioManager.prototype.stopSound = function(name, id) {
                    try {
                        var howl = this._cache[name];
                        if (!howl) return void console.warn("Could not find sound - " + name);
                        howl.stop(id)
                    } catch (e) {
                        console.error(e)
                    }
                }, AudioManager.prototype.pauseSound = function(name, id) {
                    try {
                        var howl = this._cache[name];
                        if (!howl) return void console.warn("Could not find sound - " + name);
                        howl.pause(id)
                    } catch (e) {
                        console.error(e)
                    }
                }, AudioManager.prototype.resumeSound = function(name, id) {
                    try {
                        var howl = this._cache[name];
                        if (!howl) return void console.warn("Could not find sound - " + name);
                        howl.play(id)
                    } catch (e) {
                        console.error(e)
                    }
                }, AudioManager.prototype.stopMusic = function(name) {
                    name = name || this._music.name, this._music && this._music.name == name && (this._music.__onend && this._music.off("end", this._music.__onend), this._music.stop(), this._music = null)
                }, AudioManager.prototype.mute = function(value) {
                    this._isMuted = value, this._isMuted ? Howler.mute(!0) : Howler.mute(!1)
                }, AudioManager.prototype.fadeIn = function(audio, duration, callback, scope) {
                    duration = duration || 1;
                    var volume = audio.howl.volume(audio.id);
                    audio.howl.volume(0, audio.id), audio.__volume = 0, TweenMax.killTweensOf(audio), TweenMax.to(audio, duration, {
                        __volume: volume,
                        ease: Power1.easeInOut,
                        onUpdate: function() {
                            audio.howl.volume(audio.__volume, audio.id)
                        },
                        onUpdateScope: this,
                        onComplete: callback,
                        onCompleteParams: [audio],
                        onCompleteScope: scope
                    })
                }, AudioManager.prototype.fadeOut = function(howl, duration, callback, scope) {
                    duration = duration || 1, howl.__volume = howl._volume, TweenMax.killTweensOf(howl), TweenMax.to(howl, duration, {
                        __volume: 0,
                        ease: Power1.easeInOut,
                        onUpdate: function() {
                            howl.volume(howl.__volume)
                        },
                        onUpdateScope: this,
                        onComplete: callback,
                        onCompleteParams: [howl],
                        onCompleteScope: scope
                    })
                }, AudioManager.prototype.setAudioPos3D = function(audio, object, camera, min, max) {
                    min = min || 0, max = max || 320;
                    var layer = camera.findLayerForObject(object),
                        x = object.x * (1 / layer.parallax.x),
                        sign = x - camera.position.x;
                    sign /= Math.abs(sign), sign == -1 ? x = Math.min(0, (x + min - camera.position.x) / (max - min)) : 1 == sign && (x = Math.max(0, (x - min - camera.position.x) / (max - min))), audio.howl.pos(x, 0, 0, audio.id)
                }, AudioManager.prototype.setAudioPosStereo = function(audio, object, camera, min, max) {
                    min = min || 0, max = max || 320;
                    var layer = camera.findLayerForObject(object),
                        x = object.x * (1 / layer.parallax.x),
                        sign = x - camera.position.x;
                    sign /= Math.abs(sign), x = Math.max(0, Math.abs(x - min - camera.position.x) / max), x = Math.max(0, Math.min(1, 1 + (1 - x))), audio.howl.volume(x, audio.id), x = object.x * (1 / layer.parallax.x), sign == -1 ? x = Math.min(0, (x + min - camera.position.x) / (max - min)) : 1 == sign && (x = Math.max(0, (x - min - camera.position.x) / (max - min))), x = Math.max(-1, Math.min(1, x)), audio.howl.stereo(x, audio.id)
                }, Object.defineProperty(AudioManager.prototype, "isMute", {
                    get: function() {
                        return this._isMuted
                    }
                })
            }, {
                "./Audio": 2,
                "./AudioParams": 4
            }
        ],
        4: [
            function(require, module, exports) {
                "use strict";

                function AudioParams() {
                    this.volume = 1, this.loop = !1, this.delay = 0, this.fadeIn = 0, this.priority = 0, this.callback = null, this.scope = window
                }
                module.exports = AudioParams
            }, {}
        ],
        5: [
            function(require, module, exports) {
                "use strict";

                function Common() {}
                module.exports = Common, Common.STAGE_WIDTH = 1900, Common.STAGE_HEIGHT = 768, Common.stage = null, Common.gameWorld = null, Common.renderer = null, Common.timestep = null, Common.tracking = null, Common.animator = null, Common.audio = null, Common.camera = null, Common.copy = null, Common.config = null, Common.language = "en", Common.touch = new PIXI.Point(0, 0), Common.touching = !1, Common.paused = !1, Common.isWebGL = !1, Common.generatedTextures = {}, Common.bgMusic = null, Common.bgMusicVolume = .5, Math.fmod = function(a, b) {
                    return Number((a - Math.floor(a / b) * b).toPrecision(8))
                }
            }, {}
        ],
        6: [
            function(require, module, exports) {
                function HiscoreManager(gameId, sharedKey) {
                    // this._idGame = gameId, this._api = GBAPI ? new GBAPI : null, this._api.setSharedKey("" + sharedKey), this.signals = {}, this.signals.loaded = new signals.Signal, this._results = {
                    //     daily: [],
                    //     weekly: [],
                    //     all: []
                    // }, this._resultsLoaded = 0, this._resultsToLoad = 0
                }
                require("./Common");
                module.exports = HiscoreManager, HiscoreManager.prototype.init = function() {}, HiscoreManager.prototype.loadAll = function() {
                    this._resultsLoaded = 0, this._resultsToLoad = 0, this.load(this.getTodayTimestamp(), "daily"), this.load(this.getLastWeekTimestamp(), "weekly"), this.load(0, "all")
                }, HiscoreManager.prototype.loadTimestamp = function(timestamp) {
                    this._resultsLoaded = 0, this._resultsToLoad = 0, this.load(this.getTodayTimestamp(), "daily")
                }, HiscoreManager.prototype.load = function(startTimestamp, section) {
                    // this._resultsToLoad++;
                    // var params = {
                    //     game: "" + this._idGame,
                    //     perPage: 20,
                    //     pageNumber: 1,
                    //     startTimestamp: startTimestamp || 0,
                    //     endTimestamp: Math.floor(Date.now() / 1e3),
                    //     orderAsc: !1
                    // };
                    // this._results[section] = !1;
                    // var that = this;
                    // this._api.getScores(params, function(data) {
                    //     if (data.error) console.error(data.error);
                    //     else {
                    //         that._results[section] = data.results;
                    //         for (var i = 0; i < data.results.length; i++) data.results[i].score_int = parseInt(data.results[i].score_int)
                    //     }
                    //     that._resultsLoaded++, console.log("%i/%i", that._resultsLoaded, that._resultsToLoad), console.log(section, that._results[section]), that._resultsLoaded == that._resultsToLoad && (console.log("All loaded"), that.signals.loaded.dispatch(that._results, startTimestamp))
                    // })
                }, HiscoreManager.prototype.getTodayTimestamp = function() {
                    var today = new Date;
                    return today.setHours(0, 0, 0, 0), today /= 1e3
                }, HiscoreManager.prototype.getLastWeekTimestamp = function() {
                    return this.getTodayTimestamp() - 604800
                }, HiscoreManager.prototype.send = function(name, score, callback) {
                    if (score <= 0) return !1;
                    if ("" == name) return !1;
                    var params = {
                        game: "" + this._idGame,
                        name: "" + name,
                        score: "" + score
                    };
                    this._api.sendScore(params, function(data) {
                        callback && callback(data)
                    }.bind(this))
                }, Object.defineProperty(HiscoreManager.prototype, "results", {
                    get: function() {
                        return this._results
                    }
                })
            }, {
                "./Common": 5
            }
        ],
        7: [
            function(require, module, exports) {
                "use strict";

                function Input() {
                    this.isKeyUp = !1, this.isKeyLeft = !1, this.isKeyRight = !1, this.isKeyDown = !1, this.isKeyFire = !1, this.isKeyAltFire = !1, this.touch = new PIXI.Point, this.isTouch = !1, this.signals = {}, this.signals.mouseMove = new signals.Signal, this.signals.mouseDown = new signals.Signal, this.signals.mouseUp = new signals.Signal, this.signals.mouseClick = new signals.Signal, this.signals.keyDown = new signals.Signal, this.signals.keyUp = new signals.Signal, this._stage = null
                }
                module.exports = Input, Input.keys = {}, Input.keys.W = 87, Input.keys.A = 65, Input.keys.S = 83, Input.keys.D = 68, Input.keys.Z = 90, Input.keys.X = 88, Input.keys.C = 67, Input.keys.SPACE = 32, Input.keys.LEFT = 37, Input.keys.RIGHT = 39, Input.keys.UP = 38, Input.keys.DOWN = 40, Input.keys.ENTER = 13, Input.prototype.init = function(stage, keyListener) {
                    this._stage = stage, this._stage.interactive = !0, this._stage.mousemove = this._stage.touchmove = this.onMouseMove.bind(this), this._stage.mousedown = this._stage.touchstart = this.onMouseDown.bind(this), this._stage.mouseup = this._stage.touchend = this.onMouseUp.bind(this), this._stage.click = this._stage.tap = this.onMouseClick.bind(this), keyListener.onkeydown = this.onKeyDown.bind(this), keyListener.onkeyup = this.onKeyUp.bind(this), keyListener.focus()
                }, Input.prototype.dispose = function() {
                    this._stage.mousemove = this._stage.touchmove = null, this._stage.mousedown = this._stage.touchstart = null, this._stage.mouseup = this._stage.touchend = null, this._stage.click = this._stage.tap = null, this.signals.mouseMove.dispose(), this.signals.mouseDown.dispose(), this.signals.mouseUp.dispose(), this.signals.mouseClick.dispose(), this.signals.keyDown.dispose(), this.signals.keyUp.dispose()
                }, Input.prototype.onMouseMove = function(event) {
                    this.touch = event.data.getLocalPosition(this._stage), p3.Timestep.queueCall(function() {
                        this.signals.mouseMove.dispatch(event)
                    }, [], this)
                }, Input.prototype.onMouseDown = function(event) {
                    this.touch = event.data.getLocalPosition(this._stage), this.isTouch = !0, p3.Timestep.queueCall(function() {
                        this.signals.mouseDown.dispatch(event)
                    }, [], this)
                }, Input.prototype.onMouseUp = function(event) {
                    this.touch = event.data.getLocalPosition(this._stage), this.isTouch = !1, p3.Timestep.queueCall(function() {
                        this.signals.mouseUp.dispatch(event)
                    }, [], this)
                }, Input.prototype.onMouseClick = function(event) {
                    p3.Timestep.queueCall(function() {
                        this.signals.mouseClick.dispatch(event)
                    }, [], this)
                }, Input.prototype.onKeyDown = function(event) {
                    switch (event.keyCode) {
                        case Input.keys.UP:
                        case Input.keys.W:
                            this.isKeyUp = !0;
                            break;
                        case Input.keys.LEFT:
                        case Input.keys.A:
                            this.isKeyLeft = !0;
                            break;
                        case Input.keys.RIGHT:
                        case Input.keys.D:
                            this.isKeyRight = !0;
                            break;
                        case Input.keys.DOWN:
                        case Input.keys.S:
                            this.isKeyDown = !0;
                            break;
                        case Input.keys.Z:
                        case Input.keys.SPACE:
                            this.isKeyFire = !0;
                            break;
                        case Input.keys.X:
                            this.isKeyAltFire = !0
                    }
                    p3.Timestep.queueCall(function() {
                        this.signals.keyDown.dispatch(event)
                    }, [], this)
                }, Input.prototype.onKeyUp = function(event) {
                    switch (event.keyCode) {
                        case Input.keys.UP:
                        case Input.keys.W:
                            this.isKeyUp = !1;
                            break;
                        case Input.keys.LEFT:
                        case Input.keys.A:
                            this.isKeyLeft = !1;
                            break;
                        case Input.keys.RIGHT:
                        case Input.keys.D:
                            this.isKeyRight = !1;
                            break;
                        case Input.keys.DOWN:
                        case Input.keys.S:
                            this.isKeyDown = !1;
                            break;
                        case Input.keys.Z:
                        case Input.keys.SPACE:
                            this.isKeyFire = !1;
                            break;
                        case Input.keys.X:
                            this.isKeyAltFire = !1
                    }
                    p3.Timestep.queueCall(function() {
                        this.signals.keyUp.dispatch(event)
                    }, [], this)
                }
            }, {}
        ],
        8: [
            function(require, module, exports) {
                "use strict";

                function Keyboard() {}
                module.exports = Keyboard;
                var Keyboard = Keyboard.prototype;
                Keyboard.signalKeyDown = new signals.Signal, Keyboard.signalKeyUp = new signals.Signal, Keyboard._keysDown = null, Keyboard._keysPressed = null, Keyboard._keysUp = null, Keyboard.KEY_TAB = 9, Keyboard.KEY_ENTER = 13, Keyboard.KEY_SHIFT = 16, Keyboard.KEY_CTRL = 17, Keyboard.KEY_SPACE = 32, Keyboard.KEY_LEFT = 37, Keyboard.KEY_UP = 38, Keyboard.KEY_RIGHT = 39, Keyboard.KEY_DOWN = 40, Keyboard.KEY_ONE = 49, Keyboard.KEY_A = 65, Keyboard.KEY_B = 66, Keyboard.KEY_C = 67, Keyboard.KEY_D = 68, Keyboard.KEY_E = 69, Keyboard.KEY_F = 70, Keyboard.KEY_G = 71, Keyboard.KEY_H = 72, Keyboard.KEY_I = 73, Keyboard.KEY_J = 74, Keyboard.KEY_K = 75, Keyboard.KEY_L = 76, Keyboard.KEY_M = 77, Keyboard.KEY_N = 78, Keyboard.KEY_O = 79, Keyboard.KEY_P = 80, Keyboard.KEY_Q = 81, Keyboard.KEY_R = 82, Keyboard.KEY_S = 83, Keyboard.KEY_T = 84, Keyboard.KEY_U = 85, Keyboard.KEY_V = 86, Keyboard.KEY_W = 87, Keyboard.KEY_X = 88, Keyboard.KEY_Y = 89, Keyboard.KEY_Z = 90, Keyboard.KEY_PLUS = 187, Keyboard.KEY_MINUS = 189, Keyboard.init = function() {
                    this.reset(), document.body.onkeydown = function(e) {
                        var code;
                        code = window.event ? e.keyCode : e.which, Keyboard._keysDown[code] = !Keyboard._keysPressed[code], Keyboard._keysPressed[code] = !0, Keyboard.signalKeyDown.dispatch(code)
                    }, document.body.onkeyup = function(e) {
                        var code;
                        code = window.event ? e.keyCode : e.which, Keyboard._keysDown[code] = !1, Keyboard._keysPressed[code] = !1, Keyboard._keysUp[code] = !0, Keyboard.signalKeyUp.dispatch(code)
                    }
                }, Keyboard.update = function() {
                    Keyboard._keysDown = {}, Keyboard._keysUp = {}
                }, Keyboard.reset = function() {
                    Keyboard._keysDown = {}, Keyboard._keysPressed = {}, Keyboard._keysUp = {}
                }, Keyboard.getKeyPressed = function(keyCode) {
                    return Keyboard._keysPressed[keyCode]
                }, Keyboard.getKeyJustPressed = function(keyCode) {
                    return Keyboard._keysDown[keyCode]
                }, Keyboard.getKeyJustReleased = function(keyCode) {
                    return Keyboard._keysUp[keyCode]
                }
            }, {}
        ],
        9: [
            function(require, module, exports) {
                "use strict";

                function Main(width, height) {
                    this._width = width, this._height = height, this._preloader = null, this._game = null, this._resolution = 1, this._scale = "hd/"
                }
                var Application = require("./Application"),
                    AudioManager = require("./AudioManager"),
                    Common = require("./Common"),
                    Input = require("./Input"),
                    PreloaderScene = require("./scenes/PreloaderScene"),
                    Keyboard = require("./Keyboard");
                window.Main = Main, Main.prototype.init = function() {
                    Common.assets = p3.AssetManager.instance, Common.audio = p3.Button.audio = new AudioManager, Common.language = language;
                    var params = new p3.ViewParams;
                    params.holderId = "game", params.width = this._width, params.height = this._height, params.rotateImageUrl = "./rotate.png", params.rotateImageColor = "#000000", PIXI.RETINA_PREFIX = /\_(?=[^_]*$)(.+)x/, p3.Device.init(window.bowser), TweenMax.defaultOverwrite = "none", TweenMax.ticker.fps(60);
                    var view = new p3.View(params);
                    view.signals.ready.addOnce(function(canvas) {
                        var options = {};
                        options.view = canvas, options.transparent = !1, options.antialias = !1, options.preserveDrawingBuffer = !1, options.resolution = 1;
                        var stage = new PIXI.Container;
                        Common.stage = stage;
                        var input = new Input;
                        input.init(stage, canvas), Common.input = input, p3.Device.isCocoonJS && (stage.scale.x = window.innerHeight / params.height, stage.scale.y = window.innerHeight / params.height);
                        var renderer = p3.Device.isCocoonJS ? new PIXI.WebGLRenderer(window.innerWidth, window.innerHeight, options) : PIXI.autoDetectRenderer(this._width, this._height, options);
                        renderer.backgroundColor = 0, Common.renderer = renderer, Common.isWebGL = renderer instanceof PIXI.WebGLRenderer;
                        var sm = new p3.SceneManager(renderer);
                        Common.sceneManager = sm, Common.stage.addChild(sm.view);
                        var timestep = new p3.Timestep(p3.Timestep.VARIABLE);
                        timestep.init(this.update, this.render, this), Common.timestep = timestep, Common.animator = new p3.Animator, Common.animator.init(), Common.keyboard = new Keyboard, Common.keyboard.init(), window.delay = function(callback, delay, scope) {
                            return Common.animator.setTimeout(callback, delay, scope)
                        }, document.onclick = function(event) {
                            window.focus()
                        }, this.loadPreloader()
                    }, this), view.signals.resize.add(this.onCanvasResize, this), Common.view = view
                }, Main.prototype.loadPreloader = function() {
                    var scale = this._scale,
                        prefix = "sd/" === scale ? "_0.5x" : "",
                        files = [{
                            name: "config",
                            url: "data/config.json"
                        }, {
                            name: "strings",
                            url: "data/strings.json"
                        }, {
                            name: "preloader_0",
                            url: "images/" + scale + "preloader" + prefix + ".json"
                        }, {
                            name: "ui_buttons0",
                            url: "images/" + scale + "ui_buttons0.json"
                        }, {
                            name: "ui_buttons1",
                            url: "images/" + scale + "ui_buttons1.json"
                        }, {
                            name: "dosis_44",
                            url: "fonts/dosis_44.xml"
                        }, {
                            name: "jedi_font",
                            url: "fonts/jedi_font.xml"
                        }],
                        sounds = [];
                    files.length ? (Common.assets.addFiles(files, "assets/"), Common.assets.signals.complete.addOnce(function() {
                        Common.config = Common.assets.getJSON("config"), Common.copy = Common.assets.getJSON("strings"), Common.COUNTRY_CODE = Common.config.locale, window.r2l = Common.config.r2l, window.webfont = Common.config.webfont, this.loadAssets()
                    }, this), Common.assets.load(), Common.audio.addSounds(sounds, [".mp3", ".ogg"], "")) : this.loadAssets()
                }, Main.prototype.loadAssets = function() {
                    var scale = this._scale,
                        prefix = "sd/" === scale ? "_0.5x" : "",
                        files = [{
                            name: "boots-trophies",
                            url: "data/boots-trophies.json"
                        }, {
                            name: "profanity",
                            url: "data/profanity.json"
                        }, {
                            name: "ui_splash_bg",
                            url: "images/" + scale + "ui_splash_bg.jpg"
                        }, {
                            name: "ui_splash_logo",
                            url: "images/" + scale + "titles_" + Common.config.locale + "/ui_splash_logo" + prefix + ".png"
                        }, {
                            name: "char_troop_00",
                            url: "images/" + scale + "char_troop_00.json"
                        }, {
                            name: "char_weapons_00",
                            url: "images/" + scale + "char_weapons_00.json"
                        }, {
                            name: "environment_00_ground",
                            url: "images/" + scale + "environment_00_ground.json"
                        }, {
                            name: "enemy_buildings_00",
                            url: "images/" + scale + "enemy_buildings_00.json"
                        }, {
                            name: "ships_enemy_00",
                            url: "images/" + scale + "ships_enemy_00.json"
                        }, {
                            name: "environment_00-0",
                            url: "images/" + scale + "environment_00-0.json"
                        }, {
                            name: "environment_00-1",
                            url: "images/" + scale + "environment_00-1.json"
                        }, {
                            name: "menus0",
                            url: "images/" + scale + "menus0.json"
                        }, {
                            name: "menus1",
                            url: "images/" + scale + "menus1.json"
                        }, {
                            name: "particles_00",
                            url: "images/" + scale + "particles_00.json"
                        }, {
                            name: "map_tutorial",
                            url: "maps/map_tutorial_002.json"
                        }, {
                            name: "map_survival",
                            url: "maps/map_survival.json"
                        }, {
                            name: "map_test",
                            url: "maps/map_test_001.json"
                        }, {
                            name: "particle_explode_bgsmoke_00",
                            url: "particles/particle_explode_bgsmoke_00.json"
                        }, {
                            name: "particle_explode_coreflash_00",
                            url: "particles/particle_explode_coreflash_00.json"
                        }, {
                            name: "particle_explode_coreflash_01",
                            url: "particles/particle_explode_coreflash_01.json"
                        }, {
                            name: "particle_explode_coreflash_big_01",
                            url: "particles/particle_explode_coreflash_big_01.json"
                        }, {
                            name: "particle_explode_shockwave_fire1",
                            url: "particles/particle_explode_shockwave_fire1.json"
                        }, {
                            name: "particle_explode_shockwave_fire2",
                            url: "particles/particle_explode_shockwave_fire2.json"
                        }, {
                            name: "particle_explode_shockwave_firebig2",
                            url: "particles/particle_explode_shockwave_firebig2.json"
                        }, {
                            name: "particle_health_01",
                            url: "particles/particle_health_01.json"
                        }, {
                            name: "particle_emitter_waypoint_attract_00",
                            url: "particles/particle_emitter_waypoint_attract_00.json"
                        }, {
                            name: "particle_emitter_xwing_target_00",
                            url: "particles/particle_emitter_xwing_target_00.json"
                        }, {
                            name: "particle_tank_dust_00",
                            url: "particles/particle_tank_dust_00.json"
                        }, {
                            name: "particle_destroyed_smoke_01",
                            url: "particles/particle_destroyed_smoke_01.json"
                        }, {
                            name: "particle_building_smoke_00",
                            url: "particles/particle_building_smoke_00.json"
                        }, {
                            name: "particle_emitter_sniper_hit_00",
                            url: "particles/particle_emitter_sniper_hit_00.json"
                        }, {
                            name: "great_escape_44",
                            url: "fonts/great_escape_44.xml"
                        }, {
                            name: "great_escape_44stroke",
                            url: "fonts/great_escape_44stroke.xml"
                        }, {
                            name: "great_escape_88",
                            url: "fonts/great_escape_88.xml"
                        }, {
                            name: "spawn_hostage",
                            url: "maps/spawn_hostage.png"
                        }, {
                            name: "spawn_medkit",
                            url: "maps/spawn_medkit.png"
                        }, {
                            name: "spawn_missionItem",
                            url: "maps/spawn_missionItem.png"
                        }, {
                            name: "spawn_barrel",
                            url: "maps/spawn_barrel.png"
                        }, {
                            name: "spawn_soldier",
                            url: "maps/spawn_soldier.png"
                        }, {
                            name: "spawn_destroyTarget",
                            url: "maps/spawn_destroyTarget.png"
                        }, {
                            name: "spawn_tieFighter",
                            url: "maps/spawn_tieFighter.png"
                        }, {
                            name: "spawn_turret",
                            url: "maps/spawn_turret.png"
                        }, {
                            name: "spawn_escort",
                            url: "maps/spawn_escort.png"
                        }, {
                            name: "spawn_escort_destination",
                            url: "maps/spawn_escort_destination.png"
                        }, {
                            name: "spawn_cargo",
                            url: "maps/spawn_cargo.png"
                        }, {
                            name: "spawn_tank",
                            url: "maps/spawn_tank.png"
                        }, {
                            name: "spawn_tank_destination",
                            url: "maps/spawn_tank_destination.png"
                        }, {
                            name: "spawn_tank_waypoint",
                            url: "maps/spawn_tank_waypoint.png"
                        }, {
                            name: "tutorial_move",
                            url: "maps/tutorial_move.png"
                        }, {
                            name: "tutorial_soldier",
                            url: "maps/tutorial_soldier.png"
                        }, {
                            name: "tutorial_medkit",
                            url: "maps/tutorial_medkit.png"
                        }, {
                            name: "tutorial_barrel",
                            url: "maps/tutorial_barrel.png"
                        }, {
                            name: "tutorial_item",
                            url: "maps/tutorial_item.png"
                        }, {
                            name: "tutorial_target",
                            url: "maps/tutorial_target.png"
                        }],
                        sounds = ["sfx_ui_btn_press_00", "sfx_ui_btn_press_01", "sfx_ui_btn_rollover_00", "sfx_radar_launch_00", "sfx_radar_display_hum_01", "sfx_scoreloop_00", "sfx_notification_beep_00", "sfx_trooper_blaster_00", "sfx_trooper_blaster_01", "sfx_trooper_blaster_02", "sfx_stormtrooper_blaster_00", "sfx_stormtrooper_blaster_01", "sfx_tiefighter_flyby_00", "sfx_tiefighter_flyby_03", "sfx_tiefighter_gun_00", "sfx_tiefighter_gun_01", "sfx_tiefighter_gun_02", "sfx_tiefighter_gun_03", "sfx_tiefighter_gun_04", "sfx_runsand_00", "sfx_walk_sand_00", "sfx_barrel_explode_00", "sfx_explosion_atat_01", "sfx_explosion_tank_00", "sfx_explosion_target_00", "sfx_explosion_target_01", "sfx_explosion_target_03", "sfx_explosion_target_04", "sfx_grenade_explode_00", "sfx_grenade_timer_loop_02", "sfx_grenade_warning_00", "sfx_rocket_launch_03", "sfx_sniperrifle_reverb_00", "sfx_sniperrifle_reverb_01", "sfx_sniperrifle_reverb_02", "sfx_sniperrifle_reverb_03", "sfx_sniperrifle_reverb_04", "sfx_marine_hit_00", "sfx_marine_hit_01", "sfx_marine_hit_02", "sfx_marine_hit_03", "sfx_marine_fall_03", "sfx_xwing_flyby_00", "sfx_xwing_flyby_01", "sfx_xwing_laser_00", "sfx_xwing_laser_04", "sfx_exp_turret_0", "sfx_exp_turret_1", "sfx_exp_turret_2", "sfx_gun_turret_0", "sfx_transport_hover_loop_00", "sfx_box_open_03", "sfx_health_open_fx_05", "sfx_r4_achievement_00", "sfx_r4_newmission_00", "sfx_r4_upgrade_00", "sfx_ui_letters_00", "sfx_rebel_marine_blaster_00", "sfx_rebel_marine_blaster_01", "sfx_k2so_blaster_00", "sfx_cassian_pistol_00", "sfx_cassian_rifle_short_00", "sfx_transport_explode_00", "sfx_transport_fire1_trail_00", "music_mission_complete_accent_03", "music_bal1-0_tension_02", "music_bal1-1_tension_00", "music_bal2-0_atat_00", "music_bal3-0_tensionlong_02", "music_dal1-0_hightension_00", "music_dal1-1_stealthtension_00", "music_dal1-2_stealthtension_00", "music_menu_strings_gentle_00", "music_menu_strings_gentle_01", "music_dal1-4_menu_long_00", "sfx_imperial_base_00", "sfx_ambience_battle_distant_loop_reverb_01", "sfx_ambience_battle_distant_loop2reverb_01", "sfx_ambience_xwingbattle_quietreverb_00", "sfx_ambience_desert_loop_00", "sfx_ambience_mountaindesert_loop_00", "sfx_ambience_surf_loop_01", "sfx_ambience_surf_loop_02", "sfx_jungle_loop_00", "sfx_deserted_street_00", "sfx_busy_street_00", "sfx_verybusy_street_00", "sfx_verybusy_street_reverb_00", "sfx_burning_xwing_00"];
                    files.length ? (this._preloader = new PreloaderScene, Common.sceneManager.add(this._preloader), Common.assets.addFiles(files, "assets/"), Common.assets.signals.progress.add(this.onLoadingProgress, this), Common.assets.signals.complete.addOnce(this.onLoadingCompleted, this), Common.assets.load(), Common.audio.addSounds(sounds, [".mp3", ".ogg"], "assets/audio/")) : this.startGame();
                }, Main.prototype.startGame = function() {
                    delay(function() {
                        this._game = new Application, this._game.init()
                    }, 1, this)
                }, Main.prototype.update = function() {
                    Common.sceneManager.update(), Common.animator.update(), Common.keyboard.update()
                }, Main.prototype.render = function() {
                    Common.renderer.render(Common.stage)
                }, Main.prototype.onLoadingProgress = function(event) {
                    this._preloader.loaded = event.progress / 100
                }, Main.prototype.onLoadingCompleted = function() {
                    Common.assets.signals.progress.removeAll(), Common.assets.signals.complete.removeAll(), this._preloader.loaded = 1, this._preloader.signals.next.add(function() {
                        this.startGame()
                    }, this)
                }, Main.prototype.onCanvasResize = function(correct) {
                    correct && (Common.renderer.resize(p3.View.width, p3.View.height), Common.sceneManager && Common.sceneManager.resize())
                }
            }, {
                "./Application": 1,
                "./AudioManager": 3,
                "./Common": 5,
                "./Input": 7,
                "./Keyboard": 8,
                "./scenes/PreloaderScene": 88
            }
        ],
        10: [
            function(require, module, exports) {
                function SavedData() {
                    this._assetManager = p3.AssetManager.instance, this.SAVE_NAME = "sw_boots", this.SAVE_VERSION = "1.0", this.SAVE_SEED = "y5k0Eo6R177mUkb", this.ARCADE_NAME = "sw_arcade", this.ARCADE_VERSION = "1.0", this.TOKEN_NAME = "com.disney.starwars.arcade.tokensToAdd", this.name = "", this.hasSeenTutorial = !1, this.arcade = {
                        highScore: 0,
                        lastScore: 0,
                        highMissionCount: 0,
                        lastMissionCount: 0
                    }, this.lastArcadeMatch = {
                        score: 0,
                        missionsCompleted: 0,
                        isDailyRecord: !1
                    }, this.tutorialSkill = {
                        granade: !0,
                        airstrike: !1,
                        sniper: !1,
                        hacker: !1,
                        rocket: !1,
                        medic: !1,
                        stealth: !1
                    }, this.hiscores = [], this.trophies = [], this.tokens = 0
                }
                require("./Common");
                module.exports = SavedData, SavedData.prototype.init = function() {
                    window.localStorage[this.SAVE_NAME + "_" + this.SAVE_VERSION] ? (console.log("load"), this.load()) : (console.log("reset"), this.reset(), this.save()), console.log("load arcade"), this.loadArcade(), console.log("load tokens"), this.loadTokens()
                }, SavedData.prototype.reset = function() {}, SavedData.prototype.load = function() {
                    var data = window.localStorage[this.SAVE_NAME + "_" + this.SAVE_VERSION];
                    data = JSON.parse(data), this.hasSeenTutorial = data.hasSeenTutorial, this.arcade = data.arcade, this.trophies = data.trophies, this.hiscores = data.hiscores || [], this.name = data.name || "", this.tutorialSkill = data.tutorialSkill || this.tutorialSkill
                }, SavedData.prototype.loadArcade = function() {
                    var data = window.localStorage[this.ARCADE_NAME + "_" + this.ARCADE_VERSION];
                    data && (data = JSON.parse(data), this.name = data.name || this.name), console.info("Player name: %s", this.name)
                }, SavedData.prototype.loadTokens = function() {
                    var data = window.localStorage[this.TOKEN_NAME];
                    data && (this.tokens = parseInt(data) || 0), console.info("Tokens: %i", this.tokens)
                }, SavedData.prototype.save = function() {
                    var data = {
                        name: this.name,
                        hasSeenTutorial: this.hasSeenTutorial,
                        arcade: this.arcade,
                        trophies: this.trophies,
                        hiscores: this.hiscores,
                        tutorialSkill: this.tutorialSkill
                    };
                    JSON.stringify(data);
                    window.localStorage[this.SAVE_NAME + "_" + this.SAVE_VERSION] = JSON.stringify(data)
                }, SavedData.prototype.tutorialComplete = function() {
                    this.hasSeenTutorial = !0, this.save()
                }, SavedData.prototype.setName = function(name) {
                    this.name = name, this.save()
                }, SavedData.prototype.isNameSet = function() {
                    return "" != this.name
                }, SavedData.prototype.getTrophyStatus = function(id) {
                    return this.trophies.indexOf(id) != -1
                }, SavedData.prototype.awardTrophy = function(id) {
                    this.getTrophyStatus(id) || (this.trophies.push(id), this.save())
                }, SavedData.prototype.getTrophyData = function(id) {
                    var trophies = p3.AssetManager.instance.getJSON("boots-trophies").trophies;
                    for (var name in trophies)
                        if (trophies[name].id == id) return trophies[name];
                    return !1
                }, SavedData.prototype.logScore = function(name, score, missionCount) {
                    if (!(score <= 0)) {
                        this.arcade.lastScore = score, score > this.arcade.highScore && (this.arcade.highScore = score), this.arcade.lastMissionCount = missionCount, missionCount > this.arcade.highMissionCount && (this.arcade.highMissionCount = missionCount);
                        var data = {
                            timestamp: Math.floor(Date.now() / 1e3),
                            name: name,
                            score: score
                        };
                        this.hiscores.push(data), this.save()
                    }
                }, SavedData.prototype.getBestScore = function(timestamp) {
                    var result = null;
                    timestamp = timestamp || 0;
                    for (var i = 0; i < this.hiscores.length; i++) this.hiscores[i].timestamp < timestamp || (null == result || this.hiscores[i].score > result.score) && (result = this.hiscores[i]);
                    return console.log(result), result
                }, SavedData.prototype.awardTokens = function(tokens) {
                    this.tokens += tokens, window.localStorage[this.TOKEN_NAME] = this.tokens
                }
            }, {
                "./Common": 5
            }
        ],
        11: [
            function(require, module, exports) {
                function Utils() {}
                var Common = require("./Common");
                module.exports = Utils, Utils.FIRST_BUTTON_POSITION_H_MARGIN = 84, Utils.getFirstButtonPositionRight = function() {
                    return Math.min(Math.round(.5 * (Common.STAGE_WIDTH + p3.View.width)), Common.STAGE_WIDTH - 150) - Utils.FIRST_BUTTON_POSITION_H_MARGIN
                }, Utils.getSecondButtonPositionRight = function() {
                    return Math.min(Math.round(.5 * (Common.STAGE_WIDTH + p3.View.width)), Common.STAGE_WIDTH - 150) - 2.4 * Utils.FIRST_BUTTON_POSITION_H_MARGIN
                }, Utils.getFirstButtonPositionLeft = function() {
                    return Math.max(Math.round(.5 * (Common.STAGE_WIDTH - p3.View.width)), 150) + Utils.FIRST_BUTTON_POSITION_H_MARGIN
                }, Utils.getSecondButtonPositionLeft = function() {
                    return Math.max(Math.round(.5 * (Common.STAGE_WIDTH - p3.View.width)), 150) + 2.4 * Utils.FIRST_BUTTON_POSITION_H_MARGIN
                }
            }, {
                "./Common": 5
            }
        ],
        12: [
            function(require, module, exports) {
                function AirUnit(world, type) {
                    GameObject.call(this, world, type), this._isFriendly = !1, this._health = 10, this._healthMax = 10, this._speed = 120, this._accuracy = 1, this._attackTarget = null, this._spriteContainer = null, this._spawner = null, this._score = 0
                }
                var GameObject = (require("../Common"), require("./GameObject"));
                module.exports = AirUnit, AirUnit.prototype = Object.create(GameObject.prototype), AirUnit.prototype.constructor = AirUnit, AirUnit.prototype.init = function() {
                    this._spriteContainer = new PIXI.Container, this.addChild(this._spriteContainer)
                }, AirUnit.prototype.update = function() {
                    GameObject.prototype.update.call(this), this.isDead
                }, AirUnit.prototype.spawn = function(tile) {
                    this._spawnTile = tile, this.setTilePosition(this._spawnTile), this._world.objects.units[this.type].push(this), this._world.layers.sky.addChild(this)
                }, AirUnit.prototype.setTilePosition = function(x, y) {
                    if ("undefined" != typeof x.x) var y = x.y,
                        x = x.x;
                    this.position = this._world.getCoordsAtTile(x, y)
                }, AirUnit.prototype.removeFromScene = function(time, callback) {
                    if (time = "undefined" == typeof time ? 0 : parseFloat(time), time <= 0) {
                        var index = this._world.objects.units[this.type].indexOf(this);
                        if (index != -1) {
                            if ("function" == typeof callback && callback(), this._world.objects.units[this.type].splice(index, 1), this.parent && this.parent.removeChild(this), this._spawner) {
                                var spawnerIndex = this._spawner._entities.indexOf(this);
                                spawnerIndex != -1 ? this._spawner._entities.splice(spawnerIndex, 1) : console.error("Index not found")
                            }
                        } else console.error("AirUnit, removeFromScene failed: Index not found %i", index), console.log(this)
                    } else {
                        new TimelineMax({
                            delay: time,
                            onStartScope: this,
                            onStart: function() {
                                this.removeFromScene(0, callback)
                            }
                        })
                    }
                }, Object.defineProperty(AirUnit.prototype, "isAlive", {
                    get: function() {
                        return this._health > 0
                    }
                }), Object.defineProperty(AirUnit.prototype, "isDead", {
                    get: function() {
                        return this._health <= 0
                    }
                }), Object.defineProperty(AirUnit.prototype, "isFriendly", {
                    get: function() {
                        return this._isFriendly
                    }
                }), Object.defineProperty(AirUnit.prototype, "tile", {
                    get: function() {
                        return this._status == this.STATUS_WALK ? this._path.tiles[this._pathIndex - 1] : this._world.getTileAtCoords(this.x, this.y)
                    }
                })
            }, {
                "../Common": 5,
                "./GameObject": 31
            }
        ],
        13: [
            function(require, module, exports) {
                function AirUnitTieFighter(world, params) {
                    AirUnit.call(this, world, "flyingVehicle"), this._culling = !1, this._speed = 1200, this._angle = 135, this._score = 0, this._canShoot = !0, this._shootRadius = 330, this._soundsRange = 1500, this._soundFly = null
                }
                var AirUnit = (require("../Common"), require("./AirUnit"));
                module.exports = AirUnitTieFighter, AirUnitTieFighter.prototype = Object.create(AirUnit.prototype), AirUnitTieFighter.prototype.constructor = AirUnitTieFighter, AirUnitTieFighter.prototype.init = function() {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(-this._world.mapTileSize, -this._world.mapTileSize, 2 * this._world.mapTileSize, 2 * this._world.mapTileSize), this._world.debug && this.drawCollision(), AirUnit.prototype.init.call(this), this._shadow = new PIXI.Sprite(this._assetManager.getTexture("tie_fighter_flyby_shadow_00")), this._shadow.anchor.set(.5), this._shadow.x += 200, this._shadow.y -= 50, this._shadow.scale.set(2.5), this._spriteContainer.addChild(this._shadow), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("tie_fighter_flyby_00")), this._sprite.anchor.set(.5), this._sprite.scale.set(2), this._spriteContainer.addChild(this._sprite), this._world.debug && (this._futurePositionGraphic = new PIXI.Graphics, this._futurePositionGraphic.beginFill(14423100, .5), this._futurePositionGraphic.drawCircle(0, 0, this._shootRadius), this._futurePositionGraphic.endFill(), this._world.layers.ground.addChild(this._futurePositionGraphic))
                }, AirUnitTieFighter.prototype.update = function() {
                    if (AirUnit.prototype.update.call(this), this.x += Math.cos(this._angle * PIXI.DEG_TO_RAD) * this._speed * p3.Timestep.deltaTime, this.y += Math.sin(this._angle * PIXI.DEG_TO_RAD) * this._speed * p3.Timestep.deltaTime, this.y > this._world.mapHeight + 400) return void this.removeFromScene();
                    if (!this._soundFly) {
                        var distance = Math.sqrt(Math.pow(this._world.focusPosition.x - this.x, 2) + Math.pow(this._world.focusPosition.y - this.y, 2));
                        distance < this._soundsRange && (this._soundFly = this.playRandomSound(["sfx_tiefighter_flyby_00", "sfx_tiefighter_flyby_03"]))
                    }
                    if (this._canShoot && this._world.party.isAlive) {
                        var futurePosition = new PIXI.Point,
                            futureTime = 2;
                        futurePosition.x = this.x + Math.cos(this._angle * PIXI.DEG_TO_RAD) * this._speed * futureTime + this._shadow.x, futurePosition.y = this.y + Math.sin(this._angle * PIXI.DEG_TO_RAD) * this._speed * futureTime + this._shadow.y;
                        var partyPosition = this._world.party.getAveragePosition(),
                            distance = Math.sqrt(Math.pow(futurePosition.x - partyPosition.x, 2) + Math.pow(futurePosition.y - partyPosition.y, 2));
                        distance < this._shootRadius && this.shoot(futurePosition), this._world.debug && this._futurePositionGraphic.position.set(futurePosition.x, futurePosition.y)
                    }
                }, AirUnitTieFighter.prototype.shoot = function(position) {
                    this._canShoot = !1;
                    for (var i = 0; i < 5; i++) {
                        new TimelineMax({
                            delay: .2 * i,
                            onStartScope: this,
                            onStartParams: [i, position],
                            onStart: function(i, position) {
                                var dX = 100 * Math.random() - 50,
                                    bullet = this._world.objectManager.generate("bulletLaserAirstrike");
                                bullet._isFriendly = !1, bullet._owner = this, bullet._angle = this._angle * PIXI.DEG_TO_RAD, bullet._lifeMax = .75, bullet.x = this.x + dX, bullet.y = this.y, bullet.xEnd = position.x + .2 * i * Math.cos(this._angle * PIXI.DEG_TO_RAD) * this._speed + dX, bullet.yEnd = position.y + .2 * i * Math.sin(this._angle * PIXI.DEG_TO_RAD) * this._speed, bullet.xWing = !1, bullet.setup(), this._world.objects.bullets.push(bullet), this._world.layers.sky.addChild(bullet)
                            }
                        })
                    }
                }, AirUnitTieFighter.prototype.removeFromScene = function(time) {
                    this._world.debug && this._futurePositionGraphic.parent.removeChild(this._futurePositionGraphic), AirUnit.prototype.removeFromScene.call(this, time)
                }, AirUnitTieFighter.prototype.isClicked = function(clickPos) {
                    return !1
                }
            }, {
                "../Common": 5,
                "./AirUnit": 12
            }
        ],
        14: [
            function(require, module, exports) {
                function AirUnitXWing(world, params) {
                    AirUnit.call(this, world, "flyingVehicle"), this._culling = !1, this._score = 0, this._soundsRange = 1500, this._soundFly = null
                }
                var Common = require("../Common"),
                    AirUnit = require("./AirUnit");
                require("./BulletLaserAirstrike");
                module.exports = AirUnitXWing, AirUnitXWing.prototype = Object.create(AirUnit.prototype), AirUnitXWing.prototype.constructor = AirUnitXWing, AirUnitXWing.prototype.init = function() {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(-this._world.mapTileSize, -this._world.mapTileSize, 2 * this._world.mapTileSize, 2 * this._world.mapTileSize), this._world.debug && this.drawCollision(), AirUnit.prototype.init.call(this), this._shadow = new PIXI.Sprite(this._assetManager.getTexture("xwing_flyby_00_shadow")), this._shadow.anchor.set(.5), this._shadow.x += 200, this._shadow.y -= 50, this._shadow.scale.set(2.5), this._spriteContainer.addChild(this._shadow), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("xwing_flyby_00")), this._sprite.anchor.set(.5), this._sprite.scale.set(2), this._spriteContainer.addChild(this._sprite);
                    var delay = .5;
                    this._world.changeZoom(.75, 1.5), this._spawnPosition = new PIXI.Point(this.x, this.y);
                    for (var i = 0; i < 10; i++) var tl = new TimelineMax({
                        delay: delay + .15 * i,
                        onStartScope: this,
                        onStartParams: [i],
                        onStart: function(i) {
                            var angle = 12 * PIXI.DEG_TO_RAD,
                                bullet = this._world.objectManager.generate("bulletLaserAirstrike");
                            bullet._isFriendly = !1, bullet._owner = this, bullet._angle = angle, bullet._lifeMax = .5, bullet.xEnd = this._spawnPosition.x + 200 * i - 700, bullet.yEnd = this._spawnPosition.y + p3.Utils.randomRange(-100, 0) + (i % 2 == 0 ? 250 : 0), bullet.xWing = !0, bullet.xWingLast = 9 == i;
                            for (var targetFound = !1, i = 0; i < this._world.objects.units.enemy.length; i++)
                                if (!this._world.objects.units.enemy[i].isDead && this._world.objects.units.enemy[i].isInRange(new PIXI.Point(bullet.xEnd, bullet.yEnd), 220)) {
                                    bullet.xEnd = this._world.objects.units.enemy[i].x, bullet.yEnd = this._world.objects.units.enemy[i].y, targetFound = !0;
                                    break
                                }
                            if (!targetFound)
                                for (var i = 0; i < this._world.objects.units.destructible.length; i++)
                                    if (!this._world.objects.units.destructible[i].isDead && this._world.objects.units.destructible[i]._mission && this._world.objects.units.destructible[i].isInRange(new PIXI.Point(bullet.xEnd, bullet.yEnd), 270)) {
                                        bullet.xEnd = this._world.objects.units.destructible[i].x, bullet.yEnd = this._world.objects.units.destructible[i].y, targetFound = !0;
                                        break
                                    }
                            bullet.setup(), this._world.objects.bullets.push(bullet), this._world.layers.sky.addChild(bullet)
                        }
                    });
                    var time = 1.2;
                    this.x -= Common.STAGE_WIDTH / 2, this.y -= Common.STAGE_HEIGHT / 2, this.alpha = 0, this.lastPos = new PIXI.Point(this.x, this.y);
                    var tl = new TimelineMax({
                        delay: 1.5 + delay,
                        onUpdateScope: this,
                        onUpdate: function() {
                            this.rotation = new PIXI.Point(this.x, this.y).angle(this.lastPos), this.lastPos = new PIXI.Point(this.x, this.y)
                        },
                        onCompleteScope: this,
                        onComplete: function() {
                            this._world.changeZoom(1, 2), this.removeFromScene(2)
                        }
                    });
                    tl.to(this, .2, {
                        alpha: 1,
                        ease: Linear.easeNone
                    }, 0), tl.to(this, time, {
                        x: this.x + Common.STAGE_WIDTH + 1e3,
                        ease: Linear.easeNone
                    }, 0), tl.to(this, time / 2, {
                        y: this.y + Common.STAGE_HEIGHT / 3,
                        ease: Quad.easeout
                    }, 0), tl.to(this, time / 2, {
                        y: this.y,
                        ease: Quad.easeIn
                    }, time / 2), Common.animator.add(tl)
                }, AirUnitXWing.prototype.update = function() {
                    if (AirUnit.prototype.update.call(this), !this._soundFly) {
                        var distance = Math.sqrt(Math.pow(this._world.focusPosition.x - this.x, 2) + Math.pow(this._world.focusPosition.y - this.y, 2));
                        distance < this._soundsRange && (this._soundFly = this.playRandomSound(["sfx_xwing_flyby_00", "sfx_xwing_flyby_01"]))
                    }
                }, AirUnitXWing.prototype.removeFromScene = function(time, callback) {
                    if (time = "undefined" == typeof time ? 0 : parseFloat(time), time <= 0) {
                        var index = this._world.objects.units[this.type].indexOf(this);
                        if (index != -1) {
                            if ("function" == typeof callback && callback(), this._world.objects.units[this.type].splice(index, 1), this.parent && this.parent.removeChild(this), this._spawner) {
                                var spawnerIndex = this._spawner._entities.indexOf(this);
                                spawnerIndex != -1 ? this._spawner._entities.splice(spawnerIndex, 1) : console.error("Index not found")
                            }
                        } else console.error("AirUnit, removeFromScene failed: Index not found %i", index), console.log(this)
                    } else {
                        new TimelineMax({
                            delay: time,
                            onStartScope: this,
                            onStart: function() {
                                this.removeFromScene(0, callback)
                            }
                        })
                    }
                }, AirUnitXWing.prototype.isClicked = function(clickPos) {
                    return Math.sqrt(Math.pow(this.x - clickPos.x, 2) + Math.pow(this.y - clickPos.y, 2)) <= this._clickCollisionMask.radius
                }
            }, {
                "../Common": 5,
                "./AirUnit": 12,
                "./BulletLaserAirstrike": 19
            }
        ],
        15: [
            function(require, module, exports) {
                function Bullet(world, type) {
                    GameObject.call(this, world, type), this._active = !0, this._owner = null, this._damage = 0, this._angle = 0, this._speed = 0, this._life = 0, this._lifeMax = 1, this._isFriendly = !1, this._target = null, this._sprite = null
                }
                var GameObject = (require("../Common"), require("./GameObject"));
                module.exports = Bullet, Bullet.prototype = Object.create(GameObject.prototype), Bullet.prototype.constructor = Bullet, Bullet.prototype.init = function() {}, Bullet.prototype.reset = function() {
                    this._life = 0, this._target = null, this._active = !0, this.scale.set(1)
                }, Bullet.prototype.update = function() {
                    GameObject.prototype.update.call(this)
                }, Bullet.prototype.pause = function() {
                    GameObject.prototype.pause.call(this)
                }, Bullet.prototype.resume = function() {
                    GameObject.prototype.resume.call(this)
                }, Bullet.prototype.setup = function() {}, Bullet.prototype.checkEnvironmentCollisions = function(line) {
                    for (var i = 0; i < this._world.objects.static.length; i++)
                        if (this._world.objects.static[i].visible && this._world.objects.static[i].isTall) {
                            var shape = this._world.objects.static[i].getSATShape();
                            if (shape && SAT.testPolygonPolygon(line, shape)) return !0
                        }
                    return !1
                }, Bullet.prototype.checkCollisions = function(line, multiple) {
                    for (var targets = [], i = 0; i < this._world.objects.units.destructible.length; i++)
                        if (!this._world.objects.units.destructible[i].isDead && this._world.objects.units.destructible[i].visible) {
                            var shape = this._world.objects.units.destructible[i].getSATShape();
                            if (shape && SAT.testPolygonPolygon(line, shape)) {
                                if (!multiple) return this._world.objects.units.destructible[i];
                                targets.push(this._world.objects.units.destructible[i])
                            }
                        }
                    if (this._isFriendly) {
                        for (var i = 0; i < this._world.objects.units.enemy.length; i++)
                            if (!this._world.objects.units.enemy[i].isDead && this._world.objects.units.enemy[i].visible && SAT.testPolygonPolygon(line, this._world.objects.units.enemy[i].getSATShape())) {
                                if (!multiple) return this._world.objects.units.enemy[i];
                                targets.push(this._world.objects.units.enemy[i])
                            }
                    } else {
                        for (var aliveCharacters = this._world.party.getAliveCharacters(), i = 0; i < aliveCharacters.length; i++)
                            if (SAT.testPolygonPolygon(line, aliveCharacters[i].getSATShape())) {
                                if (!multiple) return aliveCharacters[i];
                                targets.push(aliveCharacters[i])
                            }
                        for (var i = 0; i < this._world.objects.units.ally.length; i++)
                            if (!this._world.objects.units.ally[i].isDead && this._world.objects.units.ally[i].visible && SAT.testPolygonPolygon(line, this._world.objects.units.ally[i].getSATShape())) {
                                if (!multiple) return this._world.objects.units.ally[i];
                                targets.push(this._world.objects.units.ally[i])
                            }
                    }
                    return !!multiple && targets
                }, Bullet.prototype.removeFromScene = function(time, callback) {
                    if (time = "undefined" == typeof time ? 0 : parseFloat(time), time <= 0) {
                        this._active = !1, "function" == typeof callback && callback();
                        var index = this._world.objects.bullets.indexOf(this);
                        index != -1 ? this._world.objects.bullets.splice(index, 1) : console.error("Bullet, removeFromScene failed: Index not found"), this.parent && this.parent.removeChild(this), this._debugGraphic && (this._debugGraphic.parent.removeChild(this._debugGraphic), this._debugGraphic = null), this._world.objectManager.dispose(this)
                    } else {
                        if (!this._active) return console.error("Trying to remove a bullet already queued"), void console.log(this);
                        this._active = !1;
                        new TimelineMax({
                            delay: time,
                            onStartScope: this,
                            onStart: function() {
                                this.removeFromScene(0, callback)
                            }
                        })
                    }
                }, Bullet.prototype.getPositionRelativeToObject = function(object) {
                    return this.position
                }, Object.defineProperty(Bullet.prototype, "tile", {
                    get: function() {
                        return this._world.getTileAtCoords(this.x, this.y)
                    }
                }), Object.defineProperty(Bullet.prototype, "isFriendly", {
                    get: function() {
                        return this._isFriendly
                    }
                })
            }, {
                "../Common": 5,
                "./GameObject": 31
            }
        ],
        16: [
            function(require, module, exports) {
                function BulletBomb(world) {
                    Bullet.call(this, world, "bulletBomb"), this._damage = 30, this._radius = 7.5, this._lifeMax = 5, this._isFriendly = !0, this._blinkStart = 1, this._blinkEnd = 6
                }
                var Common = require("../Common"),
                    Bullet = require("./Bullet");
                module.exports = BulletBomb, BulletBomb.prototype = Object.create(Bullet.prototype), BulletBomb.prototype.constructor = BulletBomb, BulletBomb.prototype.setup = function() {
                    Bullet.prototype.setup.call(this), this._sprite || (this._sprite = new PIXI.Sprite(this._assetManager.getTexture("projectile_mine_00")), this._sprite.anchor.set(.5), this.addChild(this._sprite), this._spriteOn = new PIXI.Sprite(this._assetManager.getTexture("projectile_mine_01")), this._spriteOn.anchor.set(.5), this._sprite.addChild(this._spriteOn), this._countdownText = new PIXI.Text(this._lifeMax, {
                        fontFamily: "Arial",
                        fontSize: 24,
                        fill: 16777215,
                        align: "center",
                        stroke: 0,
                        strokeThickness: 4
                    }), this._countdownText.anchor.set(.5), this._countdownText.y = -30, this._countdownText.scale.set(0), this._sprite.addChild(this._countdownText), this.baseHeight = this._sprite.height / 2), this._sprite.texture.baseTexture.mipmap = !1, this._sprite.visible = !0, this.blink(), this.playSound("sfx_grenade_timer_loop_02", {
                        loop: !0
                    }), this._audioWarningTimeline = new TimelineMax({
                        delay: this._lifeMax - 1.75,
                        onStartScope: this,
                        onStart: function() {
                            this.playSound("sfx_grenade_warning_00")
                        }
                    }), Common.animator.add(this._audioWarningTimeline), this._aoeGraphic = new PIXI.Graphics, this._aoeGraphic.beginFill(14423100, .5), this._aoeGraphic.drawCircle(0, 0, this._radius * this._world.mapTileSize), this._aoeGraphic.endFill(), this._aoeGraphic.lineStyle(3, 14423100, 1), this._aoeGraphic.drawCircle(0, 0, this._radius * this._world.mapTileSize), this._aoeGraphic.position.set(this.x, this.y), this._world.layers.floor.addChild(this._aoeGraphic);
                    var aoeIntroTime = .5,
                        aoeWarningTime = this._lifeMax - aoeIntroTime,
                        aoePulses = 4,
                        aoeAlpha = .6;
                    this._aoeGraphic.scale.set(0), this._aoeGraphic.alpha = 0, this._aoeTimeline = new TimelineMax, this._aoeTimeline.to(this._aoeGraphic, aoeIntroTime / 2, {
                        alpha: aoeAlpha,
                        ease: Sine.easeInOut
                    }, 0), this._aoeTimeline.to(this._aoeGraphic.scale, aoeIntroTime, {
                        x: 1,
                        y: 1,
                        ease: Sine.easeOut
                    }, 0), this._aoeTimeline.to(this._aoeGraphic, aoeWarningTime / (2 * aoePulses), {
                        alpha: .4,
                        ease: Sine.easeInOut,
                        yoyo: !0,
                        repeat: 2 * aoePulses
                    }, aoeIntroTime), this._aoeTimeline.to(this._aoeGraphic.scale, aoeWarningTime / (2 * aoePulses), {
                        x: .95,
                        y: .95,
                        ease: Sine.easeInOut,
                        yoyo: !0,
                        repeat: 2 * aoePulses
                    }, aoeIntroTime), Common.animator.add(this._aoeTimeline), this._countdownTimeline = new TimelineMax;
                    for (var i = 0; i < this._lifeMax; i++) this._countdownTimeline.to(this._countdownText.scale, .1, {
                        x: 1,
                        y: 1,
                        ease: Sine.easeOut
                    }, i), this._countdownTimeline.to(this._countdownText.scale, .9, {
                        x: .75,
                        y: .75,
                        ease: Sine.easeOut
                    }, i + .1);
                    Common.animator.add(this._countdownTimeline)
                }, BulletBomb.prototype.update = function() {
                    if (Bullet.prototype.update.call(this), this._active && (this._countdownText.text = Math.ceil(this._lifeMax - this._life), this._life += p3.Timestep.deltaTime, this._life > this._lifeMax)) return void this.explode()
                }, BulletBomb.prototype.pause = function() {
                    Bullet.prototype.pause.call(this), this._audioWarningTimeline && this._audioWarningTimeline.pause(), this._aoeTimeline && this._aoeTimeline.pause(), this._countdownTimeline && this._countdownTimeline.pause(), this._blinkTimeline && this._blinkTimeline.pause()
                }, BulletBomb.prototype.resume = function() {
                    Bullet.prototype.resume.call(this), this._audioWarningTimeline && this._audioWarningTimeline.play(), this._aoeTimeline && this._aoeTimeline.play(), this._countdownTimeline && this._countdownTimeline.play(), this._blinkTimeline && this._blinkTimeline.play()
                }, BulletBomb.prototype.blink = function() {
                    this._spriteOn.alpha = 1;
                    var perc = this._life / this._lifeMax,
                        time = 1 / (this._blinkStart + perc * (this._blinkEnd - this._blinkStart));
                    this._blinkTimeline = new TimelineMax({
                        onCompleteScope: this,
                        onComplete: function() {
                            this._active && this.blink()
                        }
                    }), this._blinkTimeline.to(this._spriteOn, time, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), Common.animator.add(this._blinkTimeline)
                }, BulletBomb.prototype.explode = function() {
                    if (this._active) {
                        this._sprite.visible = !1, this.stopSound();
                        var explosion = this._world.objectManager.generate("effectExplosion");
                        explosion.scale.set(2), explosion.play(this.x, this.y, ["sfx_grenade_explode_00"]), this._world.layers.floor.removeChild(this._aoeGraphic);
                        new TimelineMax({
                            delay: .1,
                            onStartScope: this,
                            onStart: function() {
                                this._world.damageArea(new PIXI.Point(this.x, this.y), this._radius * this._world.mapTileSize, this._damage)
                            }
                        });
                        this._world.shake(.5, new PIXI.Point(20, 15)), this.removeFromScene(.5)
                    }
                }
            }, {
                "../Common": 5,
                "./Bullet": 15
            }
        ],
        17: [
            function(require, module, exports) {
                function BulletGranade(world) {
                    Bullet.call(this, world, "bulletGranade"), this._speed = 600, this._speedEnd = 0, this._speedTime = 1, this._heightMax = 100, this._heightTimeIn = .3, this._heightTimeOut = .4, this._blinkStart = 1, this._blinkEnd = 6, this._damage = 30, this._radius = 7.5
                }
                var Common = require("../Common"),
                    Bullet = require("./Bullet");
                module.exports = BulletGranade, BulletGranade.prototype = Object.create(Bullet.prototype), BulletGranade.prototype.constructor = BulletGranade, BulletGranade.prototype.setup = function() {
                    Bullet.prototype.setup.call(this), this._spriteContainer || (this._shadow = new PIXI.Sprite(this._assetManager.getTexture("marine_shadow_00")), this._shadow.anchor.set(.5), this._shadow.y -= 5, this.addChild(this._shadow), this._spriteContainer = new PIXI.Container, this.addChild(this._spriteContainer), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("projectile_mine_00")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite), this._spriteOn = new PIXI.Sprite(this._assetManager.getTexture("projectile_mine_01")), this._spriteOn.anchor.set(.5), this._sprite.addChild(this._spriteOn)), this._spriteContainer.y = 0, this._sprite.texture.baseTexture.mipmap = !1, this._sprite.visible = !0, this.blink(), this.playSound("sfx_grenade_timer_loop_02", {
                        loop: !0
                    }), this._audioWarningTimeline = new TimelineMax({
                        delay: this._lifeMax - 1.75,
                        onStartScope: this,
                        onStart: function() {
                            this.playSound("sfx_grenade_warning_00")
                        }
                    }), Common.animator.add(this._audioWarningTimeline), this._targetPS = this._world.objectManager.generate("effectAirstrikeTarget"), this._targetPS.play(this.x, this.y), this._targetPS.scale.set(1.25), this._speedTimeline = new TimelineMax, this._speedTimeline.to(this, this._speedTime, {
                        _speed: this._speedEnd,
                        ease: Sine.easeIn
                    }, 0), Common.animator.add(this._speedTimeline), this._height = 0, this._spriteContainer.scale.set(.5);
                    var tl = new TimelineMax;
                    tl.to(this._spriteContainer, this._heightTimeIn, {
                        y: -this._heightMax,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._spriteContainer.scale, this._heightTimeIn, {
                        x: 1.5 * this._spriteContainer.scale.x,
                        y: 1.5 * this._spriteContainer.scale.y,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._spriteContainer, this._heightTimeOut, {
                        y: 0,
                        ease: Sine.easeIn
                    }, this._heightTimeIn), tl.to(this._spriteContainer.scale, this._heightTimeOut, {
                        x: this._spriteContainer.scale.x,
                        y: this._spriteContainer.scale.y,
                        ease: Sine.easeIn
                    }, this._heightTimeIn), Common.animator.add(tl), this._sprite.rotation = 0;
                    var tl = new TimelineMax;
                    tl.to(this._sprite, this._heightTimeIn + this._heightTimeOut, {
                        rotation: 2 * Math.PI,
                        ease: Sine.easeIn
                    }, 0), Common.animator.add(tl)
                }, BulletGranade.prototype.update = function() {
                    if (Bullet.prototype.update.call(this), this._active) {
                        if (this._life += p3.Timestep.deltaTime, this._life > this._lifeMax) return void this.explode();
                        if (this._speed > 0) {
                            var origin = new SAT.Vector(this.x, this.y);
                            this.x += Math.cos(this._angle) * this._speed * p3.Timestep.deltaTime, this.y += Math.sin(this._angle) * this._speed * p3.Timestep.deltaTime, this._targetPS.position.set(this.x, this.y);
                            var points = [new SAT.Vector(0, 0), new SAT.Vector(this.x - origin.x, this.y - origin.y)],
                                line = new SAT.Polygon(origin, points);
                            this.checkEnvironmentCollisions(line) && (this._speed = 0, this._speedTimeline.kill())
                        }
                    }
                }, BulletGranade.prototype.blink = function() {
                    this._spriteOn.alpha = 1;
                    var perc = this._life / this._lifeMax,
                        time = 1 / (this._blinkStart + perc * (this._blinkEnd - this._blinkStart));
                    this._blinkTimeline = new TimelineMax({
                        onCompleteScope: this,
                        onComplete: function() {
                            this._active && this.blink()
                        }
                    }), this._blinkTimeline.to(this._spriteOn, time, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), Common.animator.add(this._blinkTimeline)
                }, BulletGranade.prototype.explode = function() {
                    if (this._active) {
                        this._sprite.visible = !1, this._targetPS && (this._targetPS.removeFromScene(), this._targetPS = null), this.stopSound();
                        var explosion = this._world.objectManager.generate("effectExplosion");
                        explosion.scale.set(2), explosion.play(this.x, this.y, ["sfx_grenade_explode_00"]), this._world.layers.floor.removeChild(this._aoeGraphic);
                        new TimelineMax({
                            delay: .1,
                            onStartScope: this,
                            onStart: function() {
                                this._world.damageArea(new PIXI.Point(this.x, this.y), this._radius * this._world.mapTileSize, this._damage)
                            }
                        });
                        this._world.shake(.5, new PIXI.Point(20, 15)), this.removeFromScene(.5)
                    }
                }
            }, {
                "../Common": 5,
                "./Bullet": 15
            }
        ],
        18: [
            function(require, module, exports) {
                function BulletLaser(world) {
                    Bullet.call(this, world, "bulletLaser"), this._fadeInTime = .3, this._fadeOutTime = .2, this._texture = "", this._shootSounds = null
                }
                var Bullet = (require("../Common"), require("./Bullet"));
                module.exports = BulletLaser, BulletLaser.prototype = Object.create(Bullet.prototype), BulletLaser.prototype.constructor = BulletLaser, BulletLaser.prototype.reset = function() {
                    Bullet.prototype.reset.call(this), this._texture = "", this._shootSounds = null
                }, BulletLaser.prototype.setup = function() {
                    Bullet.prototype.setup.call(this);
                    var texture = this._texture || (this._isFriendly, "projectile_laser_00");
                    this._sprite ? this._sprite.texture = this._assetManager.getTexture(texture) : (this._sprite = new PIXI.Sprite(this._assetManager.getTexture(texture)), this._sprite.anchor.set(.5), this._sprite.scale.set(.5), this._sprite.blendMode = PIXI.BLEND_MODES.ADD, this._sprite.rotation -= Math.PI / 2, this.addChild(this._sprite)), this._sprite.texture.baseTexture.mipmap = !1, this.alpha = 0, this._shootSounds ? this.playRandomSound(this._shootSounds) : this._owner.isFriendly ? this.playRandomSound(["sfx_trooper_blaster_00", "sfx_trooper_blaster_01", "sfx_trooper_blaster_02"]) : this.playRandomSound(["sfx_stormtrooper_blaster_00", "sfx_stormtrooper_blaster_01"])
                }, BulletLaser.prototype.update = function() {
                    if (Bullet.prototype.update.call(this), this._active) {
                        if (this._life += p3.Timestep.deltaTime, this._life > this._lifeMax) return void this.removeFromScene();
                        this._life < this._fadeInTime ? this.alpha = this._life / this._fadeInTime : this._life > this._lifeMax - this._fadeOutTime ? this.alpha = 1 - (this._life - (this._lifeMax - this._fadeOutTime)) / this._fadeOutTime : this.alpha = 1;
                        var origin = new SAT.Vector(this.x, this.y);
                        this.x += Math.cos(this._angle) * this._speed * p3.Timestep.deltaTime, this.y += Math.sin(this._angle) * this._speed * p3.Timestep.deltaTime, this.rotation = this._angle;
                        var points = [new SAT.Vector(0, 0), new SAT.Vector(this.x - origin.x, this.y - origin.y)],
                            line = new SAT.Polygon(origin, points),
                            target = this.checkCollisions(line);
                        if (target) {
                            if (this._speed > 1e3) {
                                var hitEffect = this._world.objectManager.generate("effectHitSniper");
                                hitEffect.play(this.x, this.y)
                            }
                            return target.hit(this._damage), void this.removeFromScene()
                        }
                        if (this.checkEnvironmentCollisions(line)) {
                            if (this._speed > 1e3) {
                                var hitEffect = this._world.objectManager.generate("effectHitSniper");
                                hitEffect.play(this.x, this.y)
                            }
                            return void this.removeFromScene()
                        }
                    }
                }
            }, {
                "../Common": 5,
                "./Bullet": 15
            }
        ],
        19: [
            function(require, module, exports) {
                function BulletLaserAirstrike(world) {
                    Bullet.call(this, world, "bulletLaserAirstrike"), this._damage = 30, this._radius = 5, this.xWing = !0, this.xWingLast = !1, this._soundsRange = 2500
                }
                var Bullet = (require("../Common"), require("./Bullet"));
                module.exports = BulletLaserAirstrike, BulletLaserAirstrike.prototype = Object.create(Bullet.prototype), BulletLaserAirstrike.prototype.constructor = BulletLaserAirstrike, BulletLaserAirstrike.prototype.setup = function() {
                    Bullet.prototype.setup.call(this);
                    var texture = this.xWing ? "projectile_xwinglaser_00" : "projectile_tielaser_00";
                    this._sprite ? this._sprite.texture = this._assetManager.getTexture(texture) : (this._sprite = new PIXI.Sprite(this._assetManager.getTexture(texture)), this._sprite.anchor.set(.5), this._sprite.scale.set(.5), this._sprite.blendMode = PIXI.BLEND_MODES.ADD, this._sprite.rotation -= Math.PI / 2, this.addChild(this._sprite)), this._sprite.texture.baseTexture.mipmap = !1, this.rotation = this._angle, this.x = this.xEnd - 2e3 * Math.cos(this._angle), this.y = this.yEnd - 2e3 * Math.sin(this._angle), this.xStart = this.x, this.yStart = this.y, this._targetPS = this._world.objectManager.generate("effectAirstrikeTarget"), this._targetPS.play(this.xEnd, this.yEnd), this.xWing ? this.playSound(this.xWingLast ? "sfx_xwing_laser_04" : "sfx_xwing_laser_00") : this.playRandomSound(["sfx_tiefighter_gun_00", "sfx_tiefighter_gun_01", "sfx_tiefighter_gun_02", "sfx_tiefighter_gun_03", "sfx_tiefighter_gun_04"])
                }, BulletLaserAirstrike.prototype.update = function() {
                    if (Bullet.prototype.update.call(this), this._active) {
                        if (this._life += p3.Timestep.deltaTime, this._life > this._lifeMax) {
                            this._targetPS && this._targetPS.fadeOut();
                            var explosion = this._world.objectManager.generate("effectExplosion");
                            explosion.play(this.x - 30, this.y, ["sfx_barrel_explode_00"]);
                            new TimelineMax({
                                delay: .1,
                                onStartScope: this,
                                onStartParams: [this.x, this.y],
                                onStart: function(x, y) {
                                    this._world.damageArea(new PIXI.Point(x, y), this._radius * this._world.mapTileSize, this._damage, !!this.xWing)
                                }
                            });
                            return this._world.shake(.5, new PIXI.Point(10, 10)), void this.removeFromScene()
                        }
                        this.x = this.xStart + (this.xEnd - this.xStart) * (this._life / this._lifeMax), this.y = this.yStart + (this.yEnd - this.yStart) * (this._life / this._lifeMax), this.rotation = this._angle
                    }
                }
            }, {
                "../Common": 5,
                "./Bullet": 15
            }
        ],
        20: [
            function(require, module, exports) {
                function BulletLaserExplosive(world) {
                    Bullet.call(this, world, "bulletLaserBig"), this._fadeInTime = .3, this._fadeOutTime = .2
                }
                var Bullet = (require("../Common"), require("./Bullet"));
                module.exports = BulletLaserExplosive, BulletLaserExplosive.prototype = Object.create(Bullet.prototype), BulletLaserExplosive.prototype.constructor = BulletLaserExplosive, BulletLaserExplosive.prototype.setup = function() {
                    Bullet.prototype.setup.call(this);
                    var texture = this._isFriendly ? "projectile_xwinglaser_00" : "projectile_tielaser_00";
                    this._sprite ? this._sprite.texture = this._assetManager.getTexture(texture) : (this._sprite = new PIXI.Sprite(this._assetManager.getTexture(texture)), this._sprite.anchor.set(.5), this._sprite.scale.set(.5), this._sprite.blendMode = PIXI.BLEND_MODES.ADD, this._sprite.rotation -= Math.PI / 2, this.addChild(this._sprite)), this._sprite.texture.baseTexture.mipmap = !1, this.alpha = 0, this.playRandomSound(["sfx_gun_turret_0"])
                }, BulletLaserExplosive.prototype.update = function() {
                    if (Bullet.prototype.update.call(this), this._active) {
                        if (this._life += p3.Timestep.deltaTime, this._life > this._lifeMax) {
                            var explosion = this._world.objectManager.generate("effectExplosion");
                            explosion.scale.set(1), explosion.play(this.x, this.y, ["sfx_barrel_explode_00"]);
                            new TimelineMax({
                                delay: .1,
                                onStartScope: this,
                                onStart: function() {
                                    this._world.damageArea(new PIXI.Point(this.x, this.y), this._radius * this._world.mapTileSize, this._damage)
                                }
                            });
                            return this._world.shake(.5, new PIXI.Point(20, 15)), void this.removeFromScene()
                        }
                        this._life < this._fadeInTime ? this.alpha = this._life / this._fadeInTime : this.alpha = 1;
                        new SAT.Vector(this.x, this.y);
                        this.x += Math.cos(this._angle) * this._speed * p3.Timestep.deltaTime, this.y += Math.sin(this._angle) * this._speed * p3.Timestep.deltaTime, this.rotation = this._angle
                    }
                }
            }, {
                "../Common": 5,
                "./Bullet": 15
            }
        ],
        21: [
            function(require, module, exports) {
                function BulletRocket(world) {
                    Bullet.call(this, world, "bulletRocket"), this._speedMin = 100, this._speedMax = 700, this._speedTime = .5, this._scaleInTime = .5, this._damage = 40, this._radius = 5
                }
                var Common = require("../Common"),
                    Bullet = require("./Bullet");
                module.exports = BulletRocket, BulletRocket.prototype = Object.create(Bullet.prototype), BulletRocket.prototype.constructor = BulletRocket, BulletRocket.prototype.setup = function() {
                    Bullet.prototype.setup.call(this), this._speed = this._speedMin;
                    var tl = new TimelineMax;
                    tl.to(this, this._speedTime, {
                        _speed: this._speedMax,
                        ease: Back.easeIn
                    }, 0), Common.animator.add(tl);
                    var texture = this._isFriendly ? "projectile_rocket_02" : "projectile_rocket_01";
                    this._sprite ? this._sprite.texture = this._assetManager.getTexture(texture) : (this._sprite = new PIXI.Sprite(this._assetManager.getTexture(texture)), this._sprite.anchor.set(.5), this._sprite.rotation += Math.PI / 2, this.addChild(this._sprite)), this._sprite.texture.baseTexture.mipmap = !1, this._sprite.visible = !0, this.trailPS || (this.trailPS = new PIXI.particles.Emitter(this._world.layers.sky, [this._assetManager.getTexture("particle_explode_smoke_00")], this._assetManager.getJSON("particle_bazooka_trail_01"))), this.trailPS.emit = !1, this.trailPS.cleanup(), this.playSound("sfx_rocket_launch_03")
                }, BulletRocket.prototype.update = function() {
                    if (Bullet.prototype.update.call(this), this.trailPS && (0 == this._life ? this.trailPS.tl = new TimelineMax({
                        delay: .25,
                        onStartScope: this,
                        onStart: function() {
                            this.trailPS.updateOwnerPos(this.x, this.y), this.trailPS.emit = !0, this.trailPS.update(p3.Timestep.deltaTime), this.trailPS.cleanup()
                        }
                    }) : (this.trailPS.updateOwnerPos(this.x, this.y), this.trailPS.update(p3.Timestep.deltaTime))), this._active) {
                        if (this._life += p3.Timestep.deltaTime, this._life > this._lifeMax) return void this.explode();
                        this._life < this._scaleInTime ? this._sprite.scale.set(this._life / this._scaleInTime) : this._sprite.scale.set(1);
                        var origin = new SAT.Vector(this.x, this.y);
                        this.x += Math.cos(this._angle) * this._speed * p3.Timestep.deltaTime, this.y += Math.sin(this._angle) * this._speed * p3.Timestep.deltaTime, this.rotation = this._angle;
                        var points = [new SAT.Vector(0, 0), new SAT.Vector(this.x - origin.x, this.y - origin.y)],
                            line = new SAT.Polygon(origin, points);
                        if (this.checkEnvironmentCollisions(line) || this.checkCollisions(line)) return void this.explode()
                    }
                }, BulletRocket.prototype.explode = function() {
                    if (this._active) {
                        this.trailPS && (this.trailPS.emit = !1, this.trailPS.tl && this.trailPS.tl.kill()), this._sprite.visible = !1;
                        var explosion = this._world.objectManager.generate("effectExplosion");
                        explosion.play(this.x, this.y, ["sfx_barrel_explode_00"]);
                        new TimelineMax({
                            delay: .1,
                            onStartScope: this,
                            onStart: function() {
                                this._world.damageArea(new PIXI.Point(this.x, this.y), this._radius * this._world.mapTileSize, this._damage)
                            }
                        });
                        this._world.shake(.5, new PIXI.Point(10, 10)), this.removeFromScene(.5)
                    }
                }
            }, {
                "../Common": 5,
                "./Bullet": 15
            }
        ],
        22: [
            function(require, module, exports) {
                function BulletSniper(world) {
                    Bullet.call(this, world, "bulletSniper"), this._fadeInTime = 0, this._fadeOutTime = .5, this._vRay = new PIXI.Point(0, 0)
                }
                var Bullet = (require("../Common"), require("./Bullet"));
                module.exports = BulletSniper, BulletSniper.prototype = Object.create(Bullet.prototype), BulletSniper.prototype.constructor = BulletSniper, BulletSniper.prototype.setup = function() {
                    Bullet.prototype.setup.call(this);
                    for (var length = 50; length < 1e3; length += 20) {
                        this._vRay.x = length * Math.cos(-this._angle), this._vRay.y = -length * Math.sin(-this._angle);
                        var points = [new SAT.Vector(0, 0), new SAT.Vector(this._vRay.x, this._vRay.y)],
                            line = new SAT.Polygon(new SAT.Vector(this.x, this.y), points);
                        if (this.checkEnvironmentCollisions(line)) break
                    }
                    var texture = this._assetManager.getTexture(this._isFriendly ? "projectile_rail_02" : "projectile_rail_00");
                    texture.baseTexture.mipmap = !1, this._sprite ? (this._sprite.texture = texture, this._sprite.height = length) : (this._sprite = new PIXI.extras.TilingSprite(texture, texture.width, length - 10), this._sprite.anchor.set(.5, 0), this._sprite.blendMode = PIXI.BLEND_MODES.ADD, this.addChild(this._sprite)), this._sprite.rotation = this._angle - Math.PI / 2, this._sprite.x = 10 * Math.cos(-this._angle), this._sprite.y = 10 * -Math.sin(-this._angle), this.alpha = 1, this.playRandomSound(["sfx_sniperrifle_reverb_00", "sfx_sniperrifle_reverb_01", "sfx_sniperrifle_reverb_02", "sfx_sniperrifle_reverb_03", "sfx_sniperrifle_reverb_04"])
                }, BulletSniper.prototype.update = function() {
                    if (Bullet.prototype.update.call(this), this._active) {
                        if (0 == this._life)
                            for (var points = [new SAT.Vector(0, 0), new SAT.Vector(this._vRay.x, this._vRay.y)], line = new SAT.Polygon(new SAT.Vector(this.x, this.y), points), targets = this.checkCollisions(line, !0), i = 0; i < targets.length; i++) targets[i].hit(this._damage);
                        if (this._life += p3.Timestep.deltaTime, this._life > this._lifeMax) return void this.removeFromScene();
                        this._life < this._fadeInTime ? this.alpha = this._life / this._fadeInTime : this._life > this._lifeMax - this._fadeOutTime ? this.alpha = 1 - (this._life - (this._lifeMax - this._fadeOutTime)) / this._fadeOutTime : this.alpha = 1
                    }
                }, BulletSniper.prototype.getPositionRelativeToObject = function(obj) {
                    var vRayNormalized = new PIXI.Point(this._vRay.x, this._vRay.y);
                    vRayNormalized.normalize();
                    var vObject = new PIXI.Point(obj.x - this.x, obj.y - this.y),
                        vProjLength = vObject.dotProduct(this._vRay) / this._vRay.getLength(),
                        vProj = new PIXI.Point(vRayNormalized.x * vProjLength, vRayNormalized.y * vProjLength);
                    return vProj.x != this._vRay.x ? (vProj.x / this._vRay.x < 0 && (vProj = new PIXI.Point(0, 0)), vProj.x / this._vRay.x > 1 && (vProj = new PIXI.Point(this._vRay.x, this._vRay.y))) : (vProj.y / this._vRay.y < 0 && (vProj = new PIXI.Point(0, 0)), vProj.y / this._vRay.y > 1 && (vProj = new PIXI.Point(this._vRay.x, this._vRay.y))), new PIXI.Point(this.x + vProj.x, this.y + vProj.y)
                }
            }, {
                "../Common": 5,
                "./Bullet": 15
            }
        ],
        23: [
            function(require, module, exports) {
                function Effect(world, type) {
                    GameObject.call(this, world, type), this._layer = "sky", this._paused = !1
                }
                var GameObject = (require("../Common"), require("./GameObject"));
                module.exports = Effect, Effect.prototype = Object.create(GameObject.prototype), Effect.prototype.constructor = Effect, Effect.prototype.play = function(x, y) {
                    this.x = x, this.y = y, this._world.objects.effects.push(this), this._world.layers[this._layer].addChild(this)
                }, Effect.prototype.pause = function() {
                    this._paused = !0
                }, Effect.prototype.resume = function() {
                    this._paused = !1
                }, Effect.prototype.update = function() {
                    GameObject.prototype.update.call(this)
                }, Effect.prototype.removeFromScene = function() {
                    var index = this._world.objects.effects.indexOf(this);
                    index != -1 ? this._world.objects.effects.splice(index, 1) : console.error("Effect, removeFromScene failed: Index not found"), this.parent && this.parent.removeChild(this)
                }, Effect.prototype.culling = function(visible) {
                    GameObject.prototype.culling.call(this, visible), visible ? this.resume() : this.pause()
                }
            }, {
                "../Common": 5,
                "./GameObject": 31
            }
        ],
        24: [
            function(require, module, exports) {
                function EffectAirstrikeTarget(world) {
                    Effect.call(this, world, "effectAirstrikeTarget"), this.targetPS = new PIXI.particles.Emitter(this, [this._assetManager.getTexture("particle_white_target_01")], this._assetManager.getJSON("particle_emitter_xwing_target_00")), this._layer = "ground"
                }
                var Common = require("../Common"),
                    Effect = (require("./GameObject"), require("./Effect"));
                module.exports = EffectAirstrikeTarget, EffectAirstrikeTarget.prototype = Object.create(Effect.prototype), EffectAirstrikeTarget.prototype.constructor = EffectAirstrikeTarget, EffectAirstrikeTarget.prototype.reset = function() {
                    this.scale.set(1), this.alpha = 0, this.fadeTimeline && (this.fadeTimeline.kill(), this.fadeTimeline = null)
                }, EffectAirstrikeTarget.prototype.play = function(x, y, audio) {
                    Effect.prototype.play.call(this, x, y), this.targetPS.emit = !0, audio && this.playRandomSound(audio), this.alpha = 0, this.fadeTimeline = new TimelineMax, this.fadeTimeline.to(this, .4, {
                        alpha: 1,
                        ease: Linear.easeNone
                    }, 0), Common.animator.add(this.fadeTimeline)
                }, EffectAirstrikeTarget.prototype.update = function() {
                    Effect.prototype.update.call(this), this.targetPS && this.targetPS.update(p3.Timestep.deltaTime)
                }, EffectAirstrikeTarget.prototype.fadeOut = function() {
                    this.fadeTimeline && this.fadeTimeline.kill(), this.fadeTimeline = new TimelineMax({
                        onCompleteScope: this,
                        onComplete: function() {
                            this.removeFromScene()
                        }
                    }), this.fadeTimeline.to(this, .3, {
                        alpha: 0,
                        ease: Linear.easeNone
                    }, 0), Common.animator.add(this.fadeTimeline)
                }, EffectAirstrikeTarget.prototype.removeFromScene = function() {
                    this._world.objectManager.dispose(this), Effect.prototype.removeFromScene.call(this)
                }
            }, {
                "../Common": 5,
                "./Effect": 23,
                "./GameObject": 31
            }
        ],
        25: [
            function(require, module, exports) {
                function EffectExplosion(world) {
                    Effect.call(this, world, "effectExplosion"), this.smokePS = new PIXI.particles.Emitter(this, [this._assetManager.getTexture("particle_explode_smoke_00"), this._assetManager.getTexture("particle_explode_smoke_01")], this._assetManager.getJSON("particle_explode_bgsmoke_00")), this.corePS = new PIXI.particles.Emitter(this, [this._assetManager.getTexture("particle_explode_smoke_00"), this._assetManager.getTexture("particle_explode_smoke_01")], this._assetManager.getJSON("particle_explode_coreflash_01")), this.sparklesPS = new PIXI.particles.Emitter(this, [this._assetManager.getTexture("particle_explode_spark_00"), this._assetManager.getTexture("particle_explode_spark_01"), this._assetManager.getTexture("particle_explode_spark_02")], this._assetManager.getJSON("particle_explode_shockwave_fire2")), this._explosionMark = new PIXI.Sprite(this._assetManager.getTexture("env_00_ground_crater_01")), this._explosionMark.anchor.set(.5), this._soundsRange = 1600
                }
                var Common = require("../Common"),
                    Effect = (require("./GameObject"), require("./Effect"));
                module.exports = EffectExplosion, EffectExplosion.prototype = Object.create(Effect.prototype), EffectExplosion.prototype.constructor = EffectExplosion, EffectExplosion.prototype.reset = function() {
                    this.scale.set(1)
                }, EffectExplosion.prototype.play = function(x, y, audio) {
                    Effect.prototype.play.call(this, x, y), this.smokePS.emit = !0, this.corePS.emit = !0, this.sparklesPS.emit = !0, audio && this.playRandomSound(audio), this._explosionMark.alpha = 1, this._explosionMark.position.set(x, y), this._explosionMark.scale.set(this.scale.x / 1.5), this._world.layers.floor.addChild(this._explosionMark), this.explosionMarkTimeline = new TimelineMax({
                        onCompleteScope: this,
                        onComplete: function() {
                            this.removeFromScene()
                        }
                    }), this.explosionMarkTimeline.to(this._explosionMark, 2, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 3), Common.animator.add(this.explosionMarkTimeline)
                }, EffectExplosion.prototype.update = function() {
                    Effect.prototype.update.call(this), this.smokePS && this.smokePS.update(p3.Timestep.deltaTime), this.corePS && this.corePS.update(p3.Timestep.deltaTime), this.sparklesPS && this.sparklesPS.update(p3.Timestep.deltaTime)
                }, EffectExplosion.prototype.removeFromScene = function() {
                    this._world.objectManager.dispose(this), this._world.layers.floor.removeChild(this._explosionMark), Effect.prototype.removeFromScene.call(this)
                }
            }, {
                "../Common": 5,
                "./Effect": 23,
                "./GameObject": 31
            }
        ],
        26: [
            function(require, module, exports) {
                function EffectExplosionBig(world) {
                    Effect.call(this, world, "effectExplosion"), this.smokePS = new PIXI.particles.Emitter(this, [this._assetManager.getTexture("particle_explode_smoke_00"), this._assetManager.getTexture("particle_explode_smoke_01")], this._assetManager.getJSON("particle_explode_bgsmoke_00")), this.corePS = new PIXI.particles.Emitter(this, [this._assetManager.getTexture("particle_explode_smoke_00"), this._assetManager.getTexture("particle_explode_smoke_01")], this._assetManager.getJSON("particle_explode_coreflash_01")), this.sparklesPS = new PIXI.particles.Emitter(this, [this._assetManager.getTexture("particle_explode_spark_00"), this._assetManager.getTexture("particle_explode_spark_01"), this._assetManager.getTexture("particle_explode_spark_02")], this._assetManager.getJSON("particle_explode_shockwave_fire2")), this._explosionMark = new PIXI.Sprite(this._assetManager.getTexture("env_00_ground_crater_01")), this._explosionMark.anchor.set(.5), this._soundsRange = 1600
                }
                var Common = require("../Common"),
                    Effect = (require("./GameObject"), require("./Effect"));
                module.exports = EffectExplosionBig, EffectExplosionBig.prototype = Object.create(Effect.prototype), EffectExplosionBig.prototype.constructor = EffectExplosionBig, EffectExplosionBig.prototype.reset = function() {
                    this.scale.set(1)
                }, EffectExplosionBig.prototype.play = function(x, y, audio) {
                    Effect.prototype.play.call(this, x, y), this.smokePS.emit = !0, this.corePS.emit = !0, this.sparklesPS.emit = !0, audio && this.playRandomSound(audio), this._explosionMark.alpha = 1, this._explosionMark.position.set(x, y), this._explosionMark.scale.set(this.scale.x / 1.5), this._world.layers.floor.addChild(this._explosionMark), this.explosionMarkTimeline = new TimelineMax({
                        onCompleteScope: this,
                        onComplete: function() {
                            this.removeFromScene()
                        }
                    }), this.explosionMarkTimeline.to(this._explosionMark, 2, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 3), Common.animator.add(this.explosionMarkTimeline)
                }, EffectExplosionBig.prototype.update = function() {
                    Effect.prototype.update.call(this), this.smokePS && this.smokePS.update(p3.Timestep.deltaTime), this.corePS && this.corePS.update(p3.Timestep.deltaTime), this.sparklesPS && this.sparklesPS.update(p3.Timestep.deltaTime)
                }, EffectExplosionBig.prototype.removeFromScene = function() {
                    this._world.objectManager.dispose(this), this._world.layers.floor.removeChild(this._explosionMark), Effect.prototype.removeFromScene.call(this)
                }
            }, {
                "../Common": 5,
                "./Effect": 23,
                "./GameObject": 31
            }
        ],
        27: [
            function(require, module, exports) {
                function EffectScore(world) {
                    Effect.call(this, world, "effectScore"), this._score = new PIXI.extras.BitmapText("scire", {
                        font: "24px Great Escape Stroke",
                        tint: 16777215,
                        align: "center"
                    }), this._score.anchor.set(.5), this.addChild(this._score)
                }
                var Common = require("../Common"),
                    Effect = (require("./GameObject"), require("./Effect"));
                module.exports = EffectScore, EffectScore.prototype = Object.create(Effect.prototype), EffectScore.prototype.constructor = EffectScore, EffectScore.prototype.reset = function() {
                    this._score.alpha = 1, this._score.y = 0
                }, EffectScore.prototype.play = function(x, y, score) {
                    Effect.prototype.play.call(this, x, y), this._score.text = score, this.scoreTimeline = new TimelineMax({
                        onCompleteScope: this,
                        onComplete: function() {
                            this.removeFromScene()
                        }
                    }), this.scoreTimeline.to(this._score, 1.5, {
                        alpha: 0,
                        y: this._score.y - 30,
                        ease: Quad.easeOut
                    }, 0), Common.animator.add(this.scoreTimeline)
                }, EffectScore.prototype.update = function() {
                    Effect.prototype.update.call(this)
                }
            }, {
                "../Common": 5,
                "./Effect": 23,
                "./GameObject": 31
            }
        ],
        28: [
            function(require, module, exports) {
                function EffectSmoke(world, color, time) {
                    Effect.call(this, world, "effectSmoke"), this.smokePS = new PIXI.particles.Emitter(this, [this._assetManager.getTexture("particle_explode_smoke_00")], this._assetManager.getJSON("white" == color ? "particle_building_smoke_00" : "particle_destroyed_smoke_01")), this._time = time, time <= 0 && (this._culling = !0), this._soundsRange = 1600
                }
                var Effect = (require("../Common"), require("./GameObject"), require("./Effect"));
                module.exports = EffectSmoke, EffectSmoke.prototype = Object.create(Effect.prototype), EffectSmoke.prototype.constructor = EffectSmoke, EffectSmoke.prototype.reset = function() {
                    this.scale.set(1)
                }, EffectSmoke.prototype.play = function(x, y, audio) {
                    if (Effect.prototype.play.call(this, x, y), this.smokePS.emit = !0, this._time > 0) {
                        new TimelineMax({
                            delay: this._time,
                            onStartScope: this,
                            onStart: function() {
                                this.smokePS.emit = !1, this.removeFromScene(5)
                            }
                        })
                    }
                    audio && this.playRandomSound(audio)
                }, EffectSmoke.prototype.update = function() {
                    Effect.prototype.update.call(this), this._paused || this.smokePS && this.smokePS.update(p3.Timestep.deltaTime)
                }, EffectSmoke.prototype.removeFromScene = function(time) {
                    if (time = "undefined" == typeof time ? 0 : parseFloat(time), time <= 0) this.smokePS && this.smokePS.cleanup(), this._world.objectManager.dispose(this), Effect.prototype.removeFromScene.call(this);
                    else {
                        new TimelineMax({
                            delay: time,
                            onStartScope: this,
                            onStart: function() {
                                this.removeFromScene(0)
                            }
                        })
                    }
                }
            }, {
                "../Common": 5,
                "./Effect": 23,
                "./GameObject": 31
            }
        ],
        29: [
            function(require, module, exports) {
                function EffectSniperHit(world, color) {
                    Effect.call(this, world, "effectSniperHit"), this.hitPS = new PIXI.particles.Emitter(this, [this._assetManager.getTexture("particle_explode_spark_02")], this._assetManager.getJSON("particle_emitter_sniper_hit_00"))
                }
                var Effect = (require("../Common"), require("./GameObject"), require("./Effect"));
                module.exports = EffectSniperHit, EffectSniperHit.prototype = Object.create(Effect.prototype), EffectSniperHit.prototype.constructor = EffectSniperHit, EffectSniperHit.prototype.reset = function() {
                    this.scale.set(1)
                }, EffectSniperHit.prototype.play = function(x, y, audio) {
                    Effect.prototype.play.call(this, x, y), this.hitPS.emit = !0, this.removeFromScene(2), audio && this.playRandomSound(audio)
                }, EffectSniperHit.prototype.update = function() {
                    Effect.prototype.update.call(this), this._paused || this.hitPS && this.hitPS.update(p3.Timestep.deltaTime)
                }, EffectSniperHit.prototype.removeFromScene = function(time) {
                    if (time = "undefined" == typeof time ? 0 : parseFloat(time), time <= 0) this.hitPS && this.hitPS.cleanup(), this._world.objectManager.dispose(this), Effect.prototype.removeFromScene.call(this);
                    else {
                        new TimelineMax({
                            delay: time,
                            onStartScope: this,
                            onStart: function() {
                                this.removeFromScene(0)
                            }
                        })
                    }
                }
            }, {
                "../Common": 5,
                "./Effect": 23,
                "./GameObject": 31
            }
        ],
        30: [
            function(require, module, exports) {
                function GameMap(world) {
                    this._assetManager = p3.AssetManager.instance, PIXI.Container.call(this), this._world = world, this._bg = null, this._map = null, this._radarAngle = 0, this._settings = {
                        mapWidth: null,
                        mapHeight: null,
                        mapScale: null,
                        radarSpeed: 180,
                        radarPlayerColor: 16748544,
                        radarEnemyColor: 16724787,
                        radarMedkitColor: 3407667,
                        radarDestructibleColor: 65535,
                        radarTargetColor: 16777077
                    }
                }

                function StaticObjectsFilter(fragmentSource) {
                    PIXI.Filter.call(this, null, fragmentSource, {
                        resolution: {
                            type: "2fv",
                            value: new Float32Array([256, 256])
                        },
                        staticColor: {
                            type: "4fv",
                            value: new Float32Array([0, 1, 1, 1])
                        },
                        radarWideness: {
                            type: "1f",
                            value: 1.25 * Math.PI
                        },
                        radarColor: {
                            type: "4fv",
                            value: new Float32Array([0, 1, 1, 1])
                        },
                        radarAngle: {
                            type: "1f",
                            value: 0
                        },
                        radarIntensity: {
                            type: "1f",
                            value: .35
                        },
                        radarLuminosity: {
                            type: "1f",
                            value: .15
                        },
                        radarBrightness: {
                            type: "1f",
                            value: 4
                        },
                        radarLineWideness: {
                            type: "1f",
                            value: Math.PI / 90
                        },
                        radarLineColor: {
                            type: "4fv",
                            value: new Float32Array([1, 1, 1, 1])
                        }
                    })
                }

                function UnitObjectsFilter(fragmentSource) {
                    PIXI.Filter.call(this, null, fragmentSource, {
                        resolution: {
                            type: "2fv",
                            value: new Float32Array([256, 256])
                        },
                        radarWideness: {
                            type: "1f",
                            value: 3 * Math.PI
                        },
                        radarAngle: {
                            type: "1f",
                            value: 0
                        },
                        radarLineWideness: {
                            type: "1f",
                            value: Math.PI / 90
                        },
                        radarLineColor: {
                            type: "4fv",
                            value: new Float32Array([1, 1, 1, 1])
                        }
                    })
                }
                var Common = require("../Common"),
                    Utils = require("../Utils"),
                    SWButton = require("../ui/SWButton"),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = GameMap, GameMap.prototype = Object.create(PIXI.Container.prototype), GameMap.prototype.constructor = GameMap, GameMap.prototype.init = function() {
                    this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .85, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this._bg.touchstart = this._bg.mousedown = this.onCloseBtn_click.bind(this), this.addChild(this._bg), this._mapContainer = new PIXI.Container, this._mapContainer.position.set(Common.STAGE_WIDTH / 2, Common.STAGE_HEIGHT / 2), this.addChild(this._mapContainer);
                    var targets = this._world.missionManager.getTargetPositions(),
                        leader = this._world.party.getLeader().position,
                        topLeft = new PIXI.Point(leader.x, leader.y),
                        bottomRight = new PIXI.Point(leader.x, leader.y);
                    if (targets.length > 0) {
                        for (var i = 0; i < targets.length; i++) targets[i].x < topLeft.x ? topLeft.x = targets[i].x : targets[i].x > bottomRight.x && (bottomRight.x = targets[i].x), targets[i].y < topLeft.y ? topLeft.y = targets[i].y : targets[i].y > bottomRight.y && (bottomRight.y = targets[i].y);
                        if (bottomRight.x - topLeft.x < 1e3) {
                            var delta = 1e3 - (bottomRight.x - topLeft.x);
                            topLeft.x -= delta / 2, bottomRight.x += delta / 2
                        }
                        if (bottomRight.y - topLeft.y < 1e3) {
                            var delta = 1e3 - (bottomRight.y - topLeft.y);
                            topLeft.y -= delta / 2, bottomRight.y += delta / 2
                        }
                    } else topLeft.x -= 500, bottomRight.x += 500, topLeft.y -= 500, bottomRight.y += 500;
                    this._settings.mapWidth = 775, this._settings.mapHeight = 495, this._settings.mapRatio = this._settings.mapWidth / this._settings.mapHeight;
                    var contentWidth = 1.5 * (bottomRight.x - topLeft.x),
                        contentHeigth = 1.5 * (bottomRight.y - topLeft.y),
                        contentRatio = contentWidth / contentHeigth;
                    contentRatio > this._settings.mapRatio ? (this._settings.contentWidth = contentWidth, this._settings.contentHeigth = contentWidth / this._settings.mapRatio) : (this._settings.contentHeigth = contentHeigth, this._settings.contentWidth = contentHeigth * this._settings.mapRatio);
                    var center = new PIXI.Point(topLeft.x + (bottomRight.x - topLeft.x) / 2, topLeft.y + (bottomRight.y - topLeft.y) / 2);
                    this._settings.mapCenter = center, this._settings.mapScale = this._settings.mapWidth / this._settings.contentWidth, this._map = new PIXI.Container, this._map.x = -this._settings.mapWidth / 2, this._map.y = -this._settings.mapHeight / 2, this._mapContainer.addChild(this._map), this._map._bg = new PIXI.Sprite(Common.generatedTextures.whiteSquare), this._map._bg.width = this._settings.mapWidth, this._map._bg.height = this._settings.mapHeight, this._map._bg.x -= (this._map._bg.width - this._settings.mapWidth) / 2, this._map._bg.tint = 5394, this._map.addChild(this._map._bg), this._map._staticObjects = new PIXI.Container, this._map._staticObjects.x = -(center.x - this._settings.contentWidth / 2) * this._settings.mapScale, this._map._staticObjects.y = -(center.y - this._settings.contentHeigth / 2) * this._settings.mapScale;
                    var bg = new PIXI.Sprite(Common.generatedTextures.whiteSquare);
                    bg.width = this._settings.mapWidth, bg.height = this._settings.mapHeight, bg.x = -this._map._staticObjects.x, bg.y = -this._map._staticObjects.y, bg.tint = 0, this._map._staticObjects.addChild(bg);
                    for (var i = 0; i < this._world.objects.static.length; i++)
                        if (this._world.objects.static[i].isSolid) {
                            var staticObject = new PIXI.Sprite(this._world.objects.static[i].sprite.texture);
                            staticObject.anchor.set(this._world.objects.static[i].sprite.anchor.x, this._world.objects.static[i].sprite.anchor.y), staticObject.x = this._world.objects.static[i].x * this._settings.mapScale, staticObject.y = this._world.objects.static[i].y * this._settings.mapScale, staticObject.rotation = this._world.objects.static[i].rotation, staticObject.scale.set(this._settings.mapScale), this._map._staticObjects.addChild(staticObject)
                        }
                    var renderTexture = PIXI.RenderTexture.create(this._settings.mapWidth, this._settings.mapHeight);
                    Common.renderer.render(this._map._staticObjects, renderTexture), this._map._staticObjects = new PIXI.Sprite(renderTexture), this._map.addChild(this._map._staticObjects), this._staticObjectsFragmentShader = ["varying vec2 vTextureCoord;", "varying vec4 vColor;", "uniform vec4  staticColor;", "uniform vec4  radarColor;", "uniform float radarWideness;", "uniform float radarAngle;", "uniform float radarIntensity;", "uniform float radarBrightness;", "uniform float radarLuminosity;", "uniform vec2  resolution;", "uniform sampler2D uSampler;", "float getLuminosity(vec4 color)", "{", "\treturn 0.299*color.r + 0.587*color.g + 0.114*color.b;", "}", "float atan2(float y, float x)", "{", "\treturn 2.0 * atan(y / (sqrt(x * x + y * y) + x));", "}", "float nextPowerOfTwo(float n)", "{", "\treturn pow(2.0, ceil(log(n)/log(2.0)));", "}", "void main(void)", "{", "float pi        = 3.1415926535897932384626433832795;", "vec4 pixelColor  = texture2D(uSampler, vTextureCoord);", "float luminosity = getLuminosity(pixelColor);", "vec2 scale = vec2(nextPowerOfTwo(resolution.x)/resolution.x, nextPowerOfTwo(resolution.y)/resolution.y);", "vec2 p     = vec2(vTextureCoord.x * scale.x, vTextureCoord.y * scale.y);", "vec2 center = vec2(0.507, 0.5075);", "float pAngle = atan2(center.x - p.x, p.y - center.y);", "float angleDiff = mod(radarAngle - pAngle, pi * 2.0);", "float value = 1.0 - angleDiff * (1.0 / radarWideness);", "luminosity = luminosity - radarLuminosity + radarLuminosity * value * radarBrightness;", "vec4 color = vec4(staticColor.r * luminosity * pixelColor.a, staticColor.g * luminosity * pixelColor.a, staticColor.b * luminosity * pixelColor.a, pixelColor.a);", "color.rgb = max(vec3(value * radarIntensity) * radarColor.rgb, color.rgb * pixelColor.a);", "gl_FragColor = color;", "}"].join("\n");
                    var filter = new StaticObjectsFilter(this._staticObjectsFragmentShader);
                    filter.uniforms.resolution = new Float32Array([this._settings.mapWidth, this._settings.mapHeight]), filter.blendMode = PIXI.BLEND_MODES.ADD, this._map._staticObjects.filters = [filter];
                    var gridUnit = 350;
                    gridUnit = this._world.mapWidth / Math.round(this._world.mapWidth / gridUnit), this._gridGraphic = new PIXI.Graphics, this._gridGraphic.lineStyle(2, 65535), this._gridGraphic.alpha = .4, this._gridGraphic.moveTo(this._settings.mapWidth / 2 - Math.min(this._settings.mapWidth, this._settings.mapHeight), this._settings.mapHeight / 2 - Math.min(this._settings.mapWidth, this._settings.mapHeight)), this._gridGraphic.lineTo(this._settings.mapWidth / 2 + Math.min(this._settings.mapWidth, this._settings.mapHeight), this._settings.mapHeight / 2 + Math.min(this._settings.mapWidth, this._settings.mapHeight)), this._gridGraphic.moveTo(this._settings.mapWidth / 2 + Math.min(this._settings.mapWidth, this._settings.mapHeight), this._settings.mapHeight / 2 - Math.min(this._settings.mapWidth, this._settings.mapHeight)), this._gridGraphic.lineTo(this._settings.mapWidth / 2 - Math.min(this._settings.mapWidth, this._settings.mapHeight), this._settings.mapHeight / 2 + Math.min(this._settings.mapWidth, this._settings.mapHeight)), this._gridGraphic.moveTo(this._settings.mapWidth / 2, 0), this._gridGraphic.lineTo(this._settings.mapWidth / 2, this._settings.mapHeight), this._gridGraphic.moveTo(0, this._settings.mapHeight / 2), this._gridGraphic.lineTo(this._settings.mapWidth, this._settings.mapHeight / 2);
                    for (var radius = gridUnit * this._settings.mapScale; radius <= Math.sqrt(Math.pow(this._settings.mapWidth / 2, 2) + Math.pow(this._settings.mapHeight / 2, 2)); radius += gridUnit * this._settings.mapScale) this._gridGraphic.drawCircle(this._settings.mapWidth / 2, this._settings.mapHeight / 2, radius);
                    var mask = new PIXI.Sprite(Common.generatedTextures.whiteSquare);
                    mask.width = this._settings.mapWidth, mask.height = this._settings.mapHeight, this._map.addChild(mask), this._gridGraphic.mask = mask, this._map.addChild(this._gridGraphic), this._map._unitObjects = new PIXI.Container, this._map._unitObjects.x = -(center.x - this._settings.contentWidth / 2) * this._settings.mapScale, this._map._unitObjects.y = -(center.y - this._settings.contentHeigth / 2) * this._settings.mapScale;
                    var bg = new PIXI.Sprite(Common.generatedTextures.whiteSquare);
                    bg.width = this._settings.mapWidth, bg.height = this._settings.mapHeight, bg.tint = 0, this._map._unitObjects.addChild(bg);
                    var start = this._world.party.getLeader(),
                        end = this._world.missionManager.getNearestTargetPosition();
                    if (end) {
                        var path = this._world.pathfinding(start.tile, this._world.getTileAtCoords(end), !0);
                        if (path) {
                            var pathfindingGraphic = new PIXI.Graphics;
                            pathfindingGraphic.lineStyle(4, 65535), this._map._unitObjects.addChild(pathfindingGraphic);
                            for (var increment = 1 + Math.floor(path.tiles.length / 80), i = 0; i < path.tiles.length; i += increment) {
                                var position = this._world.getCoordsAtTile(path.tiles[i]);
                                i % (2 * increment) == 0 ? pathfindingGraphic.moveTo(position.x * this._settings.mapScale, position.y * this._settings.mapScale) : pathfindingGraphic.lineTo(position.x * this._settings.mapScale, position.y * this._settings.mapScale)
                            }
                        }
                    }
                    for (var i = 0; i < this._world.objects.units.enemy.length; i++) {
                        var enemy = this._world.objects.units.enemy[i];
                        if (!enemy.isDead) {
                            var unitObject = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_enemy_radar"));
                            unitObject.anchor.set(.5), unitObject.x = enemy.x * this._settings.mapScale, unitObject.y = enemy.y * this._settings.mapScale, unitObject.rotation = -enemy.angle, unitObject.scale.set(1), unitObject.tint = this._settings.radarEnemyColor, this._map._unitObjects.addChild(unitObject)
                        }
                    }
                    var player = this._world.party.getLeader(),
                        unitObject = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_player_legend"));
                    unitObject.anchor.set(.5), unitObject.x = player.x * this._settings.mapScale, unitObject.y = player.y * this._settings.mapScale, unitObject.rotation = -player.angle, unitObject.tint = this._settings.radarPlayerColor, this._map._unitObjects.addChild(unitObject);
                    for (var i = 0; i < this._world.objects.items.length; i++) {
                        var item = this._world.objects.items[i];
                        switch (item.type) {
                            case "medkit":
                                var unitObject = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_health_radar"));
                                unitObject.anchor.set(.5), unitObject.x = item.x * this._settings.mapScale, unitObject.y = item.y * this._settings.mapScale, unitObject.tint = this._settings.radarMedkitColor, this._map._unitObjects.addChild(unitObject)
                        }
                    }
                    for (var targets = this._world.missionManager.getTargetPositions(), i = 0; i < targets.length; i++) {
                        var unitObject = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_goal_legend"));
                        unitObject.anchor.set(.5), unitObject.x = targets[i].x * this._settings.mapScale, unitObject.y = targets[i].y * this._settings.mapScale, unitObject.tint = this._settings.radarTargetColor, unitObject.scale.set(.8), this._map._unitObjects.addChild(unitObject)
                    }
                    var renderTexture = PIXI.RenderTexture.create(this._settings.mapWidth, this._settings.mapHeight);
                    Common.renderer.render(this._map._unitObjects, renderTexture), this._map._unitObjects = new PIXI.Sprite(renderTexture), this._map.addChild(this._map._unitObjects), this._unitObjectsFragmentShader = ["varying vec2 vTextureCoord;", "varying vec4 vColor;", "uniform float radarWideness;", "uniform float radarAngle;", "uniform vec4  radarLineColor;", "uniform float radarLineWideness;", "uniform vec2  resolution;", "uniform sampler2D uSampler;", "float atan2(float y, float x)", "{", "\treturn 2.0 * atan(y / (sqrt(x * x + y * y) + x));", "}", "float nextPowerOfTwo(float n)", "{", "\treturn pow(2.0, ceil(log(n)/log(2.0)));", "}", "float when_lt(float x, float y)", "{", "\treturn max(sign(y - x), 0.0);", "}", "void main(void)", "{", "float pi        = 3.1415926535897932384626433832795;", "vec4 pixelColor = texture2D(uSampler, vTextureCoord);", "vec2 scale = vec2(nextPowerOfTwo(resolution.x)/resolution.x, nextPowerOfTwo(resolution.y)/resolution.y);", "vec2 p     = vec2(vTextureCoord.x * scale.x, vTextureCoord.y * scale.y);", "vec2 center = vec2(0.507, 0.5075);", "float pAngle = atan2(center.x - p.x, p.y - center.y);", "float angleDiff = mod(radarAngle - pAngle, pi * 2.0);", "float value = 1.0 - angleDiff * (1.0 / radarWideness);", "vec4 color = pixelColor * value;", "color += radarLineColor * when_lt(angleDiff, radarLineWideness);", "gl_FragColor = color;", "}"].join("\n");
                    var filter = new UnitObjectsFilter(this._unitObjectsFragmentShader);
                    filter.uniforms.resolution = new Float32Array([this._settings.mapWidth, this._settings.mapHeight]), filter.blendMode = PIXI.BLEND_MODES.ADD, this._map._unitObjects.filters = [filter], this._map._targets = new PIXI.Container, this._map._targets.x = -(center.x - this._settings.contentWidth / 2) * this._settings.mapScale, this._map._targets.y = -(center.y - this._settings.contentHeigth / 2) * this._settings.mapScale, this._map.addChild(this._map._targets);
                    for (var i = 0; i < 10; i++) {
                        var target = new PIXI.Sprite(this._assetManager.getTexture("device/ui_device_radar_target_circle"));
                        target.anchor.set(.5), target.tint = this._settings.radarTargetColor, this._map._targets.addChild(target)
                    }
                    this._map._playerTargets = new PIXI.Container, this._map._playerTargets.x = -(center.x - this._settings.contentWidth / 2) * this._settings.mapScale, this._map._playerTargets.y = -(center.y - this._settings.contentHeigth / 2) * this._settings.mapScale, this._map.addChild(this._map._playerTargets), this._map._playerTarget = new PIXI.Sprite(this._assetManager.getTexture("device/ui_device_radar_target_circle")), this._map._playerTarget.anchor.set(.5), this._map._playerTarget.tint = this._settings.radarPlayerColor, this._map._playerTargets.addChild(this._map._playerTarget), this._deviceBotSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box")), this._deviceBotSprite.anchor = new PIXI.Point(.5, .5), this._deviceBotSprite.position = new PIXI.Point(0, 300), this._mapContainer.addChildAt(this._deviceBotSprite, 0), this._deviceScreenBottomSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box_display")), this._deviceScreenBottomSprite.anchor = new PIXI.Point(.5, .5), this._deviceBotSprite.addChild(this._deviceScreenBottomSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenBottomSprite);
                    this._deviceScreenBottomSprite.filters = [filter], this._overlay = new PIXI.Sprite(this._assetManager.getTexture("device/ui_device_radar")), this._overlay.anchor.set(.5), this._mapContainer.addChild(this._overlay), this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(-30, -300), this._overlay.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter];
                    var text = Common.copy.MAP[Common.COUNTRY_CODE];
                    webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.position.set(-25, -306), this._overlay.addChild(this._title), this._deviceCloseSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_close")), this._deviceCloseSprite.anchor = new PIXI.Point(.5, .5), this._deviceCloseSprite.position = new PIXI.Point(0, -19), this._overlay.addChild(this._deviceCloseSprite), this.legendContainer = new PIXI.Container, this.legendContainer.position.set(-280, 310), this._overlay.addChild(this.legendContainer);
                    for (var legend = [{
                        sprite: "ui_icon_player_legend",
                        text: Common.copy.MAP_LEGEND_PLAYER[Common.COUNTRY_CODE],
                        color: this._settings.radarPlayerColor
                    }, {
                        sprite: "ui_icon_enemy_legend",
                        text: Common.copy.MAP_LEGEND_ENEMY[Common.COUNTRY_CODE],
                        color: this._settings.radarEnemyColor
                    }, {
                        sprite: "ui_icon_goal_legend",
                        text: Common.copy.MAP_LEGEND_GOAL[Common.COUNTRY_CODE],
                        color: this._settings.radarTargetColor
                    }, {
                        sprite: "ui_icon_health_legend",
                        text: Common.copy.MAP_LEGEND_HEALTH[Common.COUNTRY_CODE],
                        color: this._settings.radarMedkitColor
                    }], i = 0; i < legend.length; i++) {
                        var icon = new PIXI.Sprite(p3.AssetManager.instance.getTexture(legend[i].sprite));
                        if (icon.anchor.set(.5), icon.x = 140 * i, icon.tint = legend[i].color, this.legendContainer.addChild(icon), webfont) var name = new PIXI.Text(legend[i].text, {
                            fontFamily: "Arial",
                            fontSize: 22,
                            fill: 16777215,
                            align: "left"
                        });
                        else var name = new PIXI.extras.BitmapText(legend[i].text, {
                            font: "22px Great Escape",
                            tint: 16777215,
                            align: "left"
                        });
                        name.anchor.set(0, .5), name.position.set(icon.x + 20, icon.y), this.legendContainer.addChild(name)
                    }
                    new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_red_medium_out"), p3.AssetManager.instance.getTexture("ui_button_red_medium_over"), p3.AssetManager.instance.getTexture("ui_button_red_medium_down"), p3.AssetManager.instance.getTexture("ui_icon_negative"));
                    this._btnContainer = new PIXI.Container, this._btnContainer.scale.set(.75), this._btnContainer.x = this._deviceCloseSprite.x + 368, this._btnContainer.y = this._deviceCloseSprite.y - 222, this._mapContainer.addChild(this._btnContainer);
                    var btnCloseStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_red_medium_out"), p3.AssetManager.instance.getTexture("ui_button_red_medium_over"), p3.AssetManager.instance.getTexture("ui_button_red_medium_down"), p3.AssetManager.instance.getTexture("ui_icon_negative"));
                    this._closeButton = new SWButton(btnCloseStates), this._closeButton.downSoundName = "sfx_ui_btn_press_01", this._closeButton.signals.down.addOnce(this.onCloseBtn_click, this), this._btnContainer.addChild(this._closeButton), this.animateIn(), Common.audio.playSound("sfx_radar_launch_00"), this._loop = Common.audio.playSound("sfx_radar_display_hum_01", {
                        loop: !0
                    }), this._loop.howl.fade(0, 1, 100, this._loop.id)
                }, GameMap.prototype.update = function() {
                    this._radarAngle += this._settings.radarSpeed * PIXI.DEG_TO_RAD * p3.Timestep.deltaTime, this._map._staticObjects.filters[0].uniforms.radarAngle = this._radarAngle, this._map._unitObjects.filters[0].uniforms.radarAngle = this._radarAngle;
                    for (var targets = this._world.missionManager.getTargetPositions(), i = 0; i < targets.length; i++)
                        if (this._map._targets.children[i]) {
                            var wideness = Math.PI,
                                deltaAngle = Math.PI / 16,
                                center = this._settings.mapCenter,
                                pAngle = Math.atan2(center.x - targets[i].x, targets[i].y - center.y),
                                angleDiff = Math.fmod(this._map._staticObjects.filters[0].uniforms.radarAngle + deltaAngle - pAngle, 2 * Math.PI),
                                value = 1 - angleDiff * (1 / wideness);
                            this._map._targets.children[i].position.set(targets[i].x * this._settings.mapScale, targets[i].y * this._settings.mapScale), this._map._targets.children[i].scale.set(3 * value), this._map._targets.children[i].alpha = value
                        }
                    for (var i = targets.length; i < this._map._targets.children.length; i++) this._map._targets.children[i].alpha = 0;
                    var party = this._world.party.getLeader().position,
                        wideness = Math.PI,
                        deltaAngle = Math.PI / 16,
                        center = this._settings.mapCenter,
                        pAngle = Math.atan2(center.x - party.x, party.y - center.y),
                        angleDiff = Math.fmod(this._map._staticObjects.filters[0].uniforms.radarAngle + deltaAngle - pAngle, 2 * Math.PI),
                        value = 1 - angleDiff * (1 / wideness);
                    this._map._playerTarget.position.set(party.x * this._settings.mapScale, party.y * this._settings.mapScale), this._map._playerTarget.scale.set(2 * value), this._map._playerTarget.alpha = value, this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenBottomSprite.filters[0].time -= 5 * p3.Timestep.deltaTime
                }, GameMap.prototype.resize = function() {
                    this._leftUIBar.x = Utils.getFirstButtonPositionLeft()
                }, GameMap.prototype.animateIn = function(callback, scope) {
                    this._bg.alpha = 0, this._mapContainer.alpha = 0, this._mapContainer.y -= 120;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._bg, .3, {
                        alpha: .85,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._mapContainer, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._mapContainer, .3, {
                        y: .5 * Common.STAGE_HEIGHT,
                        ease: Quad.easeOut
                    }, 0), Common.animator.add(tl)
                }, GameMap.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .3, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), Common.animator.add(tl)
                }, GameMap.prototype.showCursor = function(what) {
                    if (!this._cursorContainer) {
                        this._cursorContainer = new PIXI.Container, this._cursorContainer.visible = !1, this._mapContainer.addChild(this._cursorContainer), this._clickHint = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_radar_target_circle")), this._clickHint.anchor.set(.5), this._clickHint.scale.set(0), this._clickHint.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._cursorContainer.addChild(this._clickHint);
                        var tl = new TimelineMax({
                            repeat: -1,
                            onStartScope: this,
                            onStart: function() {
                                this._clickHint.scale.set(3), this._clickHint.alpha = 0
                            }
                        });
                        tl.to(this._clickHint.scale, 1, {
                            x: 0,
                            y: 0,
                            ease: Sine.easeInOut
                        }, 0), tl.to(this._clickHint, .3, {
                            alpha: 1,
                            ease: Quad.easeOut
                        }, 0), tl.to(this._clickHint, .7, {
                            alpha: 0,
                            ease: Quart.easeIn
                        }, .3), Common.animator.add(tl), this._cursor = new PIXI.Sprite(p3.AssetManager.instance.getTexture(p3.Device.isMobile ? "ui_tutorial_hand" : "ui_tutorial_cursor")), this._cursor.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._cursorContainer.addChild(this._cursor), this._cursorContainerTl = new TimelineMax, this._cursorContainerTl.to(this._cursor, 1, {
                            y: 20,
                            ease: Sine.easeInOut,
                            yoyo: !0,
                            repeat: -1
                        }, 0), Common.animator.add(this._cursorContainerTl)
                    }
                    switch (what) {
                        case "target":
                            var target = this._world.missionManager.getTargetPositions()[0],
                                targetX = (-this._settings.mapCenter.x + target.x) * this._settings.mapScale,
                                targetY = (-this._settings.mapCenter.y + target.y) * this._settings.mapScale;
                            this._clickHint.visible = !1;
                            break;
                        case "party":
                            var target = this._world.party.getAveragePosition(),
                                targetX = (-this._settings.mapCenter.x + target.x) * this._settings.mapScale,
                                targetY = (-this._settings.mapCenter.y + target.y) * this._settings.mapScale + 10;
                            this._clickHint.visible = !1;
                            break;
                        case "close":
                            var target = this._world.missionManager.getTargetPositions()[0],
                                targetX = this._closeButton.parent.x,
                                targetY = this._closeButton.parent.y;
                            this._clickHint.visible = !0
                    }
                    if (this._cursorContainer.visible) {
                        this._cursorContainerTl.pause();
                        var tl = new TimelineMax({
                            onCompleteScope: this,
                            onComplete: function() {
                                this._cursorContainerTl.resume()
                            }
                        });
                        tl.to(this._cursorContainer, 1, {
                            x: targetX,
                            y: targetY,
                            ease: Sine.easeInOut
                        }, 0), Common.animator.add(tl)
                    } else {
                        this._cursorContainer.visible = !0, this._cursorContainer.alpha = 0, this._cursorContainer.x = targetX, this._cursorContainer.y = targetY;
                        var tl = new TimelineMax;
                        tl.to(this._cursorContainer, .5, {
                            alpha: 1,
                            ease: Sine.easeInOut
                        }, 0), Common.animator.add(tl)
                    }
                }, GameMap.prototype.hideCursor = function(x, y) {
                    var tl = new TimelineMax({
                        onCompleteScope: this,
                        onComplete: function() {
                            this._cursorContainer.visible = !1
                        }
                    });
                    tl.to(this._cursorContainer, .5, {
                        alpha: 0,
                        ease: Sine.easeInOut
                    }, 0), Common.animator.add(tl)
                }, GameMap.prototype.onCloseBtn_click = function() {
                    this.animateOut(function() {
                        this.parent.removeChild(this), this._world._map = null, this._world.softResume(), this._loop.howl.fade(0, 0, 100, this._loop.id), this._map._staticObjects.destroy(!0, !0, !0), this._map._unitObjects.destroy(!0, !0, !0), this.destroy()
                    }, this)
                }, StaticObjectsFilter.prototype = Object.create(PIXI.AbstractFilter.prototype), StaticObjectsFilter.prototype.constructor = StaticObjectsFilter, UnitObjectsFilter.prototype = Object.create(PIXI.AbstractFilter.prototype), UnitObjectsFilter.prototype.constructor = UnitObjectsFilter
            }, {
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/SWButton": 92
            }
        ],
        31: [
            function(require, module, exports) {
                function GameObject(world, type) {
                    PIXI.Container.call(this), this._assetManager = p3.AssetManager.instance, this._world = world, this._type = type, this.collisionType = null, this.collisionMask = null, this.baseHeight = 0, this._sounds = [], this._soundsRange = 800, this._culling = !0
                }
                var Common = require("../Common");
                module.exports = GameObject, GameObject.prototype = Object.create(PIXI.Container.prototype), GameObject.prototype.constructor = GameObject, GameObject.prototype.init = function() {}, GameObject.prototype.update = function() {
                    if (!this._culling || this.visible) {
                        var distance = Math.sqrt(Math.pow(this._world.focusPosition.x - this.x, 2) + Math.pow(this._world.focusPosition.y - this.y, 2)),
                            volume = Math.max(0, (this._soundsRange - distance) / this._soundsRange);
                        for (var name in this._sounds) volume != this._sounds[name].volume && (this._sounds[name].volume = volume, this._sounds[name].howl.volume(volume, this._sounds[name].id));
                        this._goalPS && (this._goalPS.update(p3.Timestep.deltaTime), this._goalPSContainer.position.set(this.x, this.y))
                    }
                }, GameObject.prototype.pause = function() {
                    for (var name in this._sounds) this._sounds[name].playing = this._sounds[name].howl.playing(this._sounds[name].id), this._sounds[name].playing ? Common.audio.pauseSound(name, this._sounds[name].id) : Common.audio.stopSound(name, this._sounds[name].id)
                }, GameObject.prototype.resume = function() {
                    for (var name in this._sounds) this._sounds[name].playing && Common.audio.resumeSound(name, this._sounds[name].id)
                }, GameObject.prototype.reset = function() {
                    this.x = 0, this.y = 0
                }, GameObject.prototype.dispose = function() {}, GameObject.prototype.playSound = function(name, params) {
                    return this._sounds[name] = Common.audio.playSound(name, params), this._sounds[name].playing = !0, this._sounds[name].volume = 1, this._sounds[name]
                }, GameObject.prototype.playRandomSound = function(names, params) {
                    if (0 == names.length) return !1;
                    var sound = names[p3.Utils.randomInt(0, names.length - 1)];
                    return this.playSound(sound, params)
                }, GameObject.prototype.stopSound = function(sound) {
                    for (var name in this._sounds) sound && sound != name || Common.audio.stopSound(name, this._sounds[name].id)
                }, GameObject.prototype.drawCollision = function() {
                    switch (this._collisionGraphic && this._collisionGraphic.parent.removeChild(this._collisionGraphic), this._collisionGraphic = new PIXI.Graphics, this._collisionGraphic.lineStyle(3, 16777215), this.addChild(this._collisionGraphic), this.collisionType) {
                        case "rectangle":
                            this._collisionGraphic.drawRect(this.collisionMask.x, this.collisionMask.y, this.collisionMask.width, this.collisionMask.height);
                            break;
                        case "ellipse":
                            this._collisionGraphic.drawEllipse(this.collisionMask.x + this.collisionMask.width / 2, this.collisionMask.y + this.collisionMask.height / 2, this.collisionMask.width / 2, this.collisionMask.height / 2);
                            break;
                        case "polygon":
                            this._collisionGraphic.drawShape(this.collisionMask)
                    }
                }, GameObject.prototype.getSATShape = function() {
                    if (this.SATShape) return this.SATShape;
                    if (!this.collisionType) return !1;
                    switch (this.collisionType) {
                        case "rectangle":
                            var box = new SAT.Box(new SAT.Vector(this.x + this.collisionMask.x, this.y + this.collisionMask.y), this.collisionMask.width, this.collisionMask.height);
                            this.SATShape = box.toPolygon();
                            break;
                        case "ellipse":
                            for (var origin = new SAT.Vector(this.x, this.y), points = [], angle = 0; angle < 360; angle += 22.5) points.push(new SAT.Vector(this.collisionMask.x + this.collisionMask.width / 2 + Math.cos(angle * PIXI.DEG_TO_RAD) * this.collisionMask.width / 2, this.collisionMask.y + this.collisionMask.height / 2 + Math.sin(angle * PIXI.DEG_TO_RAD) * this.collisionMask.height / 2));
                            this.SATShape = new SAT.Polygon(origin, points);
                            break;
                        case "polygon":
                            for (var origin = new SAT.Vector(this.x, this.y), points = [], i = this.collisionMask.points.length - 2; i >= 0; i -= 2) points.push(new SAT.Vector(this.collisionMask.points[i], this.collisionMask.points[i + 1]));
                            this.SATShape = new SAT.Polygon(origin, points)
                    }
                    return this.SATShape
                }, GameObject.prototype.getSATShapeBoundingBox = function() {
                    var shape = this.getSATShape();
                    if (!shape) return !1;
                    for (var xMin, xMax, yMin, yMax, i = 0; i < shape.points.length; i++) 0 == i ? (xMin = shape.points[i].x + shape.pos.x, xMax = shape.points[i].x + shape.pos.x, yMin = shape.points[i].y + shape.pos.y, yMax = shape.points[i].y + shape.pos.y) : (xMin = Math.min(shape.points[i].x + shape.pos.x, xMin), xMax = Math.max(shape.points[i].x + shape.pos.x, xMax), yMin = Math.min(shape.points[i].y + shape.pos.y, yMin), yMax = Math.max(shape.points[i].y + shape.pos.y, yMax));
                    var output = new PIXI.Rectangle(xMin, yMin, xMax - xMin, yMax - yMin);
                    return output
                }, GameObject.prototype.collision = function(obj) {
                    return SAT.testPolygonPolygon(this.getSATShape(), obj.getSATShape())
                }, GameObject.prototype.isInRange = function(obj, range) {
                    if (obj.constructor === Array) {
                        for (var i = 0; i < obj.length; i++)
                            if (this.isInRange(obj[i], range)) return !0;
                        return !1
                    }
                    return Math.sqrt(Math.pow(this.x - obj.x, 2) + Math.pow(this.y - obj.y, 2)) <= range
                }, GameObject.prototype.removeFromScene = function() {
                    this.stopSound()
                }, GameObject.prototype.showGoalHighlight = function() {
                    this._goalPS || (this._goalPSContainer = new PIXI.Container, this._world.layers.logic.addChild(this._goalPSContainer), this._goalPSContainer.position.set(this.x, this.y), this._goalPSContainer.scale.y = .8, this._goalPS = new PIXI.particles.Emitter(this._goalPSContainer, [this._assetManager.getTexture("particle_blue_gradient_out_00")], this._assetManager.getJSON("particle_emitter_waypoint_attract_00"))), this._goalPS.emit = !0
                }, GameObject.prototype.hideGoalHighlight = function() {
                    if (this._goalPS) {
                        var tl = new TimelineMax({
                            onCompleteScope: this,
                            onComplete: function() {
                                this._goalPSContainer.parent.removeChild(this._goalPSContainer)
                            }
                        });
                        tl.to(this._goalPSContainer, .5, {
                            alpha: 0,
                            ease: Linear.easeNone
                        }, 0), Common.animator.add(tl)
                    }
                }, GameObject.prototype.culling = function(visible) {
                    this._culling && this.visible != visible && (this.visible = visible, this.visible ? this._cullingParent.addChild(this) : (this._cullingParent = this.parent, this._cullingParent.removeChild(this)), this._goalPS && (this._goalPS.emit = this.visible), visible ? this.resume() : this.pause())
                }, Object.defineProperty(GameObject.prototype, "type", {
                    get: function() {
                        return this._type
                    }
                })
            }, {
                "../Common": 5
            }
        ],
        32: [
            function(require, module, exports) {
                function GameUI(world, settings) {
                    this._assetManager = p3.AssetManager.instance, PIXI.Container.call(this), this._world = world, this._characterContainers = [], this._compassAngle = -Math.PI / 2, this._compassAngleTarget = this._compassAngle, this._compassAngleSpeed = .05, this._compassDelta = 0, this._desaturateFilter = new PIXI.filters.ColorMatrixFilter, this._desaturateFilter.desaturate(), this._settings = {
                        autoPauseMission: !1,
                        autoMapMission: !1
                    }, $.extend(this._settings, settings)
                }
                var Common = require("../Common"),
                    Utils = require("../Utils"),
                    SWButton = require("../ui/SWButton"),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                require("../lib/AbilityChargeFilter"), require("../lib/AbilityDechargeFilter");
                module.exports = GameUI, GameUI.prototype = Object.create(PIXI.Container.prototype), GameUI.prototype.constructor = GameUI, GameUI.prototype.init = function() {
                    this._leftUIBar = new PIXI.Container, this.addChild(this._leftUIBar), this._scoreContainer = new PIXI.Container, this._scoreContainer.y = 65, this._scoreContainer.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._leftUIBar.addChild(this._scoreContainer);
                    var bg = new PIXI.Sprite(this._assetManager.getTexture("ui_score_bg"));
                    bg.anchor.set(0, .5), this._scoreContainer.addChild(bg), this._scoreContainer.icon = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_score")), this._scoreContainer.icon.anchor.set(0, .5), this._scoreContainer.addChild(this._scoreContainer.icon), this._score = new PIXI.Text("0", {
                        fontFamily: "Arial",
                        fontSize: 30,
                        fill: 16777215,
                        align: "left",
                        stroke: 0,
                        strokeThickness: 4
                    }), this._score = new PIXI.extras.BitmapText("0", {
                        font: "30px Great Escape Stroke",
                        tint: 16777215,
                        align: "left"
                    }), this._score.anchor.set(0, .5), this._score.x = 60, this._score.y = 3, this._score.value = 0, this._score.valueTarget = 0, this._scoreContainer.addChild(this._score), this._missionChevron = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_icon_mission_2")), this._missionChevron.anchor.set(.5), this._missionChevron.visible = !1, this._missionChevron.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this.addChild(this._missionChevron), this._topBarContainer = new PIXI.Container, this._topBarContainer.position.set(Common.STAGE_WIDTH / 2, 0), this._topBarContainer.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._topBarContainer._canChangeText = !1, this.addChild(this._topBarContainer);
                    var bg = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box"));
                    if (bg.scale.set(.75, .6), bg.anchor.set(.5, 0), this._topBarContainer.addChild(bg), !p3.Device.isMobile) {
                        this._topBarScreen = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box_display")), this._topBarScreen.anchor = new PIXI.Point(.5, 0), bg.addChild(this._topBarScreen);
                        var filter = new ScanlinesFilter(this._topBarScreen);
                        this._topBarScreen.filters = [filter]
                    }
                    webfont ? this._topBarContainer.message = new PIXI.Text("", {
                        fontFamily: "Arial",
                        fontSize: 26,
                        fill: 16777215,
                        align: "center"
                    }) : this._topBarContainer.message = new PIXI.extras.BitmapText("", {
                        font: "26px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._topBarContainer.message.text = "", this._topBarContainer.message.anchor.set(.5), this._topBarContainer.message.x = 0, this._topBarContainer.message.y = bg.height / 2 - 6, this._topBarContainer.addChild(this._topBarContainer.message), this._topBarContainer.icon = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_icon_goal_legend")), this._topBarContainer.icon.anchor.set(.5), this._topBarContainer.icon.scale.set(.6), this._topBarContainer.icon.x = 0, this._topBarContainer.icon.y = this._topBarContainer.message.y - 2, this._topBarContainer.addChild(this._topBarContainer.icon), this._topBarContainer.y -= this._topBarContainer.height, this._missionCountContainer = new PIXI.Container, this._missionCountContainer.y = 120, this._missionCountContainer.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._leftUIBar.addChild(this._missionCountContainer);
                    var bg = new PIXI.Sprite(this._assetManager.getTexture("ui_score_bg"));
                    bg.anchor.set(0, .5), this._missionCountContainer.addChild(bg), this._missionCountContainer.icon = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_mission_small")), this._missionCountContainer.icon.anchor.set(.5, .5), this._missionCountContainer.icon.x += this._missionCountContainer.icon.width / 2, this._missionCountContainer.addChild(this._missionCountContainer.icon), this._missionCount = new PIXI.Text("00", {
                        fontFamily: "Arial",
                        fontSize: 30,
                        fill: 16777215,
                        align: "left",
                        stroke: 0,
                        strokeThickness: 4
                    }), this._missionCount = new PIXI.extras.BitmapText("00", {
                        font: "30px Great Escape Stroke",
                        tint: 16777215,
                        align: "left"
                    }), this._missionCount.anchor.set(0, .5), this._missionCount.x = 60, this._missionCount.y = 3, this._missionCount.value = 0, this._missionCountContainer.addChild(this._missionCount);
                    for (var i = 0; i < this._world.party._characters.length; i++) {
                        this._characterContainers[i] = new PIXI.Container, this._characterContainers[i].unit = this._world.party._characters[i], this._characterContainers[i].y = 200 + 148 * i, this._leftUIBar.addChild(this._characterContainers[i]);
                        var portraitContainer = new PIXI.Container;
                        portraitContainer.position.set(78, 50), this._characterContainers[i].addChild(portraitContainer);
                        var portraitBg = new PIXI.Sprite(this._assetManager.getTexture(this._characterContainers[i].unit.getPortrait() + "_off"));
                        portraitBg.anchor.set(.5), portraitContainer.addChild(portraitBg), this._characterContainers[i].abilityFill = new PIXI.Sprite(this._assetManager.getTexture(this._characterContainers[i].unit.getPortrait() + "_on")), this._characterContainers[i].abilityFill.anchor.set(.5), portraitContainer.addChild(this._characterContainers[i].abilityFill), this._characterContainers[i].abilityFill.chargingMask = new PIXI.Graphics, this._characterContainers[i].abilityFill.chargingMask.beginFill(16777215), this._characterContainers[i].abilityFill.chargingMask.drawRect(0, 0, 76, 76), this._characterContainers[i].abilityFill.chargingMask.endFill(), this._characterContainers[i].abilityFill.chargingMask.x = -35, this._characterContainers[i].abilityFill.chargingMask.y = -47, portraitContainer.addChild(this._characterContainers[i].abilityFill.chargingMask), this._characterContainers[i].abilityFill.timerMask = new PIXI.Graphics, this._characterContainers[i].abilityFill.timerMask.x = -60, this._characterContainers[i].abilityFill.timerMask.y = -60, portraitContainer.addChild(this._characterContainers[i].abilityFill.timerMask), this._characterContainers[i].abilityFill.mask = this._characterContainers[i].abilityFill.timerMask, this._characterContainers[i].abilityFill.flash = new PIXI.Graphics, this._characterContainers[i].abilityFill.flash.beginFill(16777215, .7), this._characterContainers[i].abilityFill.flash.arc(0, 0, 40, 0, 2 * Math.PI), this._characterContainers[i].abilityFill.flash.endFill(), this._characterContainers[i].abilityFill.flash.alpha = 0, this._characterContainers[i].abilityFill.flash.blendMode = PIXI.BLEND_MODES.ADD, this._characterContainers[i].abilityFill.flash.position.set(0, -10), portraitContainer.addChild(this._characterContainers[i].abilityFill.flash), this._characterContainers[i].hpBarContainer = new PIXI.Container, this._characterContainers[i].hpBarContainer.x = -74, this._characterContainers[i].hpBarContainer.y = -69, portraitContainer.addChild(this._characterContainers[i].hpBarContainer), this._characterContainers[i].hpBg = new PIXI.Sprite(this._assetManager.getTexture("ui_ingame_health_bar_bg")), this._characterContainers[i].hpBarContainer.addChild(this._characterContainers[i].hpBg), this._characterContainers[i].hpBar = new PIXI.Sprite(this._assetManager.getTexture("ui_ingame_health_bar")), this._characterContainers[i].hpBarContainer.addChild(this._characterContainers[i].hpBar), this._characterContainers[i].hpBarMask = new PIXI.Graphics, this._characterContainers[i].hpBarMask.beginFill(16777215, .5), this._characterContainers[i].hpBarMask.drawRect(0, 0, 20, -68), this._characterContainers[i].hpBarMask.endFill(), this._characterContainers[i].hpBarMask.x = 17, this._characterContainers[i].hpBarMask.y = 88, this._characterContainers[i].hpBar.mask = this._characterContainers[i].hpBarMask, this._characterContainers[i].hpBarContainer.addChild(this._characterContainers[i].hpBarMask);
                        var abiliyIconBg = new PIXI.Sprite(this._assetManager.getTexture("ui_ingame_btn_ability_off"));
                        abiliyIconBg.anchor.set(.5), portraitContainer.addChild(abiliyIconBg);
                        var abiliyIcon = new PIXI.Sprite(this._assetManager.getTexture(this._characterContainers[i].unit.getAbilityIcon()));
                        abiliyIcon.anchor.set(.5), abiliyIcon.scale.set(.75), abiliyIcon.position.set(40, 35), portraitContainer.addChild(abiliyIcon);
                        var abilityBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_ingame_btn_char_out"), p3.AssetManager.instance.getTexture("ui_ingame_btn_char_over"), p3.AssetManager.instance.getTexture("ui_ingame_btn_char_down"));
                        this._characterContainers[i].abilityButton = new p3.Button(abilityBtnStates), this._characterContainers[i].abilityButton.overSoundName = "sfx_ui_btn_rollover_00", this._characterContainers[i].abilityButton.downSoundName = "sfx_ui_btn_press_00", this._characterContainers[i].abilityButton.signals.down.add(this.onAbilityBtn_click, this), portraitContainer.addChild(this._characterContainers[i].abilityButton)
                    }
                    var compassBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_btn_compas_out"), p3.AssetManager.instance.getTexture("ui_btn_compas_over"), p3.AssetManager.instance.getTexture("ui_btn_compas_down"));
                    this._compassContainer = new SWButton(compassBtnStates), this._compassContainer.overSoundName = "sfx_ui_btn_rollover_00", this._compassContainer.downSoundName = "sfx_ui_btn_press_00", this._compassContainer.y = Common.STAGE_HEIGHT - 130, this._compassContainer.signals.down.add(this.onMapBtn_click, this), this.addChild(this._compassContainer), this._compassContainer.scale.set(0);
                    var tl = new TimelineMax;
                    tl.to(this._compassContainer.scale, 1, {
                        x: 1,
                        y: 1,
                        ease: Back.easeOut
                    }, 2.5), Common.animator.add(tl), this._compassContainer._arrow = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_compas_arrow")), this._compassContainer._arrow.anchor.set(.5, .6), this._compassContainer._arrow.y -= 10, this._compassContainer.addChild(this._compassContainer._arrow);
                    var tl = new TimelineMax;
                    if (tl.to(this._compassContainer._arrow.scale, 1, {
                        x: .9,
                        y: .9,
                        ease: Sine.easeInOut,
                        repeat: -1,
                        yoyo: !0
                    }, 0), tl.to(this._compassContainer._arrow, 1, {
                        alpha: .9,
                        ease: Sine.easeInOut,
                        repeat: -1,
                        yoyo: !0
                    }, 0), Common.animator.add(tl), this._compassContainer._text = new PIXI.extras.BitmapText("-", {
                        font: "16px Great Escape",
                        tint: 65535,
                        align: "center"
                    }), this._compassContainer._text.anchor.set(.5), this._compassContainer._text.y = 46, this._compassContainer.addChild(this._compassContainer._text), this._missionContainer = new PIXI.Container, this._missionContainer.x = .5 * Common.STAGE_WIDTH + (p3.Device.isMobile ? -30 : 0), this._missionContainer.y = Common.STAGE_HEIGHT - 140, this._missionContainer.alpha = 0, this._missionContainer.visible = !1, this.addChild(this._missionContainer), this._missionContainer._bg = new PIXI.Sprite(this._assetManager.getTexture("device/ui_mission_panel")), this._missionContainer._bg.anchor.set(.5), this._missionContainer._bg.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._missionContainer.addChild(this._missionContainer._bg), !p3.Device.isMobile) {
                        this._missionScreen = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_mission_panel_display")), this._missionScreen.anchor = new PIXI.Point(.5, .5), this._missionContainer._bg.addChild(this._missionScreen);
                        var filter = new ScanlinesFilter(this._missionScreen);
                        this._missionScreen.filters = [filter]
                    }
                    if (this._missionContainer._icon = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_mission")), this._missionContainer._icon.x = -240, this._missionContainer._icon.anchor.set(.5), this._missionContainer._icon.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._missionContainer.addChild(this._missionContainer._icon), webfont ? (this._missionContainer._title = new PIXI.Text("New Mission", {
                        fontFamily: "Arial",
                        fontSize: 28,
                        fill: 65535,
                        align: r2l ? "right" : "left"
                    }), this._missionContainer._title.anchor.set(r2l ? 1 : 0, .5), this._missionContainer._title.x = r2l ? 280 : -170, this._missionContainer._title.y = -20, this._missionContainer._bg.addChild(this._missionContainer._title)) : (this._missionContainer._title = new PIXI.extras.BitmapText("Mission description", {
                        font: "28px Great Escape",
                        tint: 65535,
                        align: "left"
                    }), this._missionContainer._title.anchor.set(0, .5), this._missionContainer._title.x = -170, this._missionContainer._title.y = -20, this._missionContainer._bg.addChild(this._missionContainer._title)), this._missionContainer._title.filterArea = new PIXI.Rectangle(0, 0, 0, 0), webfont ? (this._missionContainer._desc = new PIXI.Text("Mission description", {
                        fontFamily: "Arial",
                        fontSize: 24,
                        fill: 16777215,
                        align: r2l ? "right" : "left"
                    }), this._missionContainer._desc.anchor.set(r2l ? 1 : 0, .5), this._missionContainer._desc.x = r2l ? 280 : -170, this._missionContainer._desc.y = 18, this._missionContainer._bg.addChild(this._missionContainer._desc)) : (this._missionContainer._desc = new PIXI.extras.BitmapText("Mission description", {
                        font: "24px Great Escape",
                        tint: 16777215,
                        align: "left"
                    }), this._missionContainer._desc.anchor.set(0, .5), this._missionContainer._desc.x = -170, this._missionContainer._desc.y = 18, this._missionContainer._bg.addChild(this._missionContainer._desc)), this._missionContainer._desc.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._settings.autoPauseMission) {
                        var continueBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_play"));
                        this._missionContainer._button = new SWButton(continueBtnStates), this._missionContainer.overSoundName = "sfx_ui_btn_rollover_00", this._missionContainer.downSoundName = "sfx_ui_btn_press_00", this._missionContainer._button.children[1].scale.set(.7), this._missionContainer._button.x = 250, this._missionContainer._button.signals.down.add(this.onMissionBtn_click, this), this._missionContainer.addChild(this._missionContainer._button)
                    }
                }, GameUI.prototype.update = function() {
                    this.setScore(this._world._score);
                    for (var i = 0; i < this._characterContainers.length; i++) {
                        if (this._characterContainers[i].visible && this._characterContainers[i].unit.isDead) {
                            this._characterContainers[i].visible = !1;
                            for (var o = i + 1; o < this._characterContainers.length; o++) this._characterContainers[o].y -= 148
                        }
                        var targetScale = this._characterContainers[i].unit._health / this._characterContainers[i].unit._healthMax,
                            currentScale = this._characterContainers[i].hpBarMask.scale.y;
                        if (targetScale > currentScale ? currentScale = targetScale : targetScale < currentScale && (currentScale -= 1 * p3.Timestep.deltaTime, currentScale = Math.max(currentScale, targetScale)), this._characterContainers[i].hpBarMask.scale.y = currentScale, this._characterContainers[i].unit.isAbilityOn ? (this._characterContainers[i].abilityFill.timerMask.clear(), this._characterContainers[i].abilityFill.timerMask.beginFill(), this._characterContainers[i].abilityFill.timerMask.moveTo(63, 50), this._characterContainers[i].abilityFill.timerMask.arc(60, 60, 60, -Math.PI / 2, 2 * Math.PI * (1 - this._characterContainers[i].unit.getAbilityCooldownStatus()) - Math.PI / 2),
                            this._characterContainers[i].abilityFill.timerMask.endFill(), this._characterContainers[i].abilityFill.mask = this._characterContainers[i].abilityFill.timerMask, this._characterContainers[i].abilityFill.chargingMask.visible = !1, this._characterContainers[i].abilityFill.timerMask.visible = !0, this._characterContainers[i].unit.getAbilityCooldownStatus() < 1 && (this._characterContainers[i].abilityButton.filters = [this._desaturateFilter])) : this._characterContainers[i].unit.getAbilityCooldownStatus() < 1 ? (this._characterContainers[i].abilityFill.chargingMask.scale.y = 1 - this._characterContainers[i].unit.getAbilityCooldownStatus(), this._characterContainers[i].abilityFill.mask = this._characterContainers[i].abilityFill.chargingMask, this._characterContainers[i].abilityFill.chargingMask.visible = !0, this._characterContainers[i].abilityFill.timerMask.visible = !1, this._characterContainers[i].abilityButton.filters = [this._desaturateFilter]) : (this._characterContainers[i].abilityFill.chargingMask.visible = !1, this._characterContainers[i].abilityFill.timerMask.visible = !1, this._characterContainers[i].abilityFill.mask = null, this._characterContainers[i].abilityButton.filters = null), this._characterContainers[i].unit.isAbilityNowAvailable) {
                            var tl = new TimelineMax;
                            tl.to(this._characterContainers[i].abilityFill.flash, .2, {
                                alpha: .5,
                                ease: Quad.easeOut
                            }, 0), tl.to(this._characterContainers[i].abilityFill.flash, .35, {
                                alpha: 0,
                                ease: Sine.easeOut
                            }), Common.animator.add(tl)
                        }
                    }
                    if (this._world.party.isAlive) {
                        var targetPosition = this._world.missionManager.getNearestTargetPosition();
                        if (null != targetPosition) {
                            var partyPosition = this._world.party.getAveragePosition();
                            this._compassAngleTarget = Math.atan2(targetPosition.y - partyPosition.y, targetPosition.x - partyPosition.x);
                            var angleDiff = Math.atan2(Math.sin(this._compassAngleTarget - this._compassAngle), Math.cos(this._compassAngleTarget - this._compassAngle));
                            this._compassAngle += angleDiff * this._compassAngleSpeed, this._compassContainer._arrow.rotation = this._compassAngle + Math.PI / 2 + this._compassDelta;
                            var distance = this._world.missionManager.getNearestTargetDistance();
                            distance = Math.ceil(distance / this._world.mapTileSize), this._compassContainer._text.text = distance + "m", this._compassContainer._time = 0
                        } else if (this._compassContainer._time += p3.Timestep.deltaTime, this._compassContainer._time > 1) {
                            this._compassAngleTarget = -Math.PI / 2;
                            var angleDiff = Math.atan2(Math.sin(this._compassAngleTarget - this._compassAngle), Math.cos(this._compassAngleTarget - this._compassAngle));
                            this._compassAngle += angleDiff * this._compassAngleSpeed, this._compassContainer._arrow.rotation = this._compassAngle + Math.PI / 2 + this._compassDelta, this._compassContainer._text.text = "-"
                        }
                    }
                    p3.Device.isMobile || (this._missionScreen.filters[0].time -= 5 * p3.Timestep.deltaTime, this._topBarScreen.filters[0].time -= 5 * p3.Timestep.deltaTime)
                }, GameUI.prototype.resize = function() {
                    this._leftUIBar.x = Utils.getFirstButtonPositionLeft() - 35, this._compassContainer.x = Utils.getFirstButtonPositionRight() - 40
                }, GameUI.prototype.setScore = function(scoreTarget) {
                    this._score.valueTarget != scoreTarget && (this._score.valueTarget = scoreTarget, this._scoreTimeline && this._scoreTimeline.kill(), this._scoreTimeline = new TimelineMax({
                        onUpdateScope: this,
                        onUpdate: function() {
                            this._score.text = Math.round(this._score.value).toLocaleString("en-US")
                        }
                    }), this._scoreTimeline.to(this._score, 1, {
                        value: this._score.valueTarget,
                        ease: Sine.easeOut
                    }, 0))
                }, GameUI.prototype.missionComplete = function() {
                    var tl = new TimelineMax({
                        delay: .5,
                        onCompleteScope: this,
                        onComplete: function() {
                            this._compassDelta = 0
                        }
                    });
                    tl.to(this, 1, {
                        _compassDelta: 6 * Math.PI,
                        ease: Sine.easeInOut
                    }, 0), Common.animator.add(tl);
                    var messages = Common.copy.MISSION_SUCCESS[Common.COUNTRY_CODE];
                    this.setTopBarText(messages[p3.Utils.randomInt(0, messages.length - 1)]), this.hideTopBar(2);
                    var tl = new TimelineMax({
                        delay: .4,
                        onStartScope: this,
                        onStart: function() {
                            this._missionChevron.position.set(Common.STAGE_WIDTH / 2, Common.STAGE_HEIGHT / 2), this._missionChevron.scale.set(1), this._missionChevron.visible = !0, this._missionChevron.alpha = 1
                        }
                    });
                    tl.to(this._missionChevron.scale, .5, {
                        x: 3,
                        y: 3,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._missionChevron.scale, 1, {
                        x: .3,
                        y: .3,
                        ease: Sine.easeInOut
                    }), tl.to(this._missionChevron, 1, {
                        x: this._leftUIBar.x + this._missionCountContainer.icon.x,
                        y: this._missionCountContainer.y,
                        ease: Sine.easeInOut
                    }, .4), tl.to(this._missionChevron, .2, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 1.2), tl.to(this._missionCountContainer.icon.scale, .15, {
                        x: 1.4,
                        y: 1.4,
                        ease: Sine.easeOut,
                        onStartScope: this,
                        onStart: function() {
                            this._missionCount.value++, this._missionCount.text = this._missionCount.value, 1 == this._missionCount.text.length && (this._missionCount.text = "0" + this._missionCount.text)
                        }
                    }, 1.2), tl.to(this._missionCountContainer.icon.scale, .4, {
                        x: 1,
                        y: 1,
                        ease: Sine.easeOut
                    }), Common.animator.add(tl), Common.audio.playSound("music_mission_complete_accent_03")
                }, GameUI.prototype.missionFailed = function(title, desc) {
                    this.showMission(title, desc), this.hideTopBar()
                }, GameUI.prototype.showMission = function(title, desc, icon) {
                    title && (this._missionContainer._title.text = title), desc && (this._missionContainer._desc.text = desc), icon && (this._missionContainer._icon.texture = this._assetManager.getTexture(icon));
                    var tl = new TimelineMax({
                        onCompleteScope: this,
                        onComplete: function() {
                            this._missionContainer.visible = !1, this._missionContainer.y = Common.STAGE_HEIGHT - 140
                        }
                    });
                    tl.to(this._missionContainer, .5, {
                        alpha: 1,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._missionContainer, .5, {
                        y: this._missionContainer.y,
                        ease: Sine.easeOut
                    }, 0), this._settings.autoPauseMission ? (tl.to(this._missionContainer, 0, {
                        onStartScope: this,
                        onStart: function() {
                            this._world.pause();
                            new TimelineMax({
                                delay: 10,
                                onStartScope: this,
                                onStart: function() {
                                    this._world.resume()
                                }
                            })
                        }
                    }, .9), tl.to(this._missionContainer, .3, {
                        alpha: 0,
                        y: this._missionContainer.y + 50,
                        ease: Sine.easeOut,
                        onCompleteScope: this,
                        onComplete: function() {
                            this._settings.autoMapMission && (this._world.showMap(), this._settings.autoMapMission = !1)
                        }
                    }, 1)) : tl.to(this._missionContainer, .3, {
                        alpha: 0,
                        y: this._missionContainer.y + 50,
                        ease: Sine.easeOut
                    }, 3.5), Common.animator.add(tl), this._missionContainer.visible = !0, this._missionContainer.y = this._missionContainer.y + 100, Common.audio.playSound("sfx_r4_newmission_00")
                }, GameUI.prototype.showTopBar = function(delay) {
                    new TimelineMax({
                        delay: delay || .01,
                        onStartScope: this,
                        onStart: function() {
                            this._topBarContainer.tl && this._topBarContainer.tl.kill(), this._topBarContainer._canChangeText = !0, this._topBarContainer.tl = new TimelineMax, this._topBarContainer.tl.to(this._topBarContainer, .5, {
                                y: 0,
                                ease: Sine.easeOut
                            }, 0), Common.animator.add(this._topBarContainer.tl)
                        }
                    })
                }, GameUI.prototype.hideTopBar = function(delay) {
                    this._topBarContainer._canChangeText = !1;
                    new TimelineMax({
                        delay: delay || .01,
                        onStartScope: this,
                        onStart: function() {
                            this._topBarContainer.tl && this._topBarContainer.tl.kill(), this._topBarContainer.tl = new TimelineMax, this._topBarContainer.tl.to(this._topBarContainer, .5, {
                                y: -this._topBarContainer.height,
                                ease: Sine.easeOut
                            }, 0), Common.animator.add(this._topBarContainer.tl)
                        }
                    })
                }, GameUI.prototype.setTopBarText = function(text, icon) {
                    this._topBarContainer._canChangeText && text != this._topBarContainer.message.text && (icon && (this._topBarContainer.icon.texture = p3.AssetManager.instance.getTexture(icon)), this._topBarContainer.message.text = text, this._topBarContainer.message.x = this._topBarContainer.icon.width / 2 + 8, this._topBarContainer.icon.x = this._topBarContainer.message.x - this._topBarContainer.message.width / 2 - this._topBarContainer.icon.width / 2 - 16)
                }, GameUI.prototype.showCursor = function(what) {
                    if (!this._cursorContainer) {
                        this._cursorContainer = new PIXI.Container, this._cursorContainer.visible = !1, this.addChild(this._cursorContainer), this._clickHint = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_radar_target_circle")), this._clickHint.anchor.set(.5), this._clickHint.scale.set(0), this._clickHint.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._cursorContainer.addChild(this._clickHint);
                        var tl = new TimelineMax({
                            repeat: -1,
                            onStartScope: this,
                            onStart: function() {
                                this._clickHint.scale.set(3), this._clickHint.alpha = 0
                            }
                        });
                        tl.to(this._clickHint.scale, 1, {
                            x: 0,
                            y: 0,
                            ease: Sine.easeInOut
                        }, 0), tl.to(this._clickHint, .3, {
                            alpha: 1,
                            ease: Quad.easeOut
                        }, 0), tl.to(this._clickHint, .7, {
                            alpha: 0,
                            ease: Quart.easeIn
                        }, .3), Common.animator.add(tl), this._cursor = new PIXI.Sprite(p3.AssetManager.instance.getTexture(p3.Device.isMobile ? "ui_tutorial_hand" : "ui_tutorial_cursor")), this._cursor.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._cursorContainer.addChild(this._cursor);
                        var tl = new TimelineMax;
                        tl.to(this._cursor, 1, {
                            y: 40,
                            ease: Sine.easeInOut,
                            yoyo: !0,
                            repeat: -1
                        }, 0), Common.animator.add(tl)
                    }
                    switch (this._cursorContainer.parent.removeChild(this._cursorContainer), what) {
                        case "map":
                            this._cursorContainer.x = this._compassContainer.x, this._cursorContainer.y = this._compassContainer.y - 10, this._cursorContainer.rotation = 140 * PIXI.DEG_TO_RAD, this.addChild(this._cursorContainer);
                            break;
                        case "stealth":
                        case "medic":
                        case "stealth":
                        case "rocket":
                        case "hacker":
                        case "sniper":
                        case "airstrike":
                        case "bomber":
                        case "granade":
                        case "medic":
                            for (var found = !1, i = 0; i < this._characterContainers.length; i++)
                                if (this._characterContainers[i].unit.isAlive && this._characterContainers[i].unit.abilityType == what) {
                                    this._characterContainers[i].addChild(this._cursorContainer), this._cursorContainer.x = 80, this._cursorContainer.y = 40, this._cursorContainer.rotation = -20 * PIXI.DEG_TO_RAD, found = !0;
                                    break
                                }
                            if (!found) return;
                            break;
                        default:
                            return void console.error("showCursor %s not defined", what)
                    }
                    this._cursorContainer.visible = !0, this._cursorContainer.alpha = 0;
                    var tl = new TimelineMax;
                    tl.to(this._cursorContainer, .5, {
                        alpha: 1,
                        ease: Sine.easeInOut
                    }, 0), Common.animator.add(tl)
                }, GameUI.prototype.hideCursor = function(x, y) {
                    if (this._cursorContainer) {
                        var tl = new TimelineMax({
                            onCompleteScope: this,
                            onComplete: function() {
                                this._cursorContainer.visible = !1
                            }
                        });
                        tl.to(this._cursorContainer, .5, {
                            alpha: 0,
                            ease: Sine.easeInOut
                        }, 0), Common.animator.add(tl)
                    }
                }, GameUI.prototype.onAbilityBtn_click = function(e) {
                    this._world.paused || e.parent.parent.unit.useAbility()
                }, GameUI.prototype.onMapBtn_click = function(e) {
                    this._world.showMap()
                }, GameUI.prototype.onMissionBtn_click = function(e) {
                    this._world.resume()
                }
            }, {
                "../Common": 5,
                "../Utils": 11,
                "../lib/AbilityChargeFilter": 70,
                "../lib/AbilityDechargeFilter": 71,
                "../lib/ScanlinesFilter": 73,
                "../ui/SWButton": 92
            }
        ],
        33: [
            function(require, module, exports) {
                function GameWorld(settings) {
                    PIXI.Container.call(this), this._assetManager = p3.AssetManager.instance, this.debug = !1, this.paused = !1, this.softPaused = !1, this.settings = {
                        tutorial: !1,
                        missions: [],
                        lockSkills: !1,
                        lockSkillExceptions: [],
                        lockMovement: !1
                    }, this.settings = $.extend(this.settings, settings), this._score = 0, this.mapData = null, this.mapWidth = 0, this.mapHeight = 0, this.mapTileSize = 24, this.mapGrid = [], this.mapGridWidth = 0, this.mapGridHeight = 0, this.turnPenality = 1, this.mapGridStatus = [], this.party = null, this.startPosition = new PIXI.Point(100, 100), this.focusPoint = new PIXI.Point(.5, .5), this.focusPosition = new PIXI.Point(0, 0), this.focusPointTween = null, this.focusObject = null, this.cullingPosition = new PIXI.Point(0, 0), this.cullingRadius = 1400, this.cullingDelta = 100, this.zoom = 1, this.zoomTarget = 1, this.zoomTween = null, this.visibleArea = new PIXI.Point(Utils.getFirstButtonPositionRight() - Utils.getFirstButtonPositionLeft() + 200, p3.View.height), this._isShake = !1, this._shakeTime = 0, this._shakeTimeEnd = 1, this._shakeStrength = new PIXI.Point(10, 10), this.missionManager = null, this.layers = {
                        floor: null,
                        decals: null,
                        logic: null,
                        path: null,
                        ground: null,
                        roof: null,
                        sky: null,
                        tiles: null
                    }, this.objects = {
                        static: [],
                        units: {
                            player: [],
                            hostage: [],
                            enemy: [],
                            destructible: [],
                            flyingVehicle: [],
                            ally: []
                        },
                        spawners: {
                            hostage: [],
                            missionItem: [],
                            medkit: [],
                            barrel: [],
                            soldier: [],
                            destroyTarget: [],
                            tieFighter: [],
                            turret: [],
                            escort: [],
                            escortDestination: [],
                            cargo: [],
                            tank: [],
                            tankWaypoint: [],
                            tankDestination: []
                        },
                        tutorial: {
                            move: [],
                            soldier: [],
                            medkit: [],
                            barrel: [],
                            item: [],
                            target: []
                        },
                        items: [],
                        bullets: [],
                        effects: [],
                        sounds: []
                    }, this._gameOver = !1, this._map = null, this._time = 0, this.tuturialSkillClick = null, this.signals = {}, this.signals.skillUsed = new signals.Signal
                }
                var Common = require("../Common"),
                    Utils = require("../Utils"),
                    ObjectStatic = require("./ObjectStatic"),
                    Spawner = require("./Spawner"),
                    Party = require("./Party"),
                    UnitPlayer = require("./UnitPlayer"),
                    MissionManager = require("./MissionManager"),
                    ObjectManager = require("./ObjectManager"),
                    Weapon = require("./Weapon"),
                    BulletLaser = require("./BulletLaser"),
                    BulletLaserAirstrike = require("./BulletLaserAirstrike"),
                    BulletLaserExplosive = require("./BulletLaserExplosive"),
                    BulletRocket = require("./BulletRocket"),
                    BulletSniper = require("./BulletSniper"),
                    BulletBomb = require("./BulletBomb"),
                    BulletGranade = require("./BulletGranade"),
                    EffectExplosion = require("./EffectExplosion"),
                    EffectExplosionBig = require("./EffectExplosionBig"),
                    EffectScore = require("./EffectScore"),
                    EffectAirstrikeTarget = require("./EffectAirstrikeTarget"),
                    EffectSmoke = require("./EffectSmoke"),
                    EffectSniperHit = require("./EffectSniperHit"),
                    SoundEnvironment = require("./SoundEnvironment"),
                    GameMap = require("./GameMap"),
                    TutorialLocation = require("./TutorialLocation");
                module.exports = GameWorld, GameWorld.prototype = Object.create(PIXI.Container.prototype), GameWorld.prototype.constructor = GameWorld, GameWorld.prototype.TILE_EMPTY = 0, GameWorld.prototype.TILE_SOLID = 1, GameWorld.prototype.init = function(mapFile) {
                    for (var key in this.layers) this.layers[key] = new PIXI.Container, this.addChild(this.layers[key]);
                    var pools = [{
                        id: "bulletLaser",
                        pool: "bulletLaser",
                        base: BulletLaser,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "bulletLaserAirstrike",
                        pool: "bulletLaserAirstrike",
                        base: BulletLaserAirstrike,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "bulletLaserExplosive",
                        pool: "bulletLaserExplosive",
                        base: BulletLaserExplosive,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "bulletRocket",
                        pool: "bulletRocket",
                        base: BulletRocket,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "bulletSniper",
                        pool: "bulletSniper",
                        base: BulletSniper,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "bulletBomb",
                        pool: "bulletBomb",
                        base: BulletBomb,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "bulletGranade",
                        pool: "bulletGranade",
                        base: BulletGranade,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "effectExplosion",
                        pool: "effectExplosion",
                        base: EffectExplosion,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "effectExplosionBig",
                        pool: "effectExplosionBig",
                        base: EffectExplosionBig,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "effectScore",
                        pool: "effectScore",
                        base: EffectScore,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "effectAirstrikeTarget",
                        pool: "effectAirstrikeTarget",
                        base: EffectAirstrikeTarget,
                        args: [this],
                        quantity: 1
                    }, {
                        id: "effectSmokeForever",
                        pool: "effectSmokeForever",
                        base: EffectSmoke,
                        args: [this, "black", -1],
                        quantity: 1
                    }, {
                        id: "effectSmoke",
                        pool: "effectSmoke",
                        base: EffectSmoke,
                        args: [this, "black", 3],
                        quantity: 1
                    }, {
                        id: "effectSmokeWhiteForever",
                        pool: "effectSmokeWhiteForever",
                        base: EffectSmoke,
                        args: [this, "white", -1],
                        quantity: 1
                    }, {
                        id: "effectHitSniper",
                        pool: "effectHitSniper",
                        base: EffectSniperHit,
                        args: [this],
                        quantity: 1
                    }];
                    this.objectManager = new ObjectManager(pools), this.objectManager.init(), this.load(this._assetManager.getJSON(mapFile)), this.party = new Party(this.layers.ground), this.party.init(), this.settings.tutorial ? (this.party.addCharacter(new UnitPlayer(this), {
                        sprite: "willix",
                        ability: "airstrike",
                        health: 10,
                        speed: 180,
                        accuracy: .98,
                        weapon: new Weapon(this, Weapon.GUN, ["sfx_cassian_rifle_short_00"])
                    }), this.party.addCharacter(new UnitPlayer(this), {
                        sprite: "k2so",
                        ability: "granade",
                        health: 10,
                        speed: 150,
                        accuracy: .95,
                        weapon: new Weapon(this, Weapon.GUN, ["sfx_k2so_blaster_00"]),
                        subWeapon: new Weapon(this, Weapon.GRANADE)
                    }), this.party.addCharacter(new UnitPlayer(this), {
                        sprite: "marine_cra",
                        ability: "sniper",
                        health: 10,
                        speed: 160,
                        accuracy: .95,
                        weapon: new Weapon(this, Weapon.GUN, ["sfx_rebel_marine_blaster_00", "sfx_rebel_marine_blaster_01"]),
                        subWeapon: new Weapon(this, Weapon.CHARGED, ["sfx_sniperrifle_reverb_00", "sfx_sniperrifle_reverb_01", "sfx_sniperrifle_reverb_02", "sfx_sniperrifle_reverb_03", "sfx_sniperrifle_reverb_04"])
                    })) : this.settings.endless ? (this.party.addCharacter(new UnitPlayer(this), {
                        sprite: "willix",
                        ability: "airstrike",
                        health: 70,
                        speed: 180,
                        accuracy: .98,
                        weapon: new Weapon(this, Weapon.GUN, ["sfx_cassian_rifle_short_00"])
                    }), this.party.addCharacter(new UnitPlayer(this), {
                        sprite: "k2so",
                        ability: "granade",
                        health: 80,
                        speed: 150,
                        accuracy: .95,
                        weapon: new Weapon(this, Weapon.GUN, ["sfx_k2so_blaster_00"]),
                        subWeapon: new Weapon(this, Weapon.GRANADE)
                    }), this.party.addCharacter(new UnitPlayer(this), {
                        sprite: "marine_cra",
                        ability: "sniper",
                        health: 60,
                        speed: 160,
                        accuracy: .95,
                        weapon: new Weapon(this, Weapon.GUN, ["sfx_rebel_marine_blaster_00", "sfx_rebel_marine_blaster_01"]),
                        subWeapon: new Weapon(this, Weapon.CHARGED, ["sfx_sniperrifle_reverb_00", "sfx_sniperrifle_reverb_01", "sfx_sniperrifle_reverb_02", "sfx_sniperrifle_reverb_03", "sfx_sniperrifle_reverb_04"])
                    })) : (this.party.addCharacter(new UnitPlayer(this), {
                        sprite: "marine_air",
                        ability: "medic",
                        health: 20,
                        speed: 180,
                        accuracy: .95,
                        weapon: new Weapon(this, Weapon.GUN)
                    }), this.party.addCharacter(new UnitPlayer(this), {
                        sprite: "marine_hea",
                        ability: "rocket",
                        health: 20,
                        speed: 160,
                        accuracy: .95,
                        weapon: new Weapon(this, Weapon.GUN),
                        subWeapon: new Weapon(this, Weapon.ROCKET)
                    }), this.party.addCharacter(new UnitPlayer(this), {
                        sprite: "marine_cra",
                        ability: "sniper",
                        health: 20,
                        speed: 200,
                        accuracy: .95,
                        weapon: new Weapon(this, Weapon.GUN),
                        subWeapon: new Weapon(this, Weapon.SNIPER)
                    })), this.focusObject = this.party, this.party.spawn(this.startPosition), this.missionManager = new MissionManager(this, {
                        endless: !!this.settings.endless,
                        missions: !this.settings.endless && this.settings.missions ? this.settings.missions : []
                    }), this.focusPosition = new PIXI.Point(this.mapData.width * this.mapData.tilewidth / 2, this.mapData.height * this.mapData.tileheight / 2), this.updateCamera(!0), this.missionManager.init(), this.zoom = .7, this.changeZoom(1, 1.7), this._hitArea = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._hitArea.alpha = 0, this._hitArea.width = this.mapWidth, this._hitArea.height = this.mapHeight, this._hitArea.interactive = !0, this._hitArea.touchstart = this._hitArea.mousedown = this.onMouseClick.bind(this), this.addChild(this._hitArea)
                }, GameWorld.prototype.update = function() {
                    if (this._map && this._map.update(), !this.paused) {
                        if (!this.softPaused) {
                            this._time += p3.Timestep.deltaTime;
                            for (var type in this.objects.units) {
                                console.time(type + " " + this.objects.units[type].length);
                                for (var i = 0; i < this.objects.units[type].length; i++) this.objects.units[type][i].update()
                            }
                            for (var i = 0; i < this.objects.bullets.length; i++) this.objects.bullets[i].update();
                            for (var i = 0; i < this.objects.items.length; i++) this.objects.items[i].update();
                            for (var i = 0; i < this.objects.effects.length; i++) this.objects.effects[i].update();
                            this.party.update();
                            for (var type in this.objects.spawners)
                                for (var i = 0; i < this.objects.spawners[type].length; i++) this.objects.spawners[type][i].update()
                        }
                        if (this.updateCamera(), this.missionManager.update(), !this._gameOver && (!this.party.isAlive || this.missionManager.mission.isFailed)) {
                            this._gameOver = !0, this.settings.endless && (Common.savedData.lastArcadeMatch.score = this._score, Common.savedData.lastArcadeMatch.missionsCompleted = this.missionManager.missionsCompleted, Common.savedData.lastArcadeMatch.isDailyRecord = !1, Common.savedData.lastArcadeMatch.score > 0 && (Common.hiscoreManager.signals.loaded.addOnce(function(results) {
                                this.highscoreCheck(results, Common.savedData.lastArcadeMatch.score)
                            }, this), Common.hiscoreManager.loadTimestamp(Common.hiscoreManager.getTodayTimestamp())));
                            new TimelineMax({
                                delay: this.party.isAlive ? 4 : 2,
                                onStartScope: this,
                                onStart: function() {
                                    this.pause(), this.parent.gameOver()
                                }
                            })
                        }
                        if (this.sortLayerChildren("ground"), this._cullingInitialized || (this.updateCulling(), this.updateSounds(), this._cullingInitialized = !0), this.debug && this.queueTileGraphic) {
                            this.queueTileGraphic = !1, this._tileBusyGraphic && this._tileBusyGraphic.parent.removeChild(this._tileBusyGraphic), this._tileBusyGraphic = new PIXI.Graphics, this._tileBusyGraphic.beginFill(16711935, .5);
                            for (var y = 1; y < this.mapGridStatus.length - 1; y++)
                                for (var x = 1; x < this.mapGridStatus[y].length - 1; x++) this.mapGridStatus[y][x] && this._tileBusyGraphic.drawRect(x * this.mapTileSize, y * this.mapTileSize, this.mapTileSize, this.mapTileSize);
                            this.layers.tiles.addChild(this._tileBusyGraphic)
                        }
                    }
                }, GameWorld.prototype.highscoreCheck = function(results, score) {
                    results.daily.length < 20 ? Common.savedData.lastArcadeMatch.isDailyRecord = !0 : results.daily[results.daily.length - 1].score_int < score ? Common.savedData.lastArcadeMatch.isDailyRecord = !0 : Common.savedData.lastArcadeMatch.isDailyRecord = !1, console.info("Daily record", Common.savedData.lastArcadeMatch.isDailyRecord)
                }, GameWorld.prototype.updateCamera = function(asap) {
                    if (this._isShake && (this._shakeTime += p3.Timestep.deltaTime, this._shakeTime >= this._shakeTimeEnd && (this._shakeTime = 0, this._isShake = !1)), asap) this.focusPosition.x = this.focusObject.position.x, this.focusPosition.y = this.focusObject.position.y;
                    else if (this.focusObject != this.party || this.party.isAlive) {
                        var objPosition = this.focusObject.position,
                            deltaDiff = new PIXI.Point(objPosition.x - this.focusPosition.x, objPosition.y - this.focusPosition.y);
                        this.focusPosition.x += .1 * deltaDiff.x, this.focusPosition.y += .1 * deltaDiff.y
                    }
                    Math.sqrt(Math.pow(this.focusPosition.x - this.cullingPosition.x, 2) + Math.pow(this.focusPosition.y - this.cullingPosition.y, 2)) > this.cullingDelta && (this.updateCulling(), this.updateSounds()), this.x = Common.STAGE_WIDTH * this.focusPoint.x - this.focusPosition.x * this.zoom, this.y = Common.STAGE_HEIGHT * this.focusPoint.y - this.focusPosition.y * this.zoom;
                    var margins = {
                        top: .5 * this.visibleArea.y - this.focusPosition.y * this.zoom,
                        bottom: .5 * this.visibleArea.y - (this.mapHeight - this.focusPosition.y) * this.zoom,
                        left: .5 * this.visibleArea.x - this.focusPosition.x * this.zoom,
                        right: .5 * this.visibleArea.x - (this.mapWidth - this.focusPosition.x) * this.zoom
                    };
                    margins.top > 0 ? this.y -= margins.top : margins.bottom > 0 && (this.y += margins.bottom), margins.left > 0 ? this.x -= margins.left : margins.right > 0 && (this.x += margins.right), this._isShake && (this.x += p3.Utils.randomInt(-1, 1) * (this._shakeStrength.x * (1 - this._shakeTime / this._shakeTimeEnd)), this.y += p3.Utils.randomInt(-1, 1) * (this._shakeStrength.y * (1 - this._shakeTime / this._shakeTimeEnd))), this.scale.x = this.zoom, this.scale.y = this.zoom
                }, GameWorld.prototype.updateCulling = function() {
                    this.cullingPosition.set(this.focusPosition.x, this.focusPosition.y);
                    for (var i = 0; i < this.objects.static.length; i++) {
                        var obj = this.objects.static[i];
                        if (obj._culling) {
                            var distance = Math.sqrt(Math.pow(obj.x + obj.width / 2 - this.cullingPosition.x, 2) + Math.pow(obj.y - obj.height / 2 - this.cullingPosition.y, 2));
                            obj.culling(distance < this.cullingRadius)
                        }
                    }
                    for (var type in this.objects.units)
                        for (var i = 0; i < this.objects.units[type].length; i++) {
                            var obj = this.objects.units[type][i];
                            if (obj._culling) {
                                var distance = Math.sqrt(Math.pow(obj.x - this.cullingPosition.x, 2) + Math.pow(obj.y - this.cullingPosition.y, 2));
                                obj.culling(distance < this.cullingRadius)
                            }
                        }
                    for (var i = 0; i < this.objects.items.length; i++) {
                        var obj = this.objects.items[i];
                        if (obj._culling) {
                            var distance = Math.sqrt(Math.pow(obj.x - this.cullingPosition.x, 2) + Math.pow(obj.y - this.cullingPosition.y, 2));
                            obj.culling(distance < this.cullingRadius)
                        }
                    }
                    for (var i = 0; i < this.objects.effects.length; i++) {
                        var obj = this.objects.effects[i];
                        if (obj._culling) {
                            var distance = Math.sqrt(Math.pow(obj.x - this.cullingPosition.x, 2) + Math.pow(obj.y - this.cullingPosition.y, 2));
                            obj.culling(distance < this.cullingRadius)
                        }
                    }
                }, GameWorld.prototype.updateSounds = function() {
                    if (this.party.isAlive)
                        for (var partyPosition = this.party.getAveragePosition(), i = 0; i < this.objects.sounds.length; i++) this.objects.sounds[i].update(partyPosition)
                }, GameWorld.prototype.load = function(data) {
                    this.mapData = data, this.mapWidth = this.mapData.width * this.mapData.tilewidth, this.mapHeight = this.mapData.height * this.mapData.tileheight;
                    for (var startPositions = [], i = 0; i < this.mapData.layers.length; i++) {
                        var layerData = this.mapData.layers[i];
                        if (layerData.visible) switch (layerData.type) {
                            case "tilelayer":
                                for (var tilesetsData = {}, y = 0; y < layerData.height; y++)
                                    for (var x = 0; x < layerData.width; x++) {
                                        var tileIndex = y * layerData.width + x,
                                            tileId = layerData.data[tileIndex],
                                            tileset = this.getTileTileset(tileId);
                                        tilesetsData[tileset.name] || (tilesetsData[tileset.name] = []), tilesetsData[tileset.name].push({
                                            x: x,
                                            y: y,
                                            id: tileId
                                        })
                                    }
                                for (var key in tilesetsData) {
                                    for (var tileset = this.getTilesetByName(key), nTiles = tilesetsData[key].length, texture = this._assetManager.getTexture(tileset.image.replace(/^.*\/|\.[^.]*$/g, "")), vertices = new Float32Array(8 * nTiles), uvs = new Float32Array(8 * nTiles), indices = new Uint16Array(6 * nTiles), textureTileWidth = tileset.tilewidth / texture.width, textureTileHeight = tileset.tileheight / texture.height, t = 0; t < nTiles; t++) {
                                        var tile = tilesetsData[key][t];
                                        tile.id -= tileset.firstgid;
                                        var textureIndex = {
                                            x: tile.id % (texture.width / tileset.tilewidth),
                                            y: Math.floor(tile.id / (texture.width / tileset.tileheight))
                                        };
                                        vertices.set([tile.x * tileset.tilewidth, tile.y * tileset.tileheight, (tile.x + 1) * tileset.tilewidth, tile.y * tileset.tileheight, (tile.x + 1) * tileset.tilewidth, (tile.y + 1) * tileset.tileheight, tile.x * tileset.tilewidth, (tile.y + 1) * tileset.tileheight], 8 * t), uvs.set([textureIndex.x * textureTileWidth, textureIndex.y * textureTileHeight, (textureIndex.x + 1) * textureTileWidth, textureIndex.y * textureTileHeight, (textureIndex.x + 1) * textureTileWidth, (textureIndex.y + 1) * textureTileHeight, textureIndex.x * textureTileWidth, (textureIndex.y + 1) * textureTileHeight], 8 * t), indices.set([0 + 4 * t, 1 + 4 * t, 2 + 4 * t, 0 + 4 * t, 2 + 4 * t, 3 + 4 * t], 6 * t)
                                    }
                                    var layer = new PIXI.mesh.Mesh(texture, vertices, uvs, indices, PIXI.mesh.Mesh.DRAW_MODES.TRIANGLES);
                                    this.layers.floor.addChild(layer)
                                }
                                break;
                            case "imagelayer":
                                var texture = this._assetManager.getTexture(layerData.properties.texture);
                                texture.baseTexture.mipmap = !1;
                                var layer = new PIXI.extras.TilingSprite(texture, this.mapWidth, this.mapHeight);
                                this.layers.floor.addChild(layer), layerData.properties.blendMode && (layer.blendMode = parseInt(layerData.properties.blendMode));
                                break;
                            case "objectgroup":
                                for (var o = 0; o < layerData.objects.length; o++)
                                    if (layerData.objects[o].visible)
                                        if (layerData.objects[o].gid) {
                                            var id = layerData.objects[o].gid,
                                                tileset = this.getTileTileset(id);
                                            id -= tileset.firstgid;
                                            var objectData = {
                                                id: id,
                                                type: tileset.tileproperties && tileset.tileproperties[id] && tileset.tileproperties[id].type ? tileset.tileproperties[id].type : "static",
                                                solid: !!(tileset.tileproperties && tileset.tileproperties[id] && tileset.tileproperties[id].solid) && tileset.tileproperties[id].solid,
                                                tall: !!(tileset.tileproperties && tileset.tileproperties[id] && tileset.tileproperties[id].tall) && tileset.tileproperties[id].tall,
                                                spawn: !!(tileset.tileproperties && tileset.tileproperties[id] && tileset.tileproperties[id].spawn) && tileset.tileproperties[id].spawn,
                                                effect: !!(tileset.tileproperties && tileset.tileproperties[id] && tileset.tileproperties[id].effect) && tileset.tileproperties[id].effect,
                                                baseHeight: tileset.tileproperties && tileset.tileproperties[id] && tileset.tileproperties[id].baseHeight ? parseInt(tileset.tileproperties[id].baseHeight) : null,
                                                countdown: tileset.tileproperties && tileset.tileproperties[id] && tileset.tileproperties[id].countdown ? parseFloat(tileset.tileproperties[id].countdown) : 0,
                                                delay: tileset.tileproperties && tileset.tileproperties[id] && tileset.tileproperties[id].delay ? parseFloat(tileset.tileproperties[id].delay) : 0,
                                                action: tileset.tileproperties && tileset.tileproperties[id] && tileset.tileproperties[id].action ? tileset.tileproperties[id].action : "",
                                                collisionMask: tileset.tiles[id].objectgroup ? tileset.tiles[id].objectgroup.objects : null,
                                                image: tileset.tiles[id].image.replace(/^.*\/|\.[^.]*$/g, ""),
                                                position: new PIXI.Point((layerData.offsetx ? layerData.offsetx : 0) + layerData.objects[o].x, (layerData.offsety ? layerData.offsety : 0) + layerData.objects[o].y)
                                            };
                                            switch (objectData.type) {
                                                case "start":
                                                    startPositions.push({
                                                        x: Math.round(objectData.position.x / this.mapTileSize),
                                                        y: Math.round(objectData.position.y / this.mapTileSize)
                                                    });
                                                    break;
                                                case "static":
                                                    var object = new ObjectStatic(this);
                                                    object.init(objectData), object.scale.x = layerData.objects[o].width / object.width, object.scale.y = layerData.objects[o].height / object.height, object.rotation = PIXI.DEG_TO_RAD * layerData.objects[o].rotation, this.layers[layerData.properties && layerData.properties.layer ? layerData.properties.layer : "ground"].addChild(object), this.objects.static.push(object);
                                                    break;
                                                case "spawner":
                                                    var object = new Spawner(this);
                                                    object.init(objectData), this.debug && this.layers.logic.addChild(object), this.objects.spawners[objectData.spawn].push(object);
                                                    break;
                                                case "tutorial":
                                                    objectData.actionId = layerData.objects[o].properties.id;
                                                    var object = new TutorialLocation(this);
                                                    object.init(objectData), this.debug && this.layers.logic.addChild(object), this.objects.tutorial[objectData.action].push(object);
                                                    break;
                                                case "effect":
                                                    var effect = this.objectManager.generate(objectData.effect);
                                                    effect && effect.play(objectData.position.x, objectData.position.y);
                                                    break;
                                                default:
                                                    console.info("Object type %s not implemented", objectData.type)
                                            }
                                        } else {
                                            var obj = layerData.objects[o];
                                            if (layerData.objects[o].properties && layerData.objects[o].properties.sound) {
                                                var soundName = layerData.objects[o].properties.sound,
                                                    soundArea = new PIXI.Rectangle(obj.x, obj.y, obj.width, obj.height),
                                                    sound = new SoundEnvironment(this, soundName, soundArea);
                                                this.objects.sounds.push(sound)
                                            }
                                        }
                                break;
                            default:
                                console.info("Layer type %s not implemented", layerData.type)
                        }
                    }
                    if (0 == startPositions.length) console.error("No start positions defined");
                    else {
                        var i = p3.Utils.randomInt(0, startPositions.length - 1);
                        this.startPosition.set(startPositions[i].x, startPositions[i].y)
                    }
                    console.time("Calculating collision mask"), this.mapGridWidth = Math.floor(this.mapWidth / this.mapTileSize), this.mapGridHeight = Math.floor(this.mapHeight / this.mapTileSize);
                    for (var y = 0; y < this.mapGridHeight; y++) {
                        this.mapGrid[y] = [], this.mapGridStatus[y] = [];
                        for (var x = 0; x < this.mapGridWidth; x++) this.mapGrid[y][x] = this.TILE_EMPTY, this.mapGridStatus[y][x] = null
                    }
                    for (var i = 0; i < this.objects.static.length; i++)
                        for (var tiles = this.getSATShapeTiles(this.objects.static[i]), t = 0; t < tiles.length; t++) tiles[t].y < 0 || tiles[t].y >= this.mapGridHeight || tiles[t].x < 0 || tiles[t].x >= this.mapGridWidth || (this.mapGrid[tiles[t].y][tiles[t].x] = this.TILE_SOLID);
                    for (var y = 0; y < this.mapGridHeight; y++) this.mapGrid[y][0] = this.TILE_SOLID, this.mapGrid[y][this.mapGridWidth - 1] = this.TILE_SOLID;
                    for (var x = 0; x < this.mapGridWidth; x++) this.mapGrid[0][x] = this.TILE_SOLID, this.mapGrid[this.mapGridHeight - 1][x] = this.TILE_SOLID;
                    for (var fillQueue = [{
                        x: 1,
                        y: 1
                    }], fill = function() {
                        var cell = fillQueue.shift();
                        this.mapGrid[cell.y][cell.x] != this.TILE_SOLID && (this.mapGrid[cell.y][cell.x] = this.TILE_SOLID, this.mapGrid[cell.y][cell.x - 1] != this.TILE_SOLID && fillQueue.push({
                            x: cell.x - 1,
                            y: cell.y
                        }), this.mapGrid[cell.y][cell.x + 1] != this.TILE_SOLID && fillQueue.push({
                            x: cell.x + 1,
                            y: cell.y
                        }), this.mapGrid[cell.y - 1][cell.x] != this.TILE_SOLID && fillQueue.push({
                            x: cell.x,
                            y: cell.y - 1
                        }), this.mapGrid[cell.y + 1][cell.x] != this.TILE_SOLID && fillQueue.push({
                            x: cell.x,
                            y: cell.y + 1
                        }))
                    }.bind(this); fillQueue.length > 0;) fill();
                    if (console.timeEnd("Calculating collision mask"), this.debug) {
                        this._collisionGraphic = new PIXI.Graphics, this._collisionGraphic.beginFill(16711680, .25);
                        for (var y = 0; y < this.mapGrid.length; y++)
                            for (var x = 0; x < this.mapGrid[y].length; x++) this.mapGrid[y][x] && this._collisionGraphic.drawRect(x * this.mapTileSize, y * this.mapTileSize, this.mapTileSize, this.mapTileSize);
                        this.addChild(this._collisionGraphic)
                    }
                }, GameWorld.prototype.getSATShapeTiles = function(object) {
                    var shape = object.getSATShape(),
                        bounds = object.getSATShapeBoundingBox();
                    if (!shape || !bounds) return [];
                    for (var tiles = [], SATTile = new SAT.Box(new SAT.Vector(0, 0), this.mapTileSize, this.mapTileSize), y = Math.floor(bounds.y / this.mapTileSize); y <= Math.ceil((bounds.y + bounds.height) / this.mapTileSize); y++)
                        for (var x = Math.floor(bounds.x / this.mapTileSize); x <= Math.ceil((bounds.x + bounds.width) / this.mapTileSize); x++) {
                            SATTile.pos.x = x * this.mapTileSize, SATTile.pos.y = y * this.mapTileSize;
                            var result = SAT.testPolygonPolygon(SATTile.toPolygon(), shape);
                            result && tiles.push({
                                x: x,
                                y: y
                            })
                        }
                    return tiles
                }, GameWorld.prototype.getTileTileset = function(idTile) {
                    for (var i = 0; i < this.mapData.tilesets.length; i++) {
                        var tileset = this.mapData.tilesets[i];
                        if (idTile >= tileset.firstgid && idTile < tileset.firstgid + tileset.tilecount) return tileset
                    }
                    return null
                }, GameWorld.prototype.getTilesetByName = function(tilesetName) {
                    for (var i = 0; i < this.mapData.tilesets.length; i++) {
                        var tileset = this.mapData.tilesets[i];
                        if (tileset.name == tilesetName) return tileset
                    }
                }, GameWorld.prototype.changeZoom = function(zoom, time, delay) {
                    null != this.zoomTween && this.zoomTween.kill(), zoom != this.zoom && (this.zoomTween = new TimelineMax, this.zoomTween.to(this, time, {
                        zoom: zoom,
                        ease: Sine.easeInOut
                    }, delay ? delay : 0), Common.animator.add(this.zoomTween), this.zoomTarget = zoom)
                }, GameWorld.prototype.changeFocusPoint = function(focusPoint, time, delay) {
                    null != this.focusPointTween && this.focusPointTween.kill(), this.focusPoint.equal(focusPoint) || (this.focusPointTween = new TimelineMax, this.focusPointTween.to(this.focusPoint, time, {
                        x: focusPoint.x,
                        y: focusPoint.y,
                        ease: Sine.easeInOut
                    }, delay ? delay : 0), Common.animator.add(this.focusPointTween))
                }, GameWorld.prototype.shake = function(time, amount) {
                    this._isShake = !0, this._shakeTime = 0, this._shakeTimeEnd = time, this._shakeStrength = amount
                }, GameWorld.prototype.getTileValue = function(x, y) {
                    if ("undefined" != typeof x.x) var y = x.y,
                        x = x.x;
                    return x = Math.min(this.mapGridWidth - 1, Math.max(0, x)), y = Math.min(this.mapGridHeight - 1, Math.max(0, y)), this.mapGrid[y][x]
                }, GameWorld.prototype.getTileAtCoords = function(x, y, clamp) {
                    if ("undefined" == typeof clamp && (clamp = !0), "undefined" != typeof x.x) var y = x.y,
                        x = x.x;
                    var x = Math.floor(x / this.mapTileSize);
                    clamp && (x = Math.min(this.mapGridWidth - 1, Math.max(0, x)));
                    var y = Math.floor(y / this.mapTileSize);
                    return clamp && (y = Math.min(this.mapGridHeight - 1, Math.max(0, y))), new PIXI.Point(x, y)
                }, GameWorld.prototype.getCoordsAtTile = function(x, y) {
                    if ("undefined" != typeof x.x) var y = x.y,
                        x = x.x;
                    return new PIXI.Point((x + .5) * this.mapTileSize, (y + .5) * this.mapTileSize)
                }, GameWorld.prototype.getNearestAvailableTile = function(tile, exceptions) {
                    for (var distance = 1; distance < 100; distance++) {
                        for (var tiles = [], y = -distance; y <= distance; y++)
                            if (!(tile.y + y < 0)) {
                                if (tile.y + y >= this.mapGridHeight) break;
                                for (var x = -distance; x <= distance; x++)
                                    if (Math.abs(x) == distance || Math.abs(y) == distance) {
                                        var newTile = new PIXI.Point(tile.x + x, tile.y + y);
                                        if (!(newTile.x < 0)) {
                                            if (newTile.x >= this.mapGridWidth) break;
                                            if (this.getTileValue(newTile) == this.TILE_EMPTY && !this.getUnitAtTile(newTile)) {
                                                if (exceptions) {
                                                    for (var exception = !1, e = 0; e < exceptions.length; e++)
                                                        if (newTile.x == exceptions[e].x && newTile.y == exceptions[e].y) {
                                                            exception = !0;
                                                            break
                                                        }
                                                    if (exception) continue
                                                }
                                                tiles.push(newTile)
                                            }
                                        }
                                    }
                            }
                        if (tiles.length > 0) return tiles[p3.Utils.randomInt(0, tiles.length - 1)]
                    }
                    return tile
                }, GameWorld.prototype.occupyTiles = function(unit, tiles) {
                    if (unit._tiles)
                        for (var i = 0; i < unit._tiles.length; i++) this.mapGridStatus[unit._tiles[i].y][unit._tiles[i].x] = null;
                    unit._tiles = tiles;
                    for (var i = 0; i < unit._tiles.length; i++) this.mapGridStatus[unit._tiles[i].y][unit._tiles[i].x] = unit;
                    this.debug && (this.queueTileGraphic = !0)
                }, GameWorld.prototype.getUnitAtTile = function(tile) {
                    return this.mapGridStatus[tile.y][tile.x]
                }, GameWorld.prototype.isTileFree = function(tile) {
                    return tile.x >= 0 && tile.y >= 0 && tile.x < this.mapGridWidth && tile.y < this.mapGridHeight && !this.mapGridStatus[tile.y][tile.x] && this.getTileValue(tile) != this.TILE_SOLID
                }, GameWorld.prototype.pathfinding = function(start, end, ignoreUnits) {
                    for (var wMap = new Array(this.mapGridHeight), y = 0; y < wMap.length; y++) wMap[y] = new Array(this.mapGridWidth);
                    var openNodes = new BinaryHeap(function(node) {
                        return node.fScore
                    });
                    for (wMap[start.y][start.x] = {
                        y: start.y,
                        x: start.x,
                        parent: null,
                        gScore: 0,
                        fScore: Math.abs(start.x - end.x) + Math.abs(start.y - end.y),
                        closed: !1
                    }, openNodes.push(wMap[start.y][start.x]); openNodes.size() > 0;) {
                        var current = openNodes.pop();
                        if (current.x == end.x && current.y == end.y) {
                            var data = {
                                tiles: [],
                                score: current.gScore
                            };
                            do data.tiles.push({
                                x: current.x,
                                y: current.y
                            }), current = current.parent; while (null !== current);
                            return data
                        }
                        current.closed = !0;
                        var neighbor = [];
                        current.y > 1 && neighbor.push({
                            y: current.y - 1,
                            x: current.x,
                            d: 1,
                            weight: 1
                        }), current.x < this.mapGridWidth - 2 && neighbor.push({
                            y: current.y,
                            x: current.x + 1,
                            d: 2,
                            weight: 1
                        }), current.y < this.mapGridHeight - 2 && neighbor.push({
                            y: current.y + 1,
                            x: current.x,
                            d: 3,
                            weight: 1
                        }), current.x > 1 && neighbor.push({
                            y: current.y,
                            x: current.x - 1,
                            d: 4,
                            weight: 1
                        }), current.x > 1 && current.y > 1 && neighbor.push({
                            y: current.y - 1,
                            x: current.x - 1,
                            d: 5,
                            weight: 1.414
                        }), current.x > 1 && current.y < this.mapGridHeight - 2 && neighbor.push({
                            y: current.y + 1,
                            x: current.x - 1,
                            d: 6,
                            weight: 1.414
                        }), current.x < this.mapGridWidth - 2 && current.y > 1 && neighbor.push({
                            y: current.y - 1,
                            x: current.x + 1,
                            d: 7,
                            weight: 1.414
                        }), current.x < this.mapGridWidth - 2 && current.y < this.mapGridHeight - 2 && neighbor.push({
                            y: current.y + 1,
                            x: current.x + 1,
                            d: 8,
                            weight: 1.414
                        });
                        for (var i = 0; i < neighbor.length; i++) {
                            var x = neighbor[i].x,
                                y = neighbor[i].y,
                                d = neighbor[i].d;
                            if (this.mapGrid[y][x] != this.TILE_SOLID) {
                                if (!ignoreUnits) {
                                    var unit = this.getUnitAtTile(neighbor[i]);
                                    if (unit && (unit.isVehicle || unit.status == unit.STATUS_IDLE)) continue
                                }
                                if (void 0 === wMap[y][x] || !wMap[y][x].closed) {
                                    var tentativeGScore = current.gScore + neighbor[i].weight + (current.d != -1 && current.d != d ? this.turnPenality : 0);
                                    void 0 === wMap[y][x] ? (wMap[y][x] = {
                                        y: y,
                                        x: x,
                                        d: d,
                                        parent: current,
                                        gScore: tentativeGScore,
                                        fScore: tentativeGScore + this.aStarHeuristic(x, y, end.x, end.y),
                                        closed: !1
                                    }, openNodes.push(wMap[y][x])) : wMap[y][x].gScore > tentativeGScore && (wMap[y][x].d = d, wMap[y][x].parent = current, wMap[y][x].gScore = tentativeGScore, wMap[y][x].fScore = tentativeGScore + this.aStarHeuristic(x, y, end.x, end.y), openNodes.rescoreElement(wMap[y][x]))
                                }
                            }
                        }
                    }
                    return !1
                }, GameWorld.prototype.aStarHeuristic = function(startX, startY, endX, endY) {
                    var dX = Math.abs(startX - endX),
                        dY = Math.abs(startY - endY),
                        distance = Math.sqrt(2 * Math.pow(Math.min(dX, dY), 2)) + Math.abs(dX - dY);
                    return startX != endX && startY != endY && dX != dY && (distance += this.turnPenality), distance
                }, GameWorld.prototype.getRandomSpawner = function(type, quantity, area) {
                    for (var insideScreenSpawners = [], insideAreaSpawners = [], outsideAreaSpawners = [], quantity = quantity || 1, i = 0; i < this.objects.spawners[type].length; i++) {
                        var spawner = this.objects.spawners[type][i];
                        this.isInsideScreen(spawner) ? insideScreenSpawners.push(spawner) : area && Math.sqrt(Math.pow(area.x - spawner.x, 2) + Math.pow(area.y - spawner.y, 2)) > area.radius ? outsideAreaSpawners.push(spawner) : insideAreaSpawners.push(spawner)
                    }
                    for (var choosenSpawners = [], i = 0; i < quantity; i++)
                        if (insideAreaSpawners.length > 0) {
                            var index = p3.Utils.randomInt(0, insideAreaSpawners.length - 1);
                            choosenSpawners.push(insideAreaSpawners[index]), insideAreaSpawners.splice(index, 1)
                        } else if (outsideAreaSpawners.length > 0) {
                        var index = p3.Utils.randomInt(0, outsideAreaSpawners.length - 1);
                        choosenSpawners.push(outsideAreaSpawners[index]), outsideAreaSpawners.splice(index, 1)
                    } else {
                        var index = p3.Utils.randomInt(0, insideScreenSpawners.length - 1);
                        choosenSpawners.push(insideScreenSpawners[index]), insideScreenSpawners.splice(index, 1)
                    }
                    return 1 == quantity ? choosenSpawners[0] : choosenSpawners
                }, GameWorld.prototype.isInsideScreen = function(object) {
                    return object.x > -this.x && object.y > -this.y && object.x < -this.x + Common.STAGE_WIDTH * (1 / this.zoom) && object.y < -this.y + Common.STAGE_HEIGHT * (1 / this.zoom)
                }, GameWorld.prototype.damageArea = function(center, radius, damage, noFriendlyFire) {
                    for (var i = 0; i < this.objects.units.destructible.length; i++) this.objects.units.destructible[i].isDead || this.objects.units.destructible[i].isInRange(center, radius) && this.objects.units.destructible[i].hit(damage);
                    for (var i = 0; i < this.objects.units.enemy.length; i++) this.objects.units.enemy[i].isDead || this.objects.units.enemy[i].isInRange(center, radius) && this.objects.units.enemy[i].hit(damage);
                    if (!noFriendlyFire) {
                        for (var aliveCharacters = this.party.getAliveCharacters(), i = 0; i < aliveCharacters.length; i++) aliveCharacters[i].isInRange(center, radius) && aliveCharacters[i].hit(damage);
                        for (var i = 0; i < this.objects.units.ally.length; i++) this.objects.units.ally[i].isDead || this.objects.units.ally[i].isInRange(center, radius) && this.objects.units.ally[i].hit(damage)
                    }
                }, GameWorld.prototype.sortLayerChildren = function(layerName) {
                    this.layers[layerName].children.sort(function(a, b) {
                        return a.visible || b.visible ? a.y - a.baseHeight < b.y - b.baseHeight ? -1 : a.y - a.baseHeight > b.y - b.baseHeight ? 1 : a.x < b.x ? -1 : a.x > b.x ? 1 : 0 : 0
                    })
                }, GameWorld.prototype.awardPoints = function(score, x, y) {
                    if (!(score <= 0)) {
                        score = Math.floor(score * (1 + .2 * this.missionManager.missionsCompleted)), this._score += score;
                        var scoreText = this.objectManager.generate("effectScore");
                        scoreText.play(x, y, score)
                    }
                }, GameWorld.prototype.showCursor = function(x, y) {
                    if (!this._cursorContainer) {
                        this._cursorContainer = new PIXI.Container, this._cursorContainer.visible = !1, this.layers.tiles.addChild(this._cursorContainer), this._clickHint = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_radar_target_circle")), this._clickHint.anchor.set(.5), this._clickHint.scale.set(0), this._clickHint.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._cursorContainer.addChild(this._clickHint);
                        var tl = new TimelineMax({
                            repeat: -1,
                            onStartScope: this,
                            onStart: function() {
                                this._clickHint.scale.set(3), this._clickHint.alpha = 0
                            }
                        });
                        tl.to(this._clickHint.scale, 1, {
                            x: 0,
                            y: 0,
                            ease: Sine.easeInOut
                        }, 0), tl.to(this._clickHint, .3, {
                            alpha: 1,
                            ease: Quad.easeOut
                        }, 0), tl.to(this._clickHint, .7, {
                            alpha: 0,
                            ease: Quart.easeIn
                        }, .3), Common.animator.add(tl), this._cursor = new PIXI.Sprite(p3.AssetManager.instance.getTexture(p3.Device.isMobile ? "ui_tutorial_hand" : "ui_tutorial_cursor")), this._cursor.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._cursorContainer.addChild(this._cursor);
                        var tl = new TimelineMax;
                        tl.to(this._cursor, 1, {
                            y: 20,
                            ease: Sine.easeInOut,
                            yoyo: !0,
                            repeat: -1
                        }, 0), Common.animator.add(tl)
                    }
                    this._cursorContainer.position.set(x, y), this._cursorContainer.visible = !0, this._cursorContainer.alpha = 0, y > this.party.getAveragePosition().y + 150 ? this._cursorContainer.rotation = Math.PI : this._cursorContainer.rotation = 0;
                    var tl = new TimelineMax;
                    tl.to(this._cursorContainer, .5, {
                        alpha: 1,
                        ease: Sine.easeInOut
                    }, 0), Common.animator.add(tl)
                }, GameWorld.prototype.hideCursor = function() {
                    var tl = new TimelineMax({
                        onCompleteScope: this,
                        onComplete: function() {
                            this._cursorContainer.visible = !1
                        }
                    });
                    tl.to(this._cursorContainer, .5, {
                        alpha: 0,
                        ease: Sine.easeInOut
                    }, 0), Common.animator.add(tl)
                }, GameWorld.prototype.pause = function() {
                    this.paused = !0, this.softPause(), TweenMax.pauseAll(), this.parent.hidePauseButton(), Common.renderer.textureGC.run()
                }, GameWorld.prototype.resume = function() {
                    this.paused = !1, this.softResume(), TweenMax.resumeAll(), this.parent.showPauseButton()
                }, GameWorld.prototype.softPause = function() {
                    if (!this.softPaused) {
                        this.softPaused = !0, this.parent.hidePauseButton();
                        for (var i = 0; i < this.objects.bullets.length; i++) this.objects.bullets[i].pause();
                        for (var i = 0; i < this.objects.effects.length; i++) this.objects.effects[i].pause();
                        for (var type in this.objects.units)
                            for (var i = 0; i < this.objects.units[type].length; i++) this.objects.units[type][i].pause();
                        for (var i = 0; i < this.objects.sounds.length; i++) this.objects.sounds[i].pause()
                    }
                }, GameWorld.prototype.softResume = function() {
                    if (this.softPaused) {
                        this.softPaused = !1, this.parent.showPauseButton();
                        for (var i = 0; i < this.objects.bullets.length; i++) this.objects.bullets[i].resume();
                        for (var i = 0; i < this.objects.effects.length; i++) this.objects.effects[i].resume();
                        for (var type in this.objects.units)
                            for (var i = 0; i < this.objects.units[type].length; i++) this.objects.units[type][i].resume();
                        for (var i = 0; i < this.objects.sounds.length; i++) this.objects.sounds[i].resume()
                    }
                }, GameWorld.prototype.showMap = function() {
                    this.party.isAlive && (this.softPaused || (this._map = new GameMap(this), this._map.init(), this.parent.addChild(this._map), this.softPause()))
                }, GameWorld.prototype.onMouseDown = function(event) {}, GameWorld.prototype.onMouseMove = function(event) {}, GameWorld.prototype.onMouseClick = function(event) {
                    if (!this.paused && this.party.isAlive) {
                        var localPosition = event.data.getLocalPosition(this);
                        if (this.tuturialSkillClick) {
                            var distance = Math.sqrt(Math.pow(localPosition.x - this.tuturialSkillClick.x, 2) + Math.pow(localPosition.y - this.tuturialSkillClick.y, 2));
                            if (!(distance < 50)) return;
                            localPosition.set(this.tuturialSkillClick.x, this.tuturialSkillClick.y), this.settings.lockSkills = !1, this.hideCursor(), this.softResume(), this.tuturialSkillClick = null
                        }
                        var tile = this.getTileAtCoords(localPosition.x, localPosition.y);
                        if (this.settings.lockMovement) return void(this.settings.tutorial && this.missionManager._mission.click(localPosition.x, localPosition.y));
                        if (this.party.isSpecialWeaponReady) return void this.party.attackLocation(localPosition);
                        for (var i = 0; i < this.objects.units.enemy.length; i++)
                            if (!this.objects.units.enemy[i].isDead && this.objects.units.enemy[i].canBeAttacked && this.objects.units.enemy[i].isClicked(localPosition)) return void this.party.attack(this.objects.units.enemy[i]);
                        for (var i = 0; i < this.objects.units.destructible.length; i++)
                            if (!this.objects.units.destructible[i].isDead && this.objects.units.destructible[i].canBeAttacked && this.objects.units.destructible[i].isClicked(localPosition)) return void this.party.attack(this.objects.units.destructible[i]);
                        if (this.party.stopAttack(), this.getTileValue(tile) == this.TILE_SOLID) {
                            var tileStart = this.party.getLeader().tile,
                                tileEnd = new PIXI.Point(tile.x, tile.y),
                                lengthX = Math.abs(tileEnd.x - tileStart.x),
                                lengthY = Math.abs(tileEnd.y - tileStart.y);
                            if (lengthX > lengthY)
                                for (var dirX = Math.sign(tileEnd.x - tileStart.x), x = tileEnd.x - 1 * dirX; x != tileStart.x; x -= dirX) {
                                    var y = Math.round(tileStart.y + (tileEnd.y - tileStart.y) * ((x - tileStart.x) / (tileEnd.x - tileStart.x)));
                                    if (this.getTileValue(x, y) != this.TILE_SOLID) {
                                        tile.x = x, tile.y = y;
                                        break
                                    }
                                } else
                                    for (var dirY = Math.sign(tileEnd.y - tileStart.y), y = tileEnd.y - 1 * dirY; y != tileStart.y; y -= dirY) {
                                        var x = Math.round(tileStart.x + (tileEnd.x - tileStart.x) * ((y - tileStart.y) / (tileEnd.y - tileStart.y)));
                                        if (this.getTileValue(x, y) != this.TILE_SOLID) {
                                            tile.x = x, tile.y = y;
                                            break
                                        }
                                    }
                            if (this.getTileValue(tile) == this.TILE_SOLID) return
                        }
                        this.party.move(tile)
                    }
                }, Object.defineProperty(GameWorld.prototype, "difficulty", {
                    get: function() {
                        return this.settings.tutorial ? 0 : this.settings.endless ? Math.floor(this._time / Common.config.arcade.difficulty.time) : 0
                    }
                }), Object.defineProperty(GameWorld.prototype, "healthMulti", {
                    get: function() {
                        return this.settings.tutorial ? 1 : this.settings.endless ? 1 + this.difficulty * Common.config.arcade.difficulty.health_increase : 1
                    }
                }), Object.defineProperty(GameWorld.prototype, "accuracyBonus", {
                    get: function() {
                        return this.settings.tutorial ? 0 : this.settings.endless ? this.difficulty * Common.config.arcade.difficulty.accuracy_increase : 0
                    }
                })
            }, {
                "../Common": 5,
                "../Utils": 11,
                "./BulletBomb": 16,
                "./BulletGranade": 17,
                "./BulletLaser": 18,
                "./BulletLaserAirstrike": 19,
                "./BulletLaserExplosive": 20,
                "./BulletRocket": 21,
                "./BulletSniper": 22,
                "./EffectAirstrikeTarget": 24,
                "./EffectExplosion": 25,
                "./EffectExplosionBig": 26,
                "./EffectScore": 27,
                "./EffectSmoke": 28,
                "./EffectSniperHit": 29,
                "./GameMap": 30,
                "./MissionManager": 46,
                "./ObjectManager": 52,
                "./ObjectStatic": 53,
                "./Party": 54,
                "./SoundEnvironment": 55,
                "./Spawner": 56,
                "./TutorialLocation": 58,
                "./UnitPlayer": 65,
                "./Weapon": 69
            }
        ],
        34: [
            function(require, module, exports) {
                function Item(world, type) {
                    GameObject.call(this, world, type), this._active = !0, this._spriteContainer = null, this._score = 0, this._pickupRadius = 2, this._canBePickedUp = !0, this._spawner = null
                }
                var Common = require("../Common"),
                    GameObject = require("./GameObject");
                module.exports = Item, Item.prototype = Object.create(GameObject.prototype), Item.prototype.constructor = Item, Item.prototype.init = function() {
                    this._spriteContainer = new PIXI.Container, this.addChild(this._spriteContainer), this._pickupCollisionMask = new PIXI.Circle(0, 0, this._pickupRadius * this._world.mapTileSize), this._world.debug && (this._pickupGraphic = new PIXI.Graphics, this._pickupGraphic.lineStyle(3, 65280), this._pickupGraphic.drawCircle(this._pickupCollisionMask.x, this._pickupCollisionMask.y, this._pickupCollisionMask.radius), this.addChild(this._pickupGraphic))
                }, Item.prototype.update = function() {
                    if ((!this._culling || this.visible) && (GameObject.prototype.update.call(this), this._active && this._canBePickedUp)) {
                        var partyMembers = this._world.party.getAliveCharacters();
                        this.isInRange(partyMembers, this._pickupCollisionMask.radius) && this.pickup()
                    }
                }, Item.prototype.spawn = function(tile) {
                    var spawnTile = tile;
                    this.setTilePosition(spawnTile), this._world.objects.items.push(this), this._world.layers.ground.addChild(this)
                }, Item.prototype.setTilePosition = function(x, y) {
                    if ("undefined" != typeof x.x) var y = x.y,
                        x = x.x;
                    this.position = this._world.getCoordsAtTile(x, y), this._world.occupyTiles(this, [{
                        x: x,
                        y: y
                    }])
                }, Item.prototype.pickup = function() {
                    if (this._active) {
                        this._world.awardPoints(this._score, this.x, this.y - this._sprite.height / 4);
                        var tl = new TimelineMax;
                        tl.to(this, .5, {
                            alpha: 0,
                            ease: Linear.easeNone
                        }, 0), Common.animator.add(tl), this.hideGoalHighlight(), this.removeFromScene(.5)
                    }
                }, Item.prototype.removeFromScene = function(time, callback) {
                    if (time = parseFloat(time), this._active = !1, time <= 0) {
                        var index = this._world.objects.items.indexOf(this);
                        if (index != -1) {
                            if ("function" == typeof callback && callback(), this._world.objects.items.splice(index, 1), this.parent && this.parent.removeChild(this), this._world.occupyTiles(this, []), this._spawner) {
                                var spawnerIndex = this._spawner._entities.indexOf(this);
                                spawnerIndex != -1 ? this._spawner._entities.splice(spawnerIndex, 1) : console.error("Index not found")
                            }
                        } else console.error("Item, removeFromScene failed: Index not found"), console.log(this)
                    } else {
                        new TimelineMax({
                            delay: time,
                            onStartScope: this,
                            onStart: function() {
                                this.removeFromScene(0, callback)
                            }
                        })
                    }
                }, Object.defineProperty(Item.prototype, "tile", {
                    get: function() {
                        return this._world.getTileAtCoords(this.x, this.y)
                    }
                })
            }, {
                "../Common": 5,
                "./GameObject": 31
            }
        ],
        35: [
            function(require, module, exports) {
                function ItemEscortDestination(world) {
                    Item.call(this, world, "escortDestination"), this._score = 0, this._pickupRadius = 3.5, this._canBePickedUp = !1
                }
                var Item = (require("../Common"), require("./Item"));
                module.exports = ItemEscortDestination, ItemEscortDestination.prototype = Object.create(Item.prototype), ItemEscortDestination.prototype.constructor = ItemEscortDestination, ItemEscortDestination.prototype.init = function() {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(1.9 * -this._world.mapTileSize, 1.4 * -this._world.mapTileSize, 3.8 * this._world.mapTileSize, 2.8 * this._world.mapTileSize), Item.prototype.init.call(this), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("env_00_orange_crate_02")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite)
                }, ItemEscortDestination.prototype.spawn = function(position) {
                    Item.prototype.spawn.call(this, position);
                    for (var tiles = this._world.getSATShapeTiles(this), t = 0; t < tiles.length; t++) {
                        var unit = this._world.getUnitAtTile(tiles[t]);
                        unit != this && unit && "undefined" != typeof unit.teleport && unit.teleport(this._world.getNearestAvailableTile(unit.tile, tiles))
                    }
                    this._world.occupyTiles(this, tiles)
                }, ItemEscortDestination.prototype.update = function() {
                    Item.prototype.update.call(this)
                }, ItemEscortDestination.prototype.pickup = function() {
                    Item.prototype.pickup.call(this), this.playSound("sfx_box_open_03")
                }
            }, {
                "../Common": 5,
                "./Item": 34
            }
        ],
        36: [
            function(require, module, exports) {
                function ItemMedkit(world) {
                    Item.call(this, world, "medkit"), this._health = Common.config.arcade.items.medkit.health, this._time = Common.config.arcade.items.medkit.time
                }
                var Common = require("../Common"),
                    Item = require("./Item");
                module.exports = ItemMedkit, ItemMedkit.prototype = Object.create(Item.prototype), ItemMedkit.prototype.constructor = ItemMedkit, ItemMedkit.prototype.init = function() {
                    Item.prototype.init.call(this), this._glow = new PIXI.Sprite(this._assetManager.getTexture("particle_explode_spark_01")), this._glow.anchor.set(.5), this._glow.tint = 8513319, this._glow.blendMode = 1, this._glow.scale.set(1), this._spriteContainer.addChild(this._glow), this._glowTimeline = new TimelineMax, this._glowTimeline.to(this._glow.scale, 3, {
                        x: 2,
                        y: 1.6,
                        ease: Sine.easeInOut,
                        repeat: -1,
                        yoyo: !0
                    }), this._glowTimeline.to(this._glow, 3, {
                        alpha: .7,
                        ease: Sine.easeInOut,
                        repeat: -1,
                        yoyo: !0
                    }), Common.animator.add(this._glowTimeline), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_medkit_01")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite)
                }, ItemMedkit.prototype.update = function() {
                    Item.prototype.update.call(this)
                }, ItemMedkit.prototype.pickup = function() {
                    if (this._world.party.isWounded) {
                        this._glowTimeline.kill(), this._world.party.healOverTime(this._health, this._time);
                        for (var i = 0; i < this._world.objects.units.ally.length; i++) this._world.objects.units.ally[i].canBeHealed && this._world.objects.units.ally[i].healOverTime(this._health * this._world.objects.units.ally[i]._healthMax, this._time);
                        Item.prototype.pickup.call(this), this.playSound("sfx_health_open_fx_05")
                    }
                }
            }, {
                "../Common": 5,
                "./Item": 34
            }
        ],
        37: [
            function(require, module, exports) {
                function ItemMission(world) {
                    Item.call(this, world, "mission"), this._score = Common.config.arcade.missions.item.score
                }
                var Common = require("../Common"),
                    Item = require("./Item");
                module.exports = ItemMission, ItemMission.prototype = Object.create(Item.prototype), ItemMission.prototype.constructor = ItemMission, ItemMission.prototype.init = function() {
                    Item.prototype.init.call(this), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_recovery_01")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite)
                }, ItemMission.prototype.spawn = function(position) {
                    Item.prototype.spawn.call(this, position), this.showGoalHighlight()
                }, ItemMission.prototype.update = function() {
                    Item.prototype.update.call(this)
                }, ItemMission.prototype.pickup = function() {
                    Item.prototype.pickup.call(this), this._world.missionManager.missionComplete(), this.playSound("sfx_box_open_03")
                }
            }, {
                "../Common": 5,
                "./Item": 34
            }
        ],
        38: [
            function(require, module, exports) {
                function Mission(manager, type) {
                    this._assetManager = p3.AssetManager.instance, this._manager = manager, this._world = manager._world, this._type = type, this._complete = !1, this._failed = !1, this._title = Common.copy.NEW_MISSION[Common.COUNTRY_CODE], this._description = "", this._failTitle = Common.copy.MISSION_FAILED[Common.COUNTRY_CODE], this._failDescription = "", this._icon = "", this._music = ""
                }
                var Common = require("../Common");
                module.exports = Mission, Mission.prototype.TUTORIAL_01 = -1, Mission.prototype.TUTORIAL_02 = -2, Mission.prototype.TUTORIAL_END = -3, Mission.prototype.FREE_HOSTAGE = 0, Mission.prototype.COLLECT_ITEM = 1, Mission.prototype.DESTROY_TARGET = 2, Mission.prototype.KILL_PEOPLE = 3, Mission.prototype.ESCORT = 4, Mission.prototype.ENEMY_WAVES = 5, Mission.prototype.PROTECT_CARGO = 6, Mission.prototype.DESTROY_TANK = 7, Mission.prototype.init = function() {
                    console.log("Initialized mission type %i", this._type)
                }, Mission.prototype.update = function() {}, Mission.prototype.getMissionTargets = function() {
                    return []
                }, Mission.prototype.getNearestTargetPosition = function() {
                    var position = null,
                        targets = this.getMissionTargets();
                    if (targets.length > 0)
                        for (var minDistance = 0, i = 0; i < targets.length; i++) {
                            var distance = Math.sqrt(Math.pow(this._world.party.getAveragePosition().x - targets[i].x, 2) + Math.pow(this._world.party.getAveragePosition().y - targets[i].y, 2));
                            (null == position || distance < minDistance) && (position = new PIXI.Point(targets[i].x, targets[i].y), minDistance = distance)
                        }
                    return position
                }, Mission.prototype.getMissionTargetCount = function() {
                    return this.getMissionTargets().length
                }, Mission.prototype.getMissionTargetTotal = function() {
                    return 0
                }, Mission.prototype.getGoalMessage = function() {
                    return this._description
                }, Mission.prototype.logDeath = function(unit) {}, Object.defineProperty(Mission.prototype, "isComplete", {
                    get: function() {
                        return this._complete
                    }
                }), Object.defineProperty(Mission.prototype, "isFailed", {
                    get: function() {
                        return this._failed
                    }
                }), Object.defineProperty(Mission.prototype, "description", {
                    get: function() {
                        return this._description
                    }
                }), Object.defineProperty(Mission.prototype, "icon", {
                    get: function() {
                        return this._icon
                    }
                })
            }, {
                "../Common": 5
            }
        ],
        39: [
            function(require, module, exports) {
                function MissionDestroyTank(manager) {
                    Mission.call(this, manager, Mission.prototype.DESTROY_TANK), this._description = Common.copy.MISSION_DESTROY_TANK_DESCRIPTION[Common.COUNTRY_CODE], this._failDescription = Common.copy.MISSION_DESTROY_TANK_FAILED[Common.COUNTRY_CODE], this._icon = "ui_icon_mission_convoy", this._music = "music_bal2-0_atat_00"
                }
                var Common = require("../Common"),
                    Mission = require("./Mission");
                module.exports = MissionDestroyTank, MissionDestroyTank.prototype = Object.create(Mission.prototype), MissionDestroyTank.prototype.constructor = MissionDestroyTank, MissionDestroyTank.prototype.init = function() {
                    Mission.prototype.init.call(this);
                    var tankDestinationSpawner = this._world.getRandomSpawner("tankDestination", 1);
                    if (!tankDestinationSpawner) return void console.error("No tank destination spawner exists for this mission");
                    var spawner = this._world.getRandomSpawner("tank", 1);
                    return spawner ? (this._tank = spawner.spawn()[0].unit, void this._tank.setDestination(tankDestinationSpawner)) : void console.error("No tank spawner exists for this mission")
                }, MissionDestroyTank.prototype.update = function() {
                    Mission.prototype.update.call(this), this._complete || this._tank.isDead && this._manager.missionComplete()
                }, MissionDestroyTank.prototype.getMissionTargets = function() {
                    return [this._tank]
                }, MissionDestroyTank.prototype.getGoalMessage = function() {
                    return this._tank._spawn ? Common.copy.MISSION_DESTROY_TANK_STEP_1[Common.COUNTRY_CODE] : Common.copy.MISSION_DESTROY_TANK_STEP_2[Common.COUNTRY_CODE]
                }
            }, {
                "../Common": 5,
                "./Mission": 38
            }
        ],
        40: [
            function(require, module, exports) {
                function MissionDestroyTarget(manager) {
                    Mission.call(this, manager, Mission.prototype.DESTROY_TARGET), this._score = Common.config.arcade.missions.destroy_target.score, this._description = Common.copy.MISSION_DESTROY_TARGET_DESCRIPTION[Common.COUNTRY_CODE], this._icon = "ui_icon_mission_destroy", this._music = "music_bal3-0_tensionlong_02"
                }
                var Common = require("../Common"),
                    Mission = require("./Mission");
                module.exports = MissionDestroyTarget, MissionDestroyTarget.prototype = Object.create(Mission.prototype), MissionDestroyTarget.prototype.constructor = MissionDestroyTarget, MissionDestroyTarget.prototype.init = function() {
                    Mission.prototype.init.call(this);
                    var spawners = this._world.getRandomSpawner("destroyTarget", 2 + Math.floor(this._manager._missionsCompleted / 8), this._manager._spawnArea);
                    if (0 == spawners.length) return void console.error("No destroyTarget spawners exist for this mission");
                    for (var i = 0; i < spawners.length; i++) spawners[i].spawn();
                    this._missionTargetTotal = this.getMissionTargets().length
                }, MissionDestroyTarget.prototype.update = function() {
                    if (Mission.prototype.update.call(this), 0 == this.getMissionTargets().length) {
                        var leader = this._world.party.getLeader();
                        this._world.awardPoints(this._score, leader.x, leader.y - leader._sprite.height / 4), this._manager.missionComplete()
                    }
                }, MissionDestroyTarget.prototype.getMissionTargets = function() {
                    for (var targets = [], i = 0; i < this._world.objects.units.destructible.length; i++) this._world.objects.units.destructible[i].isAlive && this._world.objects.units.destructible[i]._mission && targets.push(this._world.objects.units.destructible[i]);
                    return targets
                }, MissionDestroyTarget.prototype.getGoalMessage = function() {
                    return Common.copy.MISSION_DESTROY_TARGET_STEP_1[Common.COUNTRY_CODE].replace("{value}", this.getMissionTargetTotal() - this.getMissionTargetCount()).replace("{total}", this.getMissionTargetTotal())
                }, MissionDestroyTarget.prototype.getMissionTargetTotal = function() {
                    return this._missionTargetTotal
                }
            }, {
                "../Common": 5,
                "./Mission": 38
            }
        ],
        41: [
            function(require, module, exports) {
                function MissionEnemyWaves(manager) {
                    Mission.call(this, manager, Mission.prototype.ENEMY_WAVES), this._score = Common.config.arcade.missions.enemy_waves.score, this._time = Common.config.arcade.missions.enemy_waves.time, this._waveDelay = Common.config.arcade.missions.enemy_waves.wave_delay, this._spawnMin = Common.config.arcade.missions.enemy_waves.spawn_range[0], this._spawnMax = Common.config.arcade.missions.enemy_waves.spawn_range[1], this._waitTime = Common.config.arcade.missions.enemy_waves.wait_time, this._time += Math.floor(this._manager._missionsCompleted / 8) * Common.config.arcade.difficulty.time_increase, this._description = Common.copy.MISSION_ENEMY_WAVES_DESCRIPTION[Common.COUNTRY_CODE].replace("{value}", this._time), this._icon = "ui_icon_mission_survive", this._music = "music_dal1-0_hightension_00", this._goalMessage = "SECONDS_TO_GO"
                }
                var Common = require("../Common"),
                    Mission = require("./Mission"),
                    UnitSoldier = require("./UnitSoldier");
                module.exports = MissionEnemyWaves, MissionEnemyWaves.prototype = Object.create(Mission.prototype), MissionEnemyWaves.prototype.constructor = MissionEnemyWaves, MissionEnemyWaves.prototype.init = function() {
                    Mission.prototype.init.call(this)
                }, MissionEnemyWaves.prototype.update = function() {
                    if (Mission.prototype.update.call(this), this._waitTime >= 0) {
                        if (this._waitTime -= p3.Timestep.deltaTime, this._waitTime < 0)
                            for (t = this._time - this._waveDelay / 2; t > 0; t -= this._waveDelay) {
                                new TimelineMax({
                                    delay: this._time - t,
                                    onStartScope: this,
                                    onStart: function() {
                                        this.spawnEnemies()
                                    }
                                })
                            }
                    } else if (!(this._time < 0) && (this._world.paused || this._world.softPaused || (this._time -= p3.Timestep.deltaTime), this._time < 0)) {
                        new TimelineMax({
                            delay: .5,
                            onStartScope: this,
                            onStart: function() {
                                if (this._world.party.isAlive) {
                                    var leader = this._world.party.getLeader();
                                    this._world.awardPoints(this._score, leader.x, leader.y - leader._sprite.height / 4), this._manager.missionComplete()
                                }
                            }
                        })
                    }
                }, MissionEnemyWaves.prototype.spawnEnemies = function() {
                    if (this._world.party.isAlive) {
                        for (var partyLeader = this._world.party.getLeader(), partyPosition = partyLeader.position, aliveCharacter = this._world.party.getAliveCharacters(), units = [], i = 0; i < p3.Utils.randomInt(this._spawnMin, this._spawnMax); i++) {
                            var random = Math.random();
                            random < .1 ? units.push({
                                unit: new UnitSoldier(this._world, "guard", {
                                    type: "stormtrooper_off",
                                    pursuer: !0
                                })
                            }) : units.push({
                                unit: new UnitSoldier(this._world, "guard", {
                                    type: "stormtrooper",
                                    pursuer: !0
                                })
                            })
                        }
                        this._spawnPoints = [];
                        for (var i = 0; i < this._world.objects.spawners.soldier.length; i++) {
                            var distance = Math.sqrt(Math.pow(partyPosition.x - this._world.objects.spawners.soldier[i].x, 2) + Math.pow(partyPosition.y - this._world.objects.spawners.soldier[i].y, 2));
                            distance > 300 && distance < 1200 && this._spawnPoints.push(this._world.objects.spawners.soldier[i])
                        }
                        for (var i = 0; i < units.length; i++) {
                            var spawnPoint = this._spawnPoints[p3.Utils.randomInt(0, this._spawnPoints.length - 1)],
                                position = new PIXI.Point(spawnPoint.x, spawnPoint.y),
                                tile = this._world.getTileAtCoords(position);
                            units[i].unit.init(), units[i].unit.spawn(tile), units[i].unit._spawner = null, units[i].unit._culling = !1;
                            var tl = new TimelineMax;
                            tl.to(units[i].unit, .5, {
                                alpha: units[i].unit.alpha,
                                ease: Linear.easeNone
                            }, 0), Common.animator.add(tl), units[i].unit.alpha = 0, units[i].unit.attack(aliveCharacter[p3.Utils.randomInt(0, aliveCharacter.length - 1)]), units[i].unit.run()
                        }
                    }
                }, MissionEnemyWaves.prototype.getMissionTargets = function() {
                    var targets = [];
                    return targets
                }, MissionEnemyWaves.prototype.getMissionTargetCount = function() {
                    return Math.ceil(this._time)
                }, MissionEnemyWaves.prototype.getGoalMessage = function() {
                    return this._waitTime > 0 ? "" : Common.copy.MISSION_ENEMY_WAVES_STEP_1[Common.COUNTRY_CODE].replace("{value}", this.getMissionTargetCount())
                }
            }, {
                "../Common": 5,
                "./Mission": 38,
                "./UnitSoldier": 66
            }
        ],
        42: [
            function(require, module, exports) {
                function MissionEscort(manager) {
                    Mission.call(this, manager, Mission.prototype.ESCORT), this._description = Common.copy.MISSION_ESCORT_DESCRIPTION[Common.COUNTRY_CODE], this._failDescription = Common.copy.MISSION_ESCORT_FAILED[Common.COUNTRY_CODE], this._icon = "ui_icon_mission_pilot", this._music = "music_dal1-2_stealthtension_00", this._waitingForPlayer = !0
                }
                var Common = require("../Common"),
                    Mission = require("./Mission");
                module.exports = MissionEscort, MissionEscort.prototype = Object.create(Mission.prototype), MissionEscort.prototype.constructor = MissionEscort, MissionEscort.prototype.init = function() {
                    Mission.prototype.init.call(this);
                    var spawner = this._world.getRandomSpawner("escortDestination", 1, this._manager._spawnArea);
                    if (!spawner) return void console.error("No escort destination spawner exists for this mission");
                    this._escortDestination = spawner.spawn()[0].unit;
                    var spawner = this._world.getRandomSpawner("escort", 1, this._manager._spawnArea);
                    return spawner ? (this._escort = spawner.spawn()[0].unit, void this._escort.setDestination(this._escortDestination)) : void console.error("No escort spawner exists for this mission")
                }, MissionEscort.prototype.update = function() {
                    Mission.prototype.update.call(this), !this._complete
                }, MissionEscort.prototype.getMissionTargets = function() {
                    return this._escort._activated ? [this._escort, this._escortDestination] : [this._escort]
                }, MissionEscort.prototype.getNearestTargetPosition = function() {
                    return this._escort._activated ? this._escortDestination.position : this._escort.position
                }, MissionEscort.prototype.getGoalMessage = function() {
                    return this._escort._activated ? Common.copy.MISSION_ESCORT_STEP_2[Common.COUNTRY_CODE] : Common.copy.MISSION_ESCORT_STEP_1[Common.COUNTRY_CODE]
                }
            }, {
                "../Common": 5,
                "./Mission": 38
            }
        ],
        43: [
            function(require, module, exports) {
                function MissionHostage(manager) {
                    Mission.call(this, manager, Mission.prototype.FREE_HOSTAGE), this._description = Common.copy.MISSION_FREE_HOSTAGE_DESCRIPTION[Common.COUNTRY_CODE], this._icon = "ui_icon_mission_rescue", this._music = "music_bal3-0_tensionlong_02"
                }
                var Common = require("../Common"),
                    Mission = require("./Mission");
                module.exports = MissionHostage, MissionHostage.prototype = Object.create(Mission.prototype), MissionHostage.prototype.constructor = MissionHostage, MissionHostage.prototype.init = function() {
                    Mission.prototype.init.call(this);
                    var spawner = this._world.getRandomSpawner("hostage", 1, this._manager._spawnArea);
                    return spawner ? void spawner.spawn() : void console.error("No hostage spawner exists for this mission")
                }, MissionHostage.prototype.update = function() {
                    if (Mission.prototype.update.call(this), !this._complete) {
                        for (var i = 0; i < this._world.objects.units.hostage.length; i++)
                            if (!this._world.objects.units.hostage[i].hasBeenSaved) return;
                        this._manager.missionComplete()
                    }
                }, MissionHostage.prototype.getMissionTargets = function() {
                    for (var targets = [], i = 0; i < this._world.objects.units.hostage.length; i++) this._world.objects.units.hostage[i].hasBeenSaved || targets.push(this._world.objects.units.hostage[i]);
                    return targets
                }
            }, {
                "../Common": 5,
                "./Mission": 38
            }
        ],
        44: [
            function(require, module, exports) {
                function MissionItem(manager) {
                    Mission.call(this, manager, Mission.prototype.COLLECT_ITEM), this._description = Common.copy.MISSION_RECOVER_ITEM_DESCRIPTION[Common.COUNTRY_CODE], this._icon = "ui_icon_mission_recover", this._music = "music_dal1-1_stealthtension_00"
                }
                var Common = require("../Common"),
                    Mission = require("./Mission");
                module.exports = MissionItem, MissionItem.prototype = Object.create(Mission.prototype), MissionItem.prototype.constructor = MissionItem, MissionItem.prototype.init = function() {
                    Mission.prototype.init.call(this);
                    var spawner = this._world.getRandomSpawner("missionItem", 1, this._manager._spawnArea);
                    return spawner ? void spawner.spawn() : void console.error("No item spawner exists for this mission")
                }, MissionItem.prototype.update = function() {
                    Mission.prototype.update.call(this)
                }, MissionItem.prototype.getMissionTargets = function() {
                    for (var targets = [], i = 0; i < this._world.objects.items.length; i++) "mission" == this._world.objects.items[i].type && this._world.objects.items[i]._active && targets.push(this._world.objects.items[i]);
                    return targets
                }
            }, {
                "../Common": 5,
                "./Mission": 38
            }
        ],
        45: [
            function(require, module, exports) {
                function MissionKillPeople(manager) {
                    Mission.call(this, manager, Mission.prototype.KILL_PEOPLE), this._score = Common.config.arcade.missions.defeat_enemies.score, this._countMin = Common.config.arcade.missions.defeat_enemies.count_range[0], this._countMax = Common.config.arcade.missions.defeat_enemies.count_range[1], this._count = p3.Utils.randomInt(this._countMin, this._countMax), this._count += Math.floor(this._manager._missionsCompleted / 8) * Common.config.arcade.difficulty.count_increase, this._description = Common.copy.MISSION_DEFEAT_ENEMY_DESCRIPTION[Common.COUNTRY_CODE].replace("{value}", this._count), this._icon = "ui_icon_mission_knock_out", this._music = "music_bal3-0_tensionlong_02", this._missionTargetTotal = this._count
                }
                var Common = require("../Common"),
                    Mission = require("./Mission");
                module.exports = MissionKillPeople, MissionKillPeople.prototype = Object.create(Mission.prototype), MissionKillPeople.prototype.constructor = MissionKillPeople, MissionKillPeople.prototype.init = function() {
                    Mission.prototype.init.call(this)
                }, MissionKillPeople.prototype.update = function() {
                    Mission.prototype.update.call(this)
                }, MissionKillPeople.prototype.getMissionTargets = function() {
                    var targets = [],
                        distance = -1;
                    if (this._world.party.isAlive)
                        for (var i = 0; i < this._world.objects.units.enemy.length; i++)
                            if (!this._world.objects.units.enemy[i].isDead) {
                                var d = Math.sqrt(Math.pow(this._world.objects.units.enemy[i].x - this._world.party.position.x, 2) + Math.pow(this._world.objects.units.enemy[i].y - this._world.party.position.y, 2));
                                (distance == -1 || distance > d) && (targets[0] = this._world.objects.units.enemy[i], distance = d)
                            }
                    return targets
                }, MissionKillPeople.prototype.getMissionTargetCount = function() {
                    return this._count
                }, MissionKillPeople.prototype.getMissionTargetTotal = function() {
                    return this._missionTargetTotal
                }, MissionKillPeople.prototype.getGoalMessage = function() {
                    return Common.copy.MISSION_DEFEAT_ENEMY_STEP_1[Common.COUNTRY_CODE].replace("{value}", this.getMissionTargetTotal() - this.getMissionTargetCount()).replace("{total}", this.getMissionTargetTotal())
                }, MissionKillPeople.prototype.logDeath = function(unit) {
                    this._count <= 0 || "enemy" == unit.type && (unit.isFriendly || (this._count--, 0 == this._count && (this._world.awardPoints(this._score, this._world.party.getLeader().x, this._world.party.getLeader().y - this._world.party.getLeader()._sprite.height / 4), this._manager.missionComplete())))
                }
            }, {
                "../Common": 5,
                "./Mission": 38
            }
        ],
        46: [
            function(require, module, exports) {
                function MissionManager(world, settings) {
                    this._world = world, this._mission = null, this._missions = settings.missions || [], this._endless = !!settings.endless, this._missionsCompleted = 0, this._missionDeck = [], this._complete = !1, this._lastMissionId = -1, this._endless && (this._missionsToken = Common.config.arcade.missions_token, this._spawnAngle = Math.atan2(this._world.party.getAveragePosition().y - this._world.mapHeight / 2, this._world.party.getAveragePosition().x - this._world.mapWidth / 2), this._spawnAngleDelta = 20 * PIXI.DEG_TO_RAD, this.updateSpawnArea())
                }
                var Common = require("../Common"),
                    Mission = require("./Mission"),
                    MissionHostage = require("./MissionHostage"),
                    MissionItem = require("./MissionItem"),
                    MissionDestroyTarget = require("./MissionDestroyTarget"),
                    MissionKillPeople = require("./MissionKillPeople"),
                    MissionEscort = require("./MissionEscort"),
                    MissionEnemyWaves = require("./MissionEnemyWaves"),
                    MissionProtectCargo = require("./MissionProtectCargo"),
                    MissionDestroyTank = require("./MissionDestroyTank"),
                    MissionTutorial_01 = require("./MissionTutorial_01"),
                    MissionTutorial_02 = require("./MissionTutorial_02"),
                    MissionTutorial_End = require("./MissionTutorial_End");
                module.exports = MissionManager, MissionManager.prototype.init = function() {}, MissionManager.prototype.update = function() {
                    this._complete || null != this._mission && (this._mission.update(), this._world.parent._gameUI.setTopBarText(this._mission.getGoalMessage(), this._mission._icon), this._mission.isComplete && this.generateMission())
                }, MissionManager.prototype.missionComplete = function() {
                    this._mission._complete = !0, this._missionsCompleted++, this._world.party.healOverTime(.15, 1), this._world.parent._gameUI.missionComplete(), this._endless && (this._spawnAngle -= this._spawnAngleDelta, this.updateSpawnArea());
                    var trophies = [];
                    this._endless && (1 == this._missionsCompleted && trophies.push(0), 5 == this._missionsCompleted && trophies.push(1), 10 == this._missionsCompleted && trophies.push(2), 10 == this._missionsCompleted && 3 == this._world.party.getAliveCharacters().length && trophies.push(3));
                    for (var i = 0; i < trophies.length; i++) Common.savedData.getTrophyStatus(trophies[i]) || (Common.savedData.awardTrophy(trophies[i]), this._world.parent._trophyUI.showTrophy(trophies[i]));
                    this._endless && this._missionsCompleted % this._missionsToken == 0 && (Common.savedData.awardTokens(1), this._world.parent._trophyUI.showToken())
                }, MissionManager.prototype.missionFailed = function() {
                    this._mission._failed = !0, this._world.parent._gameUI.missionFailed(this._mission._failTitle, this._mission._failDescription)
                }, MissionManager.prototype.generateMission = function() {
                    if (this._endless) {
                        if (0 == this._missionDeck.length) {
                            for (var i = 0; i < 8; i++) this._missionDeck.push(i);
                            for (this._missionDeck = p3.Utils.shuffleArray(this._missionDeck); this._missionDeck[0] == Mission.prototype.DESTROY_TANK;) this._missionDeck = p3.Utils.shuffleArray(this._missionDeck)
                        } else this._missionsCompleted == this._missionDeck.length && (this._missionDeck = p3.Utils.shuffleArray(this._missionDeck));
                        do {
                            var index = 0,
                                iMission = this._missionDeck[index];
                            this._missionDeck.splice(index, 1), this._missionDeck.push(iMission)
                        } while (iMission == this._lastMissionId || iMission == Mission.prototype.ENEMY_WAVES && this._lastMissionId == Mission.prototype.PROTECT_CARGO || iMission == Mission.prototype.PROTECT_CARGO && this._lastMissionId == Mission.prototype.ENEMY_WAVES);
                        this._lastMissionId = iMission
                    } else {
                        if (!(this._missions.length > this._missionsCompleted)) return console.info("All missions completed"), void(this._complete = !0);
                        var iMission = this._missions[this._missionsCompleted]
                    }
                    switch (iMission) {
                        case Mission.prototype.TUTORIAL_01:
                            this._mission = new MissionTutorial_01(this);
                            break;
                        case Mission.prototype.TUTORIAL_02:
                            this._mission = new MissionTutorial_02(this);
                            break;
                        case Mission.prototype.TUTORIAL_END:
                            this._mission = new MissionTutorial_End(this);
                            break;
                        case Mission.prototype.FREE_HOSTAGE:
                            this._mission = new MissionHostage(this);
                            break;
                        case Mission.prototype.COLLECT_ITEM:
                            this._mission = new MissionItem(this);
                            break;
                        case Mission.prototype.DESTROY_TARGET:
                            this._mission = new MissionDestroyTarget(this);
                            break;
                        case Mission.prototype.KILL_PEOPLE:
                            this._mission = new MissionKillPeople(this);
                            break;
                        case Mission.prototype.ESCORT:
                            this._mission = new MissionEscort(this);
                            break;
                        case Mission.prototype.ENEMY_WAVES:
                            this._mission = new MissionEnemyWaves(this);
                            break;
                        case Mission.prototype.PROTECT_CARGO:
                            this._mission = new MissionProtectCargo(this);
                            break;
                        case Mission.prototype.DESTROY_TANK:
                            this._mission = new MissionDestroyTank(this);
                            break;
                        default:
                            return void console.error("Mission %i not defined", iMission)
                    }
                    this._mission.init();
                    new TimelineMax({
                        delay: 0 == this._missionsCompleted ? 1 : 2.5,
                        onStartScope: this,
                        onStart: function() {
                            this._world.parent._gameUI.showMission(this._mission._title, this._mission._description, this._mission._icon)
                        }
                    });
                    this._missionTargetCount = this._mission.getMissionTargetCount(), this._world.parent._gameUI.showTopBar((0 == this._missionsCompleted ? 1 : 2.5) + 3), this._mission._music && (Common.bgMusic && Common.bgMusic.howl.fade(Common.bgMusicVolume, 0, 1e3, Common.bgMusic.id), Common.bgMusic = Common.audio.playSound(this._mission._music, {
                        loop: !0,
                        volume: 0
                    }), Common.bgMusic.howl.fade(0, Common.bgMusicVolume, 1e3, Common.bgMusic.id))
                }, MissionManager.prototype.getNearestTargetPosition = function() {
                    return this._mission.getNearestTargetPosition()
                }, MissionManager.prototype.getNearestTargetDistance = function() {
                    var target = this.getNearestTargetPosition();
                    if (target && this._world.party.isAlive) {
                        var party = this._world.party.getLeader().position;
                        return Math.sqrt(Math.pow(party.x - target.x, 2) + Math.pow(party.y - target.y, 2))
                    }
                    return null
                }, MissionManager.prototype.getTargetPositions = function() {
                    for (var positions = [], targets = this._mission.getMissionTargets(), i = 0; i < targets.length; i++) positions.push(targets[i]);
                    return positions
                }, MissionManager.prototype.logDeath = function(unit) {
                    this._mission.logDeath(unit)
                }, MissionManager.prototype.updateSpawnArea = function() {
                    this._spawnArea = new PIXI.Circle(this._world.mapWidth / 2 + Math.cos(this._spawnAngle) * this._world.mapWidth / 3.25, this._world.mapHeight / 2 + Math.sin(this._spawnAngle) * this._world.mapHeight / 3.25, this._world.mapWidth / 4)
                }, Object.defineProperty(MissionManager.prototype, "mission", {
                    get: function() {
                        return this._mission
                    }
                }), Object.defineProperty(MissionManager.prototype, "missionsCompleted", {
                    get: function() {
                        return this._missionsCompleted
                    }
                })
            }, {
                "../Common": 5,
                "./Mission": 38,
                "./MissionDestroyTank": 39,
                "./MissionDestroyTarget": 40,
                "./MissionEnemyWaves": 41,
                "./MissionEscort": 42,
                "./MissionHostage": 43,
                "./MissionItem": 44,
                "./MissionKillPeople": 45,
                "./MissionProtectCargo": 47,
                "./MissionTutorial_01": 49,
                "./MissionTutorial_02": 50,
                "./MissionTutorial_End": 51
            }
        ],
        47: [
            function(require, module, exports) {
                function MissionProtectCargo(manager) {
                    Mission.call(this, manager, Mission.prototype.PROTECT_CARGO), this._score = Common.config.arcade.missions.protect_cargo.score, this._time = Common.config.arcade.missions.protect_cargo.time, this._waveDelay = Common.config.arcade.missions.protect_cargo.wave_delay, this._spawnMin = Common.config.arcade.missions.protect_cargo.spawn_range[0], this._spawnMax = Common.config.arcade.missions.protect_cargo.spawn_range[1], this._time += Math.floor(this._manager._missionsCompleted / 8) * Common.config.arcade.difficulty.time_increase, this._description = Common.copy.MISSION_PROTECT_CARGO_DESCRIPTION[Common.COUNTRY_CODE].replace("{value}", this._time), this._failDescription = Common.copy.MISSION_PROTECT_CARGO_FAILED[Common.COUNTRY_CODE], this._icon = "ui_icon_mission_defend", this._music = "music_bal1-1_tension_00", this._spawnPoints = [], this._activated = !1
                }
                var Common = require("../Common"),
                    Mission = require("./Mission"),
                    UnitSoldier = require("./UnitSoldier");
                module.exports = MissionProtectCargo, MissionProtectCargo.prototype = Object.create(Mission.prototype), MissionProtectCargo.prototype.constructor = MissionProtectCargo, MissionProtectCargo.prototype.init = function() {
                    Mission.prototype.init.call(this);
                    var spawner = this._world.getRandomSpawner("cargo", 1, this._manager._spawnArea);
                    return spawner ? void(this._cargo = spawner.spawn()[0].unit) : void console.error("No cargo spawner exists for this mission")
                }, MissionProtectCargo.prototype.update = function() {
                    if (Mission.prototype.update.call(this), this._failed || this._cargo.isDead && this._manager.missionFailed(), !this._complete && !this._failed)
                        if (this._activated) {
                            if (this._time < 0) return;
                            if (this._time -= p3.Timestep.deltaTime, this._time < 0) {
                                this._cargo.rescued(), this._world.awardPoints(this._score, this._cargo.x, this._cargo.y - this._cargo._sprite.height / 4);
                                new TimelineMax({
                                    delay: 1.1,
                                    onStartScope: this,
                                    onStart: function() {
                                        this._world.party.isAlive && this._manager.missionComplete()
                                    }
                                })
                            }
                        } else {
                            var partyMembers = this._world.party.getAliveCharacters();
                            if (this._cargo.isInRange(partyMembers, this._cargo._activationCollisionMask.radius)) {
                                this._activated = !0, this._cargo._immortal = !1;
                                for (var i = 0; i < this._world.objects.spawners.soldier.length; i++) {
                                    var distance = Math.sqrt(Math.pow(this._cargo.x - this._world.objects.spawners.soldier[i].x, 2) + Math.pow(this._cargo.y - this._world.objects.spawners.soldier[i].y, 2));
                                    distance > 500 && distance < 1200 && this._spawnPoints.push(this._world.objects.spawners.soldier[i])
                                }
                                for (t = this._time - this._waveDelay / 2; t > 0; t -= this._waveDelay) {
                                    new TimelineMax({
                                        delay: this._time - t,
                                        onStartScope: this,
                                        onStart: function() {
                                            this.spawnEnemies()
                                        }
                                    })
                                }
                            }
                        }
                }, MissionProtectCargo.prototype.spawnEnemies = function() {
                    for (var units = [], i = 0; i < p3.Utils.randomInt(this._spawnMin, this._spawnMax); i++) {
                        var random = Math.random();
                        random < .1 ? units.push({
                            unit: new UnitSoldier(this._world, "stand", {
                                type: "stormtrooper_off"
                            })
                        }) : units.push({
                            unit: new UnitSoldier(this._world, "stand", {
                                type: "stormtrooper"
                            })
                        })
                    }
                    for (var i = 0; i < units.length; i++) {
                        var spawnPoint = this._spawnPoints[p3.Utils.randomInt(0, this._spawnPoints.length - 1)],
                            position = new PIXI.Point(spawnPoint.x, spawnPoint.y),
                            tile = this._world.getTileAtCoords(position);
                        units[i].unit.init(), units[i].unit.spawn(tile), units[i].unit._spawner = null, units[i].unit._culling = !1;
                        var tl = new TimelineMax;
                        tl.to(units[i].unit, .5, {
                            alpha: units[i].unit.alpha,
                            ease: Linear.easeNone
                        }, 0), Common.animator.add(tl), units[i].unit.alpha = 0, units[i].unit.move(this._world.getNearestAvailableTile(this._cargo.tile)), Math.random() < .5 && units[i].unit.run()
                    }
                }, MissionProtectCargo.prototype.getMissionTargets = function() {
                    var targets = [this._cargo];
                    return targets
                }, MissionProtectCargo.prototype.getMissionTargetCount = function() {
                    return this._activated ? Math.ceil(this._time) : 0
                }, MissionProtectCargo.prototype.getGoalMessage = function() {
                    return this._activated ? Common.copy.MISSION_PROTECT_CARGO_STEP_2[Common.COUNTRY_CODE].replace("{value}", this.getMissionTargetCount()) : Common.copy.MISSION_PROTECT_CARGO_STEP_1[Common.COUNTRY_CODE]
                }
            }, {
                "../Common": 5,
                "./Mission": 38,
                "./UnitSoldier": 66
            }
        ],
        48: [
            function(require, module, exports) {
                function MissionTutorial(manager, type) {
                    Mission.call(this, manager, type), this._world = this._manager._world, this._description = "Tutorial", this._tasks = [], this._iTask = -1, this._doNextTask = !0, this._time = 0, this._targetPosition = null, this._clickPosition = null
                }
                var Common = require("../Common"),
                    Mission = require("./Mission"),
                    UnitSoldier = require("./UnitSoldier"),
                    UnitBarrel = require("./UnitBarrel"),
                    UnitDestroyTarget = require("./UnitDestroyTarget"),
                    ItemMission = require("./ItemMission"),
                    ItemMedkit = require("./ItemMedkit"),
                    ItemMission = require("./ItemMission");
                module.exports = MissionTutorial, MissionTutorial.prototype = Object.create(Mission.prototype), MissionTutorial.prototype.constructor = MissionTutorial, MissionTutorial.prototype.init = function() {
                    Mission.prototype.init.call(this), this._startPosition = this._world.party.getLeader().position, this._targetPosition = {
                        x: this._startPosition.x,
                        y: this._startPosition.y
                    }
                }, MissionTutorial.prototype.update = function() {
                    if (Mission.prototype.update.call(this), this._doNextTask) {
                        if (this._doNextTask = !1, this._iTask++, this._time = 0, this._iTask >= this._tasks.length) return console.info("Tutorial, complete"), void this._manager.missionComplete();
                        console.info("Tutorial, task %i: %s", this._iTask, this._tasks[this._iTask].action)
                    } else this._time += p3.Timestep.deltaTime; if (!(this._iTask >= this._tasks.length)) {
                        switch (this._tasks[this._iTask].action) {
                            case "lock_movement":
                            case "unlock_movement":
                                this._world.settings.lockMovement = "lock_movement" == this._tasks[this._iTask].action, this._doNextTask = !0;
                                break;
                            case "lock_skills":
                            case "unlock_skills":
                                this._world.settings.lockSkills = !0, this._doNextTask = !0;
                                break;
                            case "lock_skill":
                                var index = this._world.settings.lockSkillExceptions.indexOf(this._tasks[this._iTask].what);
                                index != -1 && this._world.settings.lockSkillExceptions.splice(index, 1), this._doNextTask = !0;
                                break;
                            case "unlock_skill":
                                var index = this._world.settings.lockSkillExceptions.indexOf(this._tasks[this._iTask].what);
                                index == -1 && this._world.settings.lockSkillExceptions.push(this._tasks[this._iTask].what), this._doNextTask = !0;
                                break;
                            case "charge_skill":
                                for (var party = this._world.party.getAliveCharacters(), i = 0; i < party.length; i++) party[i].abilityType == this._tasks[this._iTask].what && party[i].rechargeAbility();
                                this._doNextTask = !0;
                                break;
                            case "skill":
                                0 == this._time ? (this._waitingForInput = !0, this._world.softPause(), this._world.signals.skillUsed.addOnce(function() {
                                    this._waitingForInput = !1
                                }, this)) : this._waitingForInput || (this._world.softResume(), this._doNextTask = !0);
                                break;
                            case "delay":
                                this._time > this._tasks[this._iTask].time && (this._doNextTask = !0);
                                break;
                            case "focus_position":
                                0 == this._time ? this._world.changeFocusPoint(this._tasks[this._iTask].pos, 1) : this._time > 1 && (this._doNextTask = !0);
                                break;
                            case "move":
                            case "move_medkit":
                            case "move_item":
                                if (0 == this._time) {
                                    var location = this.getTutorialLocation("move" == this._tasks[this._iTask].action ? "move" : this._tasks[this._iTask].action.replace("move_", ""), this._tasks[this._iTask].id);
                                    if (!location) {
                                        console.log("Couldn't execute %s", this._tasks[this._iTask].action), this._doNextTask = !0;
                                        break
                                    }
                                    this._targetPosition = location.position, this.showCursor(this._targetPosition.x, this._targetPosition.y), this._waitingForInput = !0, this._world.softPause()
                                } else if (this._waitingForInput && null != this._clickPosition) {
                                    var distance = Math.sqrt(Math.pow(this._clickPosition.x - this._targetPosition.x, 2) + Math.pow(this._clickPosition.y - this._targetPosition.y, 2));
                                    if (distance < 100) {
                                        this._waitingForInput = !1, this._world.softResume(), this.hideCursor();
                                        var tile = this._world.getTileAtCoords(this._targetPosition.x, this._targetPosition.y);
                                        this._world.party.move(tile)
                                    }
                                } else this._waitingForInput || this._world.party.isIdle && (this._doNextTask = !0);
                                break;
                            case "click_target":
                                if (0 == this._time) {
                                    var location = this.getTutorialLocation("target", this._tasks[this._iTask].id);
                                    if (!location) {
                                        console.log("Couldn't execute %s", this._tasks[this._iTask].action), this._doNextTask = !0;
                                        break
                                    }
                                    this._targetPosition = location.position, this.showCursor(this._targetPosition.x, this._targetPosition.y), this._waitingForInput = !0, this._world.softPause()
                                } else if (this._waitingForInput && null != this._clickPosition) {
                                    var distance = Math.sqrt(Math.pow(this._clickPosition.x - this._targetPosition.x, 2) + Math.pow(this._clickPosition.y - this._targetPosition.y, 2));
                                    distance < 100 && (this._waitingForInput = !1, this._world.softResume(), this.hideCursor(), this._world.party.isSpecialWeaponReady && this._world.party.attackLocation(this._targetPosition), this._doNextTask = !0)
                                }
                                break;
                            case "soldier":
                                var location = this.getTutorialLocation("soldier", this._tasks[this._iTask].id),
                                    tile = this._world.getTileAtCoords(location.x, location.y),
                                    obj = new UnitSoldier(this._world, "stand", {});
                                obj.init(), obj.spawn({
                                    x: tile.x,
                                    y: tile.y
                                });
                                var tl = new TimelineMax;
                                tl.to(obj, .5, {
                                    alpha: obj.alpha,
                                    ease: Linear.easeNone
                                }, 0), Common.animator.add(tl), obj.alpha = 0, this._doNextTask = !0;
                                break;
                            case "kill_enemy":
                            case "kill_destructible":
                                if (0 == this._time) this._target = this.getFirstAliveUnit(this._tasks[this._iTask].action.replace("kill_", "")), this._target || (console.info("Couldn't find enemy"), this._doNextTask = !0), this._targetPosition = this._target.position, this.showCursor(this._targetPosition.x, this._targetPosition.y), this._waitingForInput = !0, this._world.softPause();
                                else if (this._waitingForInput && null != this._clickPosition) {
                                    var distance = Math.sqrt(Math.pow(this._clickPosition.x - this._targetPosition.x, 2) + Math.pow(this._clickPosition.y - this._targetPosition.y, 2));
                                    distance < 100 && (this._waitingForInput = !1, this._world.softResume(), this.hideCursor(), this._world.party.attack(this._target))
                                } else this._waitingForInput || this._target.isDead && (this._doNextTask = !0);
                                break;
                            case "medkit":
                                var location = this.getTutorialLocation("medkit", this._tasks[this._iTask].id),
                                    tile = this._world.getTileAtCoords(location.x, location.y),
                                    obj = new ItemMedkit(this._world);
                                obj.init(), obj.spawn({
                                    x: tile.x,
                                    y: tile.y
                                });
                                var tl = new TimelineMax;
                                tl.to(obj, .5, {
                                    alpha: obj.alpha,
                                    ease: Linear.easeNone
                                }, 0), Common.animator.add(tl), obj.alpha = 0, this._doNextTask = !0;
                                break;
                            case "item":
                                var location = this.getTutorialLocation("item", this._tasks[this._iTask].id),
                                    tile = this._world.getTileAtCoords(location.x, location.y),
                                    obj = new ItemMission(this._world);
                                obj.init(), obj.spawn({
                                    x: tile.x,
                                    y: tile.y
                                });
                                var tl = new TimelineMax;
                                tl.to(obj, .5, {
                                    alpha: obj.alpha,
                                    ease: Linear.easeNone
                                }, 0), Common.animator.add(tl), obj.alpha = 0, this._doNextTask = !0;
                                break;
                            case "barrel":
                                var location = this.getTutorialLocation("barrel", this._tasks[this._iTask].id),
                                    tile = this._world.getTileAtCoords(location.x, location.y),
                                    obj = new UnitBarrel(this._world);
                                obj.init(), obj.spawn({
                                    x: tile.x,
                                    y: tile.y
                                });
                                var tl = new TimelineMax;
                                tl.to(obj, .5, {
                                    alpha: obj.alpha,
                                    ease: Linear.easeNone
                                }, 0), Common.animator.add(tl), obj.alpha = 0, this._doNextTask = !0;
                                break;
                            case "target":
                                var location = this.getTutorialLocation("target", this._tasks[this._iTask].id),
                                    tile = this._world.getTileAtCoords(location.x, location.y),
                                    obj = new UnitDestroyTarget(this._world);
                                obj.init(), obj.spawn({
                                    x: tile.x,
                                    y: tile.y
                                }), obj._canBeAttacked = !1;
                                var tl = new TimelineMax;
                                tl.to(obj, .5, {
                                    alpha: obj.alpha,
                                    ease: Linear.easeNone
                                }, 0), Common.animator.add(tl), obj.alpha = 0, this._targetPosition = obj.position, this._doNextTask = !0;
                                break;
                            case "ui":
                                this._world.parent._gameUI.showCursor(this._tasks[this._iTask].what);
                                this._doNextTask = !0;
                                break;
                            case "ui_hide":
                                this._world.parent._gameUI.hideCursor(), this._doNextTask = !0;
                                break;
                            case "ui_map_cursor":
                                0 == this._time && this._world._map ? this._world._map.showCursor(this._tasks[this._iTask].what) : (!this._world._map || this._time > this._tasks[this._iTask].delay) && (this._doNextTask = !0);
                                break;
                            case "ui_map_cursor_hide":
                                if (0 == this._time && this._world._map) this._world._map.hideCursor();
                                else if (!this._world._map || this._time > .5) {
                                    this._doNextTask = !0;
                                    break
                                }
                                break;
                            case "ui_map_open":
                                if (this._world._map) {
                                    this._doNextTask = !0;
                                    break
                                }
                                break;
                            case "ui_map_close":
                                if (!this._world._map) {
                                    this._doNextTask = !0;
                                    break
                                }
                                break;
                            case "near_target":
                                var party = this._world.party.getLeader(),
                                    distance = Math.sqrt(Math.pow(party.position.x - this._targetPosition.x, 2) + Math.pow(party.position.y - this._targetPosition.y, 2));
                                if (distance < 250) {
                                    this._doNextTask = !0;
                                    break
                                }
                                break;
                            case "godmode":
                                this._world.party.godMode(), this._doNextTask = !0;
                                break;
                            case "tutorial_complete":
                                0 == this._time && (Common.savedData.tutorialComplete(), this._world.parent.signals.showSplash.dispatch());
                                break;
                            default:
                                console.error("Tutorial action %s not defined", this._tasks[this._iTask].action), this._doNextTask = !0
                        }
                        this._clickPosition = null
                    }
                }, MissionTutorial.prototype.getMissionTargets = function() {
                    var targets = [this._targetPosition];
                    return targets
                }, MissionTutorial.prototype.showCursor = function(x, y) {
                    this._world.showCursor(x, y)
                }, MissionTutorial.prototype.hideCursor = function() {
                    this._world.hideCursor()
                }, MissionTutorial.prototype.click = function(x, y) {
                    this._clickPosition = {
                        x: x,
                        y: y
                    }
                }, MissionTutorial.prototype.getTutorialLocation = function(action, id) {
                    for (var i = 0; i < this._world.objects.tutorial[action].length; i++)
                        if (this._world.objects.tutorial[action][i].id == id) return this._world.objects.tutorial[action][i];
                    return !1
                }, MissionTutorial.prototype.getFirstAliveUnit = function(what) {
                    for (var i = 0; i < this._world.objects.units[what].length; i++)
                        if (this._world.objects.units[what][i].isAlive) return this._world.objects.units[what][i];
                    return !1
                }
            }, {
                "../Common": 5,
                "./ItemMedkit": 36,
                "./ItemMission": 37,
                "./Mission": 38,
                "./UnitBarrel": 60,
                "./UnitDestroyTarget": 62,
                "./UnitSoldier": 66
            }
        ],
        49: [
            function(require, module, exports) {
                function MissionTutorial_01(manager) {
                    MissionTutorial.call(this, manager, Mission.prototype.TUTORIAL_01), this._title = Common.copy.MISSION_TUTORIAL1_TITLE[Common.COUNTRY_CODE], this._description = Common.copy.MISSION_TUTORIAL1_DESCRIPTION[Common.COUNTRY_CODE], this._icon = "ui_icon_mission_recover", this._music = "music_dal1-1_stealthtension_00"
                }
                var Common = require("../Common"),
                    Mission = require("./Mission"),
                    MissionTutorial = require("./MissionTutorial");
                module.exports = MissionTutorial_01, MissionTutorial_01.prototype = Object.create(MissionTutorial.prototype), MissionTutorial_01.prototype.constructor = MissionTutorial_01, MissionTutorial_01.prototype.init = function() {
                    MissionTutorial.prototype.init.call(this), this._tasks = [{
                        action: "godmode"
                    }, {
                        action: "lock_skills"
                    }, {
                        action: "lock_movement"
                    }, {
                        action: "delay",
                        time: 2.5
                    }, {
                        action: "move",
                        id: "1"
                    }, {
                        action: "soldier",
                        id: "1"
                    }, {
                        action: "soldier",
                        id: "2"
                    }, {
                        action: "medkit",
                        id: "1"
                    }, {
                        action: "move",
                        id: "2"
                    }, {
                        action: "focus_position",
                        pos: {
                            x: .4,
                            y: .7
                        }
                    }, {
                        action: "kill_enemy"
                    }, {
                        action: "delay",
                        time: .5
                    }, {
                        action: "kill_enemy"
                    }, {
                        action: "delay",
                        time: .5
                    }, {
                        action: "focus_position",
                        pos: {
                            x: .5,
                            y: .5
                        }
                    }, {
                        action: "move",
                        id: "3"
                    }, {
                        action: "move",
                        id: "3b"
                    }, {
                        action: "move_medkit",
                        id: "1"
                    }, {
                        action: "soldier",
                        id: "3"
                    }, {
                        action: "soldier",
                        id: "4"
                    }, {
                        action: "barrel",
                        id: "1"
                    }, {
                        action: "delay",
                        time: 1.5
                    }, {
                        action: "move",
                        id: "4"
                    }, {
                        action: "move",
                        id: "5"
                    }, {
                        action: "focus_position",
                        pos: {
                            x: .5,
                            y: .7
                        }
                    }, {
                        action: "kill_destructible"
                    }, {
                        action: "delay",
                        time: 1.5
                    }, {
                        action: "focus_position",
                        pos: {
                            x: .5,
                            y: .5
                        }
                    }, {
                        action: "move",
                        id: "6"
                    }, {
                        action: "item",
                        id: "1"
                    }, {
                        action: "move",
                        id: "7"
                    }, {
                        action: "move_item",
                        id: "1"
                    }]
                }, MissionTutorial_01.prototype.getGoalMessage = function() {
                    return this._title
                }
            }, {
                "../Common": 5,
                "./Mission": 38,
                "./MissionTutorial": 48
            }
        ],
        50: [
            function(require, module, exports) {
                function MissionTutorial_02(manager) {
                    MissionTutorial.call(this, manager, Mission.prototype.TUTORIAL_02), this._title = Common.copy.MISSION_TUTORIAL1_TITLE[Common.COUNTRY_CODE], this._description = Common.copy.MISSION_TUTORIAL2_DESCRIPTION[Common.COUNTRY_CODE], this._icon = "ui_icon_mission_destroy", this._music = "music_bal3-0_tensionlong_02"
                }
                var Common = require("../Common"),
                    Mission = require("./Mission"),
                    MissionTutorial = require("./MissionTutorial");
                module.exports = MissionTutorial_02, MissionTutorial_02.prototype = Object.create(MissionTutorial.prototype), MissionTutorial_02.prototype.constructor = MissionTutorial_02, MissionTutorial_02.prototype.init = function() {
                    MissionTutorial.prototype.init.call(this), this._tasks = [{
                        action: "godmode"
                    }, {
                        action: "lock_skills"
                    }, {
                        action: "lock_movement"
                    }, {
                        action: "target",
                        id: "1"
                    }, {
                        action: "soldier",
                        id: "5"
                    }, {
                        action: "soldier",
                        id: "6"
                    }, {
                        action: "delay",
                        time: 3.5
                    }, {
                        action: "ui",
                        what: "map"
                    }, {
                        action: "ui_map_open"
                    }, {
                        action: "ui_hide"
                    }, {
                        action: "ui_map_cursor",
                        what: "party",
                        delay: 2.5
                    }, {
                        action: "ui_map_cursor",
                        what: "target",
                        delay: 3
                    }, {
                        action: "ui_map_cursor_hide"
                    }, {
                        action: "ui_map_cursor",
                        what: "close"
                    }, {
                        action: "ui_map_close"
                    }, {
                        action: "unlock_movement"
                    }, {
                        action: "near_target"
                    }, {
                        action: "lock_movement"
                    }, {
                        action: "move",
                        id: "plantBomb"
                    }, {
                        action: "focus_position",
                        pos: {
                            x: .4,
                            y: .3
                        }
                    }, {
                        action: "ui",
                        what: "granade"
                    }, {
                        action: "unlock_skill",
                        what: "granade"
                    }, {
                        action: "charge_skill",
                        what: "granade"
                    }, {
                        action: "skill",
                        what: "granade"
                    }, {
                        action: "lock_skill",
                        what: "granade"
                    }, {
                        action: "ui_hide"
                    }, {
                        action: "click_target",
                        id: "1"
                    }, {
                        action: "delay",
                        time: 5
                    }, {
                        action: "focus_position",
                        pos: {
                            x: .5,
                            y: .5
                        }
                    }]
                }, MissionTutorial_02.prototype.getGoalMessage = function() {
                    return this._title
                }
            }, {
                "../Common": 5,
                "./Mission": 38,
                "./MissionTutorial": 48
            }
        ],
        51: [
            function(require, module, exports) {
                function MissionTutorial_End(manager) {
                    MissionTutorial.call(this, manager, Mission.prototype.TUTORIAL_END), this._title = Common.copy.MISSION_TUTORIAL3_TITLE[Common.COUNTRY_CODE], this._description = Common.copy.MISSION_TUTORIAL3_DESCRIPTION[Common.COUNTRY_CODE], this._icon = "ui_icon_mission_destroy"
                }
                var Common = require("../Common"),
                    Mission = require("./Mission"),
                    MissionTutorial = require("./MissionTutorial");
                module.exports = MissionTutorial_End, MissionTutorial_End.prototype = Object.create(MissionTutorial.prototype), MissionTutorial_End.prototype.constructor = MissionTutorial_End, MissionTutorial_End.prototype.init = function() {
                    MissionTutorial.prototype.init.call(this), this._tasks.push({
                        action: "delay",
                        time: 4.5
                    }), this._tasks.push({
                        action: "tutorial_complete"
                    })
                }, MissionTutorial_End.prototype.getGoalMessage = function() {
                    return ""
                }
            }, {
                "../Common": 5,
                "./Mission": 38,
                "./MissionTutorial": 48
            }
        ],
        52: [
            function(require, module, exports) {
                function ObjectManager(pools) {
                    this.assetManager = p3.AssetManager.instance, this._poolData = pools, this._pools = null, this._objects = [], this._id2Pool = [], PIXI.Container.call(this)
                }
                require("../Common");
                module.exports = ObjectManager, ObjectManager.prototype = Object.create(PIXI.Container.prototype), ObjectManager.prototype.constructor = ObjectManager, ObjectManager.prototype.init = function() {
                    this._pools = {};
                    for (var i = 0; i < this._poolData.length; i++) this._pools[this._poolData[i].pool] || (this._pools[this._poolData[i].pool] = new p3.ObjectPool(this._poolData[i].base, this._poolData[i].quantity ? this._poolData[i].quantity : 1, this._poolData[i].args)), this._id2Pool[this._poolData[i].id] = this._poolData[i].pool
                }, ObjectManager.prototype.generate = function(id) {
                    var pool = this._pools[this._id2Pool[id]],
                        obj = pool.create();
                    return null == obj && (pool.expand(2), obj = pool.create()), this._objects[obj.type] || (this._objects[obj.type] = []), this._objects[obj.type].push(obj), obj
                }, ObjectManager.prototype.dispose = function(obj) {
                    for (var i in this._pools)
                        if (this._pools[i]._used.indexOf(obj) > -1) {
                            this._pools[i].free(obj);
                            var index = this._objects[obj.type].indexOf(obj);
                            index != -1 && this._objects[obj.type].splice(index, 1)
                        }
                }, ObjectManager.prototype.getObjectsOfType = function(type) {
                    return this._objects[type] ? this._objects[type] : []
                }
            }, {
                "../Common": 5
            }
        ],
        53: [
            function(require, module, exports) {
                function ObjectStatic(world) {
                    GameObject.call(this, world, "static"), this.sprite = null, this.isSolid = !1, this.isTall = !0
                }
                var GameObject = (require("../Common"), require("./GameObject"));
                module.exports = ObjectStatic, ObjectStatic.prototype = Object.create(GameObject.prototype), ObjectStatic.prototype.constructor = ObjectStatic, ObjectStatic.prototype.init = function(objectData) {
                    if (this.sprite = new PIXI.Sprite(this._assetManager.getTexture(objectData.image)), this.sprite.anchor.set(0, 1), this.addChild(this.sprite), this.x = objectData.position.x, this.y = objectData.position.y, this.isSolid = !!objectData.solid, this.isTall = !!objectData.tall, null != objectData.baseHeight ? this.baseHeight = objectData.baseHeight : this.baseHeight = this.sprite.height, objectData.collisionMask && objectData.collisionMask[0]) {
                        var mask = objectData.collisionMask[0];
                        if (mask.polygon) {
                            this.collisionType = "polygon";
                            for (var path = [], i = 0; i < mask.polygon.length; i++) path.push(new PIXI.Point(mask.polygon[i].x + mask.x, mask.polygon[i].y + mask.y - this.sprite.height));
                            path.push(new PIXI.Point(mask.polygon[0].x + mask.x, mask.polygon[0].y + mask.y - this.sprite.height)), this.collisionMask = new PIXI.Polygon(path)
                        } else mask.ellipse ? (this.collisionType = "ellipse", this.collisionMask = new PIXI.Rectangle(mask.x, mask.y - this.sprite.height, mask.width, mask.height)) : (this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(mask.x, mask.y - this.sprite.height, mask.width, mask.height))
                    }
                    this._world.debug && this.drawCollision()
                }, ObjectStatic.prototype.update = function() {}
            }, {
                "../Common": 5,
                "./GameObject": 31
            }
        ],
        54: [
            function(require, module, exports) {
                function Party(layer) {
                    this._layer = layer, this._world = layer.parent, this._characters = [], this._unitAttacked = null, this._mode = "free", this._lastShoot = 0, this._delayShoot = .15, this._delayTutorialSkill = 5
                }
                var Common = require("../Common");
                module.exports = Party, Party.prototype.init = function() {}, Party.prototype.update = function() {
                    this._lastShoot += p3.Timestep.deltaTime;
                    for (var aliveCharacters = this.getAliveCharacters(), i = 0; i < aliveCharacters.length; i++) Common.keyboard.getKeyJustPressed(Common.keyboard.KEY_ONE + i) && aliveCharacters[i].useAbility();
                    if (!this._world.settings.tutorial)
                        if (this._delayTutorialSkill <= 0) {
                            for (var i = 0; i < aliveCharacters.length; i++)
                                if (!Common.savedData.tutorialSkill[aliveCharacters[i].abilityType] && 1 == aliveCharacters[i].getAbilityCooldownStatus()) {
                                    var tutorialSkill = !1;
                                    switch (aliveCharacters[i].abilityType) {
                                        case "medic":
                                            break;
                                        case "stealth":
                                            break;
                                        case "hacker":
                                            break;
                                        case "airstrike":
                                            for (var nEnemies = 0, e = 0; e < this._world.objects.units.enemy.length; e++) this._world.objects.units.enemy[e].isDead || this._world.objects.units.enemy[e].isInRange(aliveCharacters[i], 300) && nEnemies++;
                                            if (nEnemies >= 3) {
                                                tutorialSkill = !0;
                                                break
                                            }
                                            break;
                                        case "sniper":
                                        case "rocket":
                                        case "granade":
                                            if (null != aliveCharacters[i]._attackTarget) break;
                                            for (var e = 0; e < this._world.objects.units.enemy.length; e++)
                                                if (!this._world.objects.units.enemy[e].isDead && this._world.objects.units.enemy[e].isInRange(aliveCharacters[i], 300) && aliveCharacters[i].isLineOfSightFree(this._world.objects.units.enemy[e])) {
                                                    var enemy = this._world.objects.units.enemy[e];
                                                    tutorialSkill = !0;
                                                    break
                                                }
                                    }
                                    if (!tutorialSkill) continue;
                                    this._world.softPause(), this._world.parent._gameUI.showCursor(aliveCharacters[i].abilityType), this._world.settings.lockSkills = !0, this._world.settings.lockSkillExceptions = [aliveCharacters[i].abilityType], this._world.signals.skillUsed.addOnce(function() {
                                        switch (aliveCharacters[i].abilityType) {
                                            case "airstrike":
                                                this._world.softResume(), this._world.settings.lockSkills = !1, this._world.settings.lockSkillExceptions = [];
                                                break;
                                            case "sniper":
                                            case "rocket":
                                            case "granade":
                                                this._world.tuturialSkillClick = {
                                                    x: enemy.x,
                                                    y: enemy.y
                                                }, this._world.settings.lockSkillExceptions = [], this._world.showCursor(enemy.x, enemy.y)
                                        }
                                        this._world.parent._gameUI.hideCursor(), this._delayTutorialSkill += 5
                                    }.bind(this)), Common.savedData.tutorialSkill[aliveCharacters[i].abilityType] = !0, Common.savedData.save();
                                    break
                                }
                        } else this._delayTutorialSkill -= p3.Timestep.deltaTime
                }, Party.prototype.addCharacter = function(character, config) {
                    character.init(config), this._characters.push(character)
                }, Party.prototype.spawn = function(x, y) {
                    if ("undefined" != typeof x.x) var y = x.y,
                        x = x.x;
                    for (var formationDirection = new PIXI.Point(0, 1), formation = this.getFormation(new PIXI.Point(x, y), formationDirection), i = 0; i < this._characters.length; i++) this._characters[i].spawn(formation[i])
                }, Party.prototype.move = function(tile, formationDirection) {
                    var aliveCharacters = this.getAliveCharacters();
                    if (0 != aliveCharacters.length && (aliveCharacters[0].tile.x != tile.x || aliveCharacters[0].tile.y != tile.y)) {
                        if (!formationDirection) var formationDirection = this.getFormationDirection(this.getLeader().position, this._world.getCoordsAtTile(tile));
                        var formation = this.getFormation(tile, formationDirection);
                        aliveCharacters[0].move(formation[0]);
                        for (var i = 1; i < aliveCharacters.length; i++) {
                            for (var minDistance = -1, fIndex = -1, f = 1; f < formation.length; f++) {
                                var dX = Math.abs(aliveCharacters[i].tile.x - formation[f].x),
                                    dY = Math.abs(aliveCharacters[i].tile.y - formation[f].y),
                                    distance = Math.sqrt(2 * Math.pow(Math.min(dX, dY), 2)) + Math.abs(dX - dY);
                                (distance < minDistance || minDistance == -1) && (fIndex = f, minDistance = distance)
                            }
                            aliveCharacters[i].move(formation[fIndex]), formation.splice(fIndex, 1)
                        }
                        for (var i = 0; i < aliveCharacters.length; i++) 0 == i && aliveCharacters[i].showDestinationHighlight()
                    }
                }, Party.prototype.getFormationDirection = function(startPos, destPos) {
                    var angle = Math.atan2(destPos.y - startPos.y, destPos.x - startPos.x),
                        diagonal = Math.abs(angle * PIXI.RAD_TO_DEG % 90) >= 22.5 && Math.abs(angle * PIXI.RAD_TO_DEG % 90) < 67.5;
                    if (diagonal) var dirX = Math.sign(Math.cos(angle)),
                        dirY = Math.sign(Math.sin(angle));
                    else {
                        var dirX = Math.sign(Math.cos(angle)),
                            dirY = Math.sign(Math.sin(angle));
                        Math.abs(Math.cos(angle)) > Math.abs(Math.sin(angle)) ? dirY = 0 : dirX = 0
                    }
                    return new PIXI.Point(dirX, dirY)
                }, Party.prototype.getFormation = function(tile, dir) {
                    var formation = [new PIXI.Point(tile.x, tile.y)];
                    if (0 == dir.x || 0 == dir.y)
                        for (var count = this._characters.length - 1, charasPerLine = 2; count > 0;) {
                            for (var c = 0; c < charasPerLine; c++) formation.push(new PIXI.Point(tile.x + -2 * (charasPerLine - 1) * dir.x + (-2 * (charasPerLine - 1) + 4 * c) * dir.y, tile.y + (-2 * (charasPerLine - 1) + 4 * c) * dir.x + -2 * (charasPerLine - 1) * dir.y)), count--;
                            charasPerLine++
                        } else
                            for (var count = this._characters.length - 1, charasPerLine = 2; count > 0;) {
                                for (var c = 0; c < charasPerLine; c++) formation.push(new PIXI.Point(tile.x - 3 * (charasPerLine - 1 - c) * dir.x, tile.y - 3 * c * dir.y)), count--;
                                charasPerLine++
                            }
                    for (var i = 0; i < formation.length; i++) this._world.isTileFree(formation[i]) || (formation[i] = this._world.getNearestAvailableTile(formation[i], formation));
                    if (this._world.debug) {
                        this._formationGraphic && this._world.removeChild(this._formationGraphic), this._formationGraphic = new PIXI.Graphics, this._formationGraphic.beginFill(16711680);
                        for (var i = 0; i < formation.length; i++) {
                            var p = this._world.getCoordsAtTile(formation[i]);
                            this._formationGraphic.drawCircle(p.x, p.y, 5)
                        }
                        this._world.addChild(this._formationGraphic)
                    }
                    return formation
                }, Party.prototype.attack = function(enemy) {
                    for (var aliveCharacters = this.getAliveCharacters(), i = 0; i < aliveCharacters.length; i++) aliveCharacters[i].attack(enemy), aliveCharacters[i].hideDestinationHighlight();
                    this._unitAttacked && (this._unitAttacked.hideTargetHighlight(), this._unitAttacked = null), this._unitAttacked = enemy, this._unitAttacked.showTargetHighlight()
                }, Party.prototype.attackLocation = function(location) {
                    for (var aliveCharacters = this.getAliveCharacters(), i = 0; i < aliveCharacters.length; i++) aliveCharacters[i].isUsingSpecialWeapon && aliveCharacters[i].attackLocation(location), aliveCharacters[i].stopMovement(), aliveCharacters[i].hideDestinationHighlight();
                    this._unitAttacked && (this._unitAttacked.hideTargetHighlight(), this._unitAttacked = null)
                }, Party.prototype.stopAttack = function() {
                    for (var i = 0; i < this._characters.length; i++) this._characters[i].stopAttack();
                    this._unitAttacked && (this._unitAttacked.hideTargetHighlight(), this._unitAttacked = null)
                }, Party.prototype.getAveragePosition = function() {
                    for (var p = new PIXI.Point, characters = this.getAliveCharacters(), i = 0; i < characters.length; i++) p.x += characters[i].x, p.y += characters[i].y;
                    return p.x /= characters.length, p.y /= characters.length, p
                }, Party.prototype.getAliveCharacters = function() {
                    for (var characters = [], i = 0; i < this._characters.length; i++) this._characters[i].isAlive && characters.push(this._characters[i]);
                    return characters
                }, Party.prototype.getLeader = function() {
                    for (var i = 0; i < this._characters.length; i++)
                        if (this._characters[i].isAlive) return this._characters[i];
                    return null
                }, Party.prototype.healOverTime = function(percentage, time) {
                    for (var aliveCharacters = this.getAliveCharacters(), i = 0; i < aliveCharacters.length; i++) aliveCharacters[i].healOverTime(percentage * aliveCharacters[i]._healthMax, time)
                }, Party.prototype.stealth = function(time) {
                    for (var aliveCharacters = this.getAliveCharacters(), i = 0; i < aliveCharacters.length; i++) aliveCharacters[i].stealth(time)
                }, Party.prototype.godMode = function() {
                    for (var aliveCharacters = this.getAliveCharacters(), i = 0; i < aliveCharacters.length; i++) aliveCharacters[i]._godMode = !0
                }, Party.prototype.trackShoot = function() {
                    this._world.party._lastShoot = 0
                }, Object.defineProperty(Party.prototype, "isAlive", {
                    get: function() {
                        for (var i = 0; i < this._characters.length; i++)
                            if (this._characters[i].isAlive) return !0;
                        return !1
                    }
                }), Object.defineProperty(Party.prototype, "isWounded", {
                    get: function() {
                        for (var i = 0; i < this._characters.length; i++)
                            if (this._characters[i].isAlive && this._characters[i]._health < this._characters[i]._healthMax) return !0;
                        for (var i = 0; i < this._world.objects.units.ally.length; i++)
                            if (this._world.objects.units.ally[i].canBeHealed && this._world.objects.units.ally[i].isAlive && this._world.objects.units.ally[i]._health < this._world.objects.units.ally[i]._healthMax) return !0;
                        return !1
                    }
                }), Object.defineProperty(Party.prototype, "position", {
                    get: function() {
                        return this.getAveragePosition()
                    }
                }), Object.defineProperty(Party.prototype, "isIdle", {
                    get: function() {
                        for (var i = 0; i < this._characters.length; i++)
                            if (this._characters[i].isAlive && this._characters[i].status != this._characters[i].STATUS_IDLE) return !1;
                        return !0
                    }
                }), Object.defineProperty(Party.prototype, "isSpecialWeaponReady", {
                    get: function() {
                        for (var i = 0; i < this._characters.length; i++)
                            if (this._characters[i].isAlive && this._characters[i].isSpecialWeaponReady) return !0;
                        return !1
                    }
                }), Object.defineProperty(Party.prototype, "canShoot", {
                    get: function() {
                        return this._world.party._lastShoot >= this._world.party._delayShoot
                    }
                })
            }, {
                "../Common": 5
            }
        ],
        55: [
            function(require, module, exports) {
                function SoundEnvironment(world, sound, area) {
                    this._world = world, this._sound = null, this._name = sound, this._area = area, this._isPlaying = !1
                }
                var Common = require("../Common");
                module.exports = SoundEnvironment, SoundEnvironment.prototype.update = function(position) {
                    var isInside = position.x > this._area.x && position.y > this._area.y && position.x < this._area.x + this._area.width && position.y < this._area.y + this._area.height;
                    isInside && !this._isPlaying ? (console.log("Start playing: %s", this._name), this._sound ? this._sound.howl.fade(0, 1, 500, this._sound.id) : this._sound = Common.audio.playSound(this._name, {
                        loop: !0
                    }), this._isPlaying = !0) : !isInside && this._isPlaying && (this._sound.howl.fade(1, 0, 500, this._sound.id), this._isPlaying = !1)
                }, SoundEnvironment.prototype.pause = function() {
                    this._sound && (this._isPlaying ? Common.audio.pauseSound(this._name, this._sound.id) : Common.audio.stopSound(this._name, this._sound.id))
                }, SoundEnvironment.prototype.resume = function() {
                    this._sound && this._isPlaying && Common.audio.resumeSound(this._name, this._sound.id)
                }
            }, {
                "../Common": 5
            }
        ],
        56: [
            function(require, module, exports) {
                function Spawner(world) {
                    GameObject.call(this, world, "spawner"), this._spawn = "", this._countdown = 0, this._countdownMax = Common.config.arcade.difficulty.spawn_delay, this._entities = [], this.sprite = null
                }
                var Common = require("../Common"),
                    GameObject = require("./GameObject"),
                    UnitHostage = require("./UnitHostage"),
                    UnitEscort = require("./UnitEscort"),
                    UnitSoldier = require("./UnitSoldier"),
                    UnitBarrel = require("./UnitBarrel"),
                    UnitCargo = require("./UnitCargo"),
                    UnitDestroyTarget = require("./UnitDestroyTarget"),
                    UnitTurret = require("./UnitTurret"),
                    ItemMission = require("./ItemMission"),
                    ItemMedkit = require("./ItemMedkit"),
                    ItemEscortDestination = require("./ItemEscortDestination"),
                    AirUnitTieFighter = require("./AirUnitTieFighter"),
                    UnitTank = require("./UnitTank");
                module.exports = Spawner, Spawner.prototype = Object.create(GameObject.prototype), Spawner.prototype.constructor = Spawner, Spawner.prototype.init = function(objectData) {
                    this.sprite = new PIXI.Sprite(this._assetManager.getTexture(objectData.image)), this.sprite.anchor.set(.5, .5), this._world.debug && this.addChild(this.sprite), this.x = objectData.position.x + this.sprite.width / 2, this.y = objectData.position.y - this.sprite.height / 2, this._spawn = objectData.spawn, this._countdown = objectData.delay, objectData.countdown > 0 && (this._countdownMax = objectData.countdown), this._start = !1
                }, Spawner.prototype.update = function() {
                    switch (this._spawn) {
                        case "soldier":
                        case "medkit":
                        case "barrel":
                        case "tieFighter":
                        case "turret":
                            0 == this._entities.length && (this._countdown > 0 ? this._countdown -= p3.Timestep.deltaTime : !this._start && this._world.isInsideScreen(this) || (this._start = !1, this._countdown = this._countdownMax, this.spawn()))
                    }
                }, Spawner.prototype.spawn = function() {
                    var units = [];
                    switch (this._spawn) {
                        case "hostage":
                            units.push({
                                unit: new UnitHostage(this._world),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            });
                            var iPattern = p3.Utils.randomInt(0, 1);
                            switch (iPattern) {
                                case 0:
                                    var points = [new PIXI.Point(this.tile.x + 3, this.tile.y + 3), new PIXI.Point(this.tile.x + 3, this.tile.y - 3), new PIXI.Point(this.tile.x - 3, this.tile.y - 3), new PIXI.Point(this.tile.x - 3, this.tile.y + 3)];
                                    break;
                                case 1:
                                    var points = [new PIXI.Point(this.tile.x + 5, this.tile.y), new PIXI.Point(this.tile.x, this.tile.y + 5), new PIXI.Point(this.tile.x - 5, this.tile.y), new PIXI.Point(this.tile.x, this.tile.y - 5)]
                            }
                            units.push({
                                unit: new UnitSoldier(this._world, "patrol", {
                                    patrolPoints: points,
                                    patrolPointIndex: 0,
                                    type: "stormtrooper_off"
                                }),
                                position: points[0]
                            }), units.push({
                                unit: new UnitSoldier(this._world, "patrol", {
                                    patrolPoints: points,
                                    patrolPointIndex: 1
                                }),
                                position: points[1]
                            }), units.push({
                                unit: new UnitSoldier(this._world, "patrol", {
                                    patrolPoints: points,
                                    patrolPointIndex: 2
                                }),
                                position: points[2]
                            }), units.push({
                                unit: new UnitSoldier(this._world, "patrol", {
                                    patrolPoints: points,
                                    patrolPointIndex: 3
                                }),
                                position: points[3]
                            });
                            break;
                        case "escort":
                            units.push({
                                unit: new UnitEscort(this._world),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            });
                            break;
                        case "escortDestination":
                            units.push({
                                unit: new ItemEscortDestination(this._world),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            }), units.push({
                                unit: new UnitSoldier(this._world, "stand", {}),
                                position: new PIXI.Point(this.tile.x - 3, this.tile.y - 1)
                            }), units.push({
                                unit: new UnitSoldier(this._world, "stand", {}),
                                position: new PIXI.Point(this.tile.x + 3, this.tile.y + 1)
                            });
                            break;
                        case "missionItem":
                            units.push({
                                unit: new ItemMission(this._world),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            }), units.push({
                                unit: new UnitSoldier(this._world, "wander", {
                                    type: "stormtrooper_off"
                                }),
                                position: new PIXI.Point(this.tile.x + 5, this.tile.y)
                            }), units.push({
                                unit: new UnitSoldier(this._world, "wander", {}),
                                position: new PIXI.Point(this.tile.x - 5, this.tile.y)
                            }), units.push({
                                unit: new UnitSoldier(this._world, "wander", {}),
                                position: new PIXI.Point(this.tile.x, this.tile.y + 5)
                            }), units.push({
                                unit: new UnitSoldier(this._world, "wander", {}),
                                position: new PIXI.Point(this.tile.x, this.tile.y - 5)
                            });
                            break;
                        case "destroyTarget":
                            for (var i = 0; i < 2; i++) units.push({
                                unit: new UnitDestroyTarget(this._world),
                                position: new PIXI.Point(this.tile.x + p3.Utils.randomInt(-8, 8), this.tile.y + p3.Utils.randomInt(-8, 8))
                            });
                            var iPattern = p3.Utils.randomInt(0, 1);
                            switch (iPattern) {
                                case 0:
                                    units.push({
                                        unit: new UnitSoldier(this._world, "wander", {
                                            type: "stormtrooper_off"
                                        }),
                                        position: new PIXI.Point(this.tile.x, this.tile.y)
                                    });
                                    break;
                                case 1:
                                    var points = [new PIXI.Point(this.tile.x + 4, this.tile.y + 4), new PIXI.Point(this.tile.x + 4, this.tile.y - 4), new PIXI.Point(this.tile.x - 4, this.tile.y - 4), new PIXI.Point(this.tile.x - 4, this.tile.y + 4)];
                                    units.push({
                                        unit: new UnitSoldier(this._world, "patrol", {
                                            patrolPoints: points,
                                            patrolPointIndex: 0
                                        }),
                                        position: points[0]
                                    }), units.push({
                                        unit: new UnitSoldier(this._world, "patrol", {
                                            patrolPoints: points,
                                            patrolPointIndex: 2
                                        }),
                                        position: points[2]
                                    })
                            }
                            break;
                        case "soldier":
                            Math.random() < .05 ? units.push({
                                unit: new UnitSoldier(this._world, "wander", {
                                    type: "stormtrooper_off"
                                }),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            }) : units.push({
                                unit: new UnitSoldier(this._world, "wander", {}),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            });
                            break;
                        case "barrel":
                            units.push({
                                unit: new UnitBarrel(this._world),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            });
                            break;
                        case "medkit":
                            units.push({
                                unit: new ItemMedkit(this._world),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            });
                            break;
                        case "tieFighter":
                            var x = this.tile.x + p3.Utils.randomInt(Math.round(-this._world.mapGridWidth / 3), Math.round(this._world.mapGridWidth / 3));
                            units.push({
                                unit: new AirUnitTieFighter(this._world),
                                position: new PIXI.Point(x, this.tile.y)
                            });
                            break;
                        case "turret":
                            units.push({
                                unit: new UnitTurret(this._world),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            });
                            break;
                        case "cargo":
                            units.push({
                                unit: new UnitCargo(this._world),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            });
                            break;
                        case "tank":
                            units.push({
                                unit: new UnitTank(this._world),
                                position: new PIXI.Point(this.tile.x, this.tile.y)
                            });
                            break;
                        default:
                            console.error("Spawn type %s not defined", this._spawn)
                    }
                    for (var i = 0; i < units.length; i++) {
                        units[i].unit.init(), units[i].unit.spawn(units[i].position), units[i].unit._spawner = this, this._entities.push(units[i].unit);
                        var tl = new TimelineMax;
                        tl.to(units[i].unit, .5, {
                            alpha: units[i].unit.alpha,
                            ease: Linear.easeNone
                        }, 0), Common.animator.add(tl), units[i].unit.alpha = 0
                    }
                    return units
                }, Object.defineProperty(Spawner.prototype, "tile", {
                    get: function() {
                        return this._world.getTileAtCoords(this.x, this.y, !1)
                    }
                })
            }, {
                "../Common": 5,
                "./AirUnitTieFighter": 13,
                "./GameObject": 31,
                "./ItemEscortDestination": 35,
                "./ItemMedkit": 36,
                "./ItemMission": 37,
                "./UnitBarrel": 60,
                "./UnitCargo": 61,
                "./UnitDestroyTarget": 62,
                "./UnitEscort": 63,
                "./UnitHostage": 64,
                "./UnitSoldier": 66,
                "./UnitTank": 67,
                "./UnitTurret": 68
            }
        ],
        57: [
            function(require, module, exports) {
                function TrophyUI() {
                    this._assetManager = p3.AssetManager.instance, PIXI.Container.call(this), this._queue = [], this._active = !1
                }
                var Common = require("../Common");
                require("../Utils");
                module.exports = TrophyUI, TrophyUI.prototype = Object.create(PIXI.Container.prototype), TrophyUI.prototype.constructor = TrophyUI, TrophyUI.prototype.init = function() {
                    this.x = Common.STAGE_WIDTH / 2, this.y = Common.STAGE_HEIGHT / 2 - 200, this._bg = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_score_bg")), this._bg.scale.set(3.25, 3), this._bg.anchor.set(.5), this.addChild(this._bg), this._medalContainer = new PIXI.Container, this._medalContainer.x = -145, this._medalContainer.y = -15, this.addChild(this._medalContainer), this._medalBg = new PIXI.Sprite(p3.AssetManager.instance.getTexture("hub_icon_medal_bg")), this._medalBg.anchor.set(.5), this._medalContainer.addChild(this._medalBg), this._medal = new PIXI.Sprite(p3.AssetManager.instance.getTexture("hub_icon_medal_03")), this._medal.anchor.set(.5), this._medalContainer.addChild(this._medal), this._token = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_token")), this._token.anchor.set(.5), this._token.x = -145, this._token.visible = !1, this.addChild(this._token);
                    var copy = "Title";
                    webfont ? this._title = new PIXI.Text(copy, {
                        fontFamily: "Arial",
                        fontSize: 30,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(copy, {
                        font: "30px Great Escape Stroke",
                        tint: 16777215,
                        align: "left"
                    }), this._title.anchor.set(0, .5), this._title.x = -60, this._title.y = -15, this.addChild(this._title);
                    var copy = "Name";
                    webfont ? this._description = new PIXI.Text(copy, {
                        fontFamily: "Arial",
                        fontSize: 26,
                        fill: 16777215,
                        align: "center"
                    }) : this._description = new PIXI.extras.BitmapText(copy, {
                        font: "26px Great Escape Stroke",
                        tint: 16777215,
                        align: "left"
                    }), this._description.anchor.set(0, .5), this._description.x = this._title.x, this._description.y = this._title.y + 38, this.addChild(this._description), this.scale.set(0)
                }, TrophyUI.prototype.showTrophy = function(id) {
                    var data = Common.savedData.getTrophyData(id),
                        name = p3.AssetManager.instance.getJSON("strings")[data.name][Common.COUNTRY_CODE],
                        icon = data.texture.replace("medals/", "");
                    this._queue.push({
                        title: p3.AssetManager.instance.getJSON("strings").TROPHY_ACHIEVED[Common.COUNTRY_CODE],
                        name: name,
                        icon: icon
                    }), this._active || this.showNextTrophy()
                }, TrophyUI.prototype.showToken = function() {
                    this._queue.push({
                        title: p3.AssetManager.instance.getJSON("strings").TOKEN_ACHIEVED[Common.COUNTRY_CODE],
                        name: p3.AssetManager.instance.getJSON("strings").TOKEN_DESCRIPTION[Common.COUNTRY_CODE],
                        icon: "token"
                    }), this._active || this.showNextTrophy()
                }, TrophyUI.prototype.showNextTrophy = function() {
                    if (0 != this._queue.length) {
                        this._active = !0, this._title.text = this._queue[0].title, this._description.text = this._queue[0].name, "token" == this._queue[0].icon ? (this._token.visible = !0, this._medalContainer.visible = !1) : (this._token.visible = !1, this._medalContainer.visible = !0, this._medal.texture = p3.AssetManager.instance.getTexture(this._queue[0].icon)), this._queue.splice(0, 1);
                        var tl = new TimelineMax({
                            delay: 1,
                            onCompleteScope: this,
                            onComplete: function() {
                                this._active = !1, this.showNextTrophy()
                            }
                        });
                        tl.to(this.scale, .5, {
                            x: 1,
                            y: 1,
                            ease: Back.easeOut
                        }, 0), tl.to(this.scale, .5, {
                            x: 0,
                            y: 0,
                            ease: Back.easeIn
                        }, 3), Common.animator.add(tl), Common.audio.playSound("sfx_r4_achievement_00")
                    }
                }
            }, {
                "../Common": 5,
                "../Utils": 11
            }
        ],
        58: [
            function(require, module, exports) {
                function TutorialLocation(world) {
                    GameObject.call(this, world, "tutorial")
                }
                var GameObject = (require("../Common"), require("./GameObject"));
                module.exports = TutorialLocation, TutorialLocation.prototype = Object.create(GameObject.prototype), TutorialLocation.prototype.constructor = TutorialLocation, TutorialLocation.prototype.init = function(objectData) {
                    this.sprite = new PIXI.Sprite(this._assetManager.getTexture(objectData.image)), this.sprite.anchor.set(.5, .5), this._world.debug && this.addChild(this.sprite), this.x = objectData.position.x + this.sprite.width / 2, this.y = objectData.position.y - this.sprite.height / 2, this.action = objectData.action, this.id = objectData.actionId
                }, TutorialLocation.prototype.update = function() {}, Object.defineProperty(TutorialLocation.prototype, "tile", {
                    get: function() {
                        return this._world.getTileAtCoords(this.x, this.y)
                    }
                })
            }, {
                "../Common": 5,
                "./GameObject": 31
            }
        ],
        59: [
            function(require, module, exports) {
                function Unit(world, type) {
                    GameObject.call(this, world, type), this._isFriendly = !1, this._status = this.STATUS_IDLE, this._health = 10, this._healthMax = 10, this._weapon = !1, this._subWeapon = !1, this._speed = 120, this._accuracy = 1, this._fov = 360, this._attackTarget = null, this._attackLocation = null, this._heals = [], this._godMode = !1, this._immortal = !1, this._canBeAttacked = !0, this._isVehicle = !1, this._spriteContainer = null, this._targetHighlight = null, this._destinationHighlight = null, this._healthBar = null, this._hitHighlightTime = 0, this._hitHighlightTimeMax = .2, this._canBeHealed = !0, this.angle = 0, this.angleTarget = 0, this.angleSpeed = .3, this._spawner = null, this._spawnTile = null, this._path = null, this._pathIndex = 0, this._lastPosition = new PIXI.Point, this._lastFrameMovement = new PIXI.Point, this._score = 0
                }
                var Common = require("../Common"),
                    GameObject = require("./GameObject");
                module.exports = Unit, Unit.prototype = Object.create(GameObject.prototype), Unit.prototype.constructor = Unit, Unit.prototype.STATUS_IDLE = 0, Unit.prototype.STATUS_WALK = 1, Unit.prototype.STATUS_WAIT = 2, Unit.prototype.STATUS_READY = 3, Unit.prototype.STATUS_DEAD = 4, Unit.prototype.init = function() {
                    this._spriteContainer = new PIXI.Container, this.addChild(this._spriteContainer)
                }, Unit.prototype.update = function() {
                    if (GameObject.prototype.update.call(this), this._hitHighlightTime > 0) {
                        this._hitHighlightTime -= p3.Timestep.deltaTime, this._hitHighlightTime = Math.max(0, this._hitHighlightTime);
                        var color = Math.round(255 - this._hitHighlightTime / this._hitHighlightTimeMax * 255).toString(16);
                        1 == color.length && (color = "0" + color), color = "#ff" + color + color, this._sprite.tint = parseInt(color.substring(1), 16)
                    }
                    if (this.healPS && this.healPS.update(p3.Timestep.deltaTime), !this.isDead) {
                        this._weapon && this._weapon.update(), this._attackTarget && (this._attackTarget.isDead || this._attackTarget.isImmortal) && (this.stopAttack(), this.stopMovement());
                        for (var i = this._heals.length - 1; i >= 0; i--) {
                            var deltaTime = p3.Timestep.deltaTime,
                                health = this._heals[i].hps;
                            this._heals[i].time -= p3.Timestep.deltaTime, this._heals[i].time <= 0 && (deltaTime += this._heals[i].time, this._heals.splice(i, 1), this.healPS && 0 == this._heals.length && (this.healPS.emit = !1)), this.heal(health * deltaTime)
                        }
                        switch (this._status) {
                            case this.STATUS_IDLE:
                                if (null != this._attackTarget && this._weapon && this._weapon.canShoot)
                                    if (this.isInRange(this._attackTarget, this._weapon.range) && this.isLineOfSightFree(this._attackTarget)) {
                                        var angleTarget = Math.atan2(this.y - this._attackTarget.y, this._attackTarget.x - this.x),
                                            angleDiff = Math.atan2(Math.sin(angleTarget - this.angle), Math.cos(angleTarget - this.angle));
                                        this.angleTarget = angleTarget, Math.abs(angleDiff) < 10 * PIXI.DEG_TO_RAD && this.shoot(this._attackTarget)
                                    } else {
                                        var result = this.move(this._world.getNearestAvailableTile(this._attackTarget.tile));
                                        result || (this._status = this.STATUS_IDLE)
                                    } else if (null != this._attackLocation) {
                                    var angleTarget = Math.atan2(this.y - this._attackLocation.y, this._attackLocation.x - this.x),
                                        angleDiff = Math.atan2(Math.sin(angleTarget - this.angle), Math.cos(angleTarget - this.angle));
                                    this.angleTarget = angleTarget, Math.abs(angleDiff) < 10 * PIXI.DEG_TO_RAD && (this.shoot(this._attackLocation), this._attackLocation = null)
                                }
                                break;
                            case this.STATUS_WALK:
                            case this.STATUS_WAIT:
                                if (this._weapon && !this._weapon.canOwnerMove) break;
                                var deltaDistance = this._speed * p3.Timestep.deltaTime;
                                this._status = this.STATUS_WALK;
                                var prevPosition = new PIXI.Point(this.x, this.y),
                                    poly = this.getSATShape();
                                for (poly.translate(-this.x, -this.y); deltaDistance > 0 && this._pathIndex > 0;) {
                                    var tileFrom = this._path.tiles[this._pathIndex],
                                        tileTo = this._path.tiles[this._pathIndex - 1],
                                        posFrom = this._world.getCoordsAtTile(tileFrom),
                                        posTo = this._world.getCoordsAtTile(tileTo),
                                        segmentDistance = Math.sqrt(Math.pow(posTo.x - posFrom.x, 2) + Math.pow(posTo.y - posFrom.y, 2)),
                                        doneDistance = Math.sqrt(Math.pow(this.x - posFrom.x, 2) + Math.pow(this.y - posFrom.y, 2)),
                                        percentage = doneDistance / segmentDistance;
                                    if (0 == percentage) {
                                        var unitInTheWay = this._world.getUnitAtTile(tileTo);
                                        if (unitInTheWay && unitInTheWay != this) {
                                            if (this._status = this.STATUS_WAIT, unitInTheWay.status != this.STATUS_WALK && unitInTheWay.status != this.STATUS_WAIT) {
                                                var result = this.move(this._path.tiles[0]);
                                                result || (this._status = this.STATUS_IDLE)
                                            }
                                            break
                                        }
                                    }
                                    var deltaPercentage = deltaDistance / segmentDistance;
                                    percentage += deltaPercentage, percentage >= 1 ? (deltaDistance -= segmentDistance - doneDistance, this._pathIndex--, 0 == this._pathIndex && (this._status = this.STATUS_IDLE, this.hideDestinationHighlight()), this.x = posTo.x, this.y = posTo.y, this._world.occupyTiles(this, [tileTo]), this._attackTarget && this.isInRange(this._attackTarget, this._weapon.range) && this.isLineOfSightFree(this._attackTarget) && (this._status = this.STATUS_IDLE, deltaDistance = 0)) : (deltaDistance = 0, this.x = posFrom.x + (posTo.x - posFrom.x) * percentage, this.y = posFrom.y + (posTo.y - posFrom.y) * percentage, this._world.occupyTiles(this, [tileTo]))
                                }
                                poly.translate(+this.x, +this.y), this.angleTarget = Math.atan2(prevPosition.y - this.y, this.x - prevPosition.x)
                        }
                        var angleDiff = Math.atan2(Math.sin(this.angleTarget - this.angle), Math.cos(this.angleTarget - this.angle));
                        if (isNaN(angleDiff) && (angleDiff = 0), this.angle += angleDiff * this.angleSpeed, this._lastFrameMovement.set((this.x - this._lastPosition.x) / p3.Timestep.deltaTime, (this.y - this._lastPosition.y) / p3.Timestep.deltaTime), this._lastPosition.set(this.x, this.y), this._targetHighlight && this._targetHighlight.visible)
                            for (var i = 0; i < this._targetHighlight.children.length; i++) this._targetHighlight.children[i].rotation += this._targetHighlight.children[i].angularSpeed * p3.Timestep.deltaTime;
                        if (this._destinationHighlight && this._destinationHighlight.visible)
                            for (var i = 0; i < this._destinationHighlight.children.length; i++) this._destinationHighlight.children[i].rotation += this._destinationHighlight.children[i].angularSpeed * p3.Timestep.deltaTime
                    }
                }, Unit.prototype.spawn = function(tile) {
                    this._spawnTile = tile, this._world.isTileFree(this._spawnTile) || (this._spawnTile = this._world.getNearestAvailableTile(this._spawnTile, [])), this.setTilePosition(this._spawnTile), this._world.objects.units[this.type].push(this), this._world.layers.ground.addChild(this)
                }, Unit.prototype.setTilePosition = function(x, y) {
                    if ("undefined" != typeof x.x) var y = x.y,
                        x = x.x;
                    var poly = this.getSATShape();
                    poly.translate(-this.x, -this.y), this.position = this._world.getCoordsAtTile(x, y), this._world.occupyTiles(this, [{
                        x: x,
                        y: y
                    }]), poly.translate(+this.x, +this.y)
                }, Unit.prototype.teleport = function(x, y) {
                    if ("undefined" != typeof x.x) var y = x.y,
                        x = x.x;
                    this._status = this.STATUS_IDLE, this.setTilePosition(x, y)
                }, Unit.prototype.move = function(tileEnd, ignoreUnits) {
                    if (this._status == this.STATUS_WALK) var tileStart = this._path.tiles[this._pathIndex - 1];
                    else var tileStart = this._world.getTileAtCoords(this.x, this.y); if (tileStart.x == tileEnd.x && tileStart.y == tileEnd.y) return !1;
                    var data = this._world.pathfinding(tileStart, tileEnd, ignoreUnits);
                    if (data) {
                        if (this._status == this.STATUS_WALK ? (data.tiles.push(this._path.tiles[this._pathIndex]), this._path = data, this._pathIndex = this._path.tiles.length - 1) : (this._status = this.STATUS_WALK, this._path = data, this._pathIndex = this._path.tiles.length - 1), this._world.debug) {
                            this._pathfindingGraphic && this._pathfindingGraphic.parent.removeChild(this._pathfindingGraphic), this._pathfindingGraphic = new PIXI.Graphics, this._pathfindingGraphic.lineStyle(3, 255, .5);
                            for (var path = [], i = 0; i < data.tiles.length; i++) path.push(this._world.getCoordsAtTile(data.tiles[i].x, data.tiles[i].y));
                            this._pathfindingGraphic.drawShape(new PIXI.Polygon(path)), this._world.layers.path.addChild(this._pathfindingGraphic)
                        }
                        return !0
                    }
                    return this._status == this.STATUS_WALK && (this._path.tiles = [this._path.tiles[this._pathIndex], this._path.tiles[this._pathIndex - 1]], this._pathIndex = 1), !1
                }, Unit.prototype.stopMovement = function() {
                    switch (this._status) {
                        case this.STATUS_IDLE:
                            break;
                        case this.STATUS_WAIT:
                            this._status = this.STATUS_IDLE;
                            break;
                        case this.STATUS_WALK:
                            this._path.tiles = [this._path.tiles[this._pathIndex - 1], this._path.tiles[this._pathIndex]], this._pathIndex = 1
                    }
                    this.hideDestinationHighlight()
                }, Unit.prototype.attack = function(target) {
                    return !!this._weapon && (!target.isDead && (this._attackTarget = target, this.stopMovement(), !0))
                }, Unit.prototype.stopAttack = function() {
                    this._attackTarget = null
                }, Unit.prototype.attackLocation = function(location) {
                    this._weapon && (this._attackLocation = location, this.stopMovement())
                }, Unit.prototype.shoot = function(target) {
                    if (this._weapon && this._weapon.canShoot) {
                        var bullet = this._weapon.shoot(target, this.getBulletSpawnPosition());
                        this._world.objects.bullets.push(bullet), this._world.layers.ground.addChild(bullet)
                    }
                }, Unit.prototype.hit = function(damage) {
                    this.isDead || this.isImmortal || (this._health -= damage, this._health = Math.max(this._godMode ? 1 : 0, this._health), this._hitHighlightTime = this._hitHighlightTimeMax, 0 == this._health ? this.death() : (this.playRandomSound(["sfx_marine_hit_00", "sfx_marine_hit_01", "sfx_marine_hit_02", "sfx_marine_hit_03"]), this.showHealthBar(), this.updateHealthBar()))
                }, Unit.prototype.death = function() {
                    this._status != this.STATUS_DEAD && (this._status = this.STATUS_DEAD, !this.isFriendly && this._score > 0 && this._world.awardPoints(this._score, this.x, this.y - this._sprite.height / 4), this._world.occupyTiles(this, []), this.hideTargetHighlight(), this.hideDestinationHighlight(), this.hideHealthBar(), this._pathfindingGraphic && this._pathfindingGraphic.parent.removeChild(this._pathfindingGraphic), this._world.missionManager.logDeath(this), this.stopSound(), this.healPS && (this.healPS.emit = !1))
                }, Unit.prototype.isLineOfSightFree = function(target) {
                    for (var origin = new SAT.Vector(this.x, this.y), points = [new SAT.Vector(0, 0), new SAT.Vector(target.x - this.x, target.y - this.y)], line = new SAT.Polygon(origin, points), collision = !1, i = 0; i < this._world.objects.static.length; i++)
                        if (this._world.objects.static[i].visible && this._world.objects.static[i].isTall) {
                            var shape = this._world.objects.static[i].getSATShape();
                            if (shape && SAT.testPolygonPolygon(line, shape)) {
                                collision = !0;
                                break
                            }
                        }
                    if (!collision && "player" == this.type)
                        for (var i = 0; i < this._world.objects.units.player.length; i++)
                            if (this._world.objects.units.player[i] != this) {
                                var shape = this._world.objects.units.player[i].getSATShape();
                                if (shape && SAT.testPolygonPolygon(line, shape)) {
                                    collision = !0;
                                    break
                                }
                            }
                    return !collision
                }, Unit.prototype.showTargetHighlight = function() {
                    if (!this._targetHighlight) {
                        this._targetHighlight = new PIXI.Container, this._targetHighlight.scale.set(.5), this.addChildAt(this._targetHighlight, 0);
                        var sprite = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_shot_target_02"));
                        sprite.anchor.set(.5), sprite.angularSpeed = Math.PI / 2, this._targetHighlight.addChild(sprite);
                        var sprite = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_shot_target_01"));
                        sprite.anchor.set(.5), sprite.angularSpeed = 0, this._targetHighlight.addChild(sprite);
                        var sprite = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_shot_target_03"));
                        sprite.anchor.set(.5), sprite.angularSpeed = -Math.PI / 2, this._targetHighlight.addChild(sprite)
                    }
                    this._targetHighlight.visible = !0
                }, Unit.prototype.hideTargetHighlight = function() {
                    this._targetHighlight && (this._targetHighlight.visible = !1)
                }, Unit.prototype.showDestinationHighlight = function() {
                    if (!this._destinationHighlight) {
                        this._destinationHighlight = new PIXI.Container, this._destinationHighlight.scale.set(.7), this._destinationHighlight.alpha = 0, this._world.layers.path.addChild(this._destinationHighlight);
                        var sprite = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_walk_target_01"));
                        sprite.anchor.set(.5), sprite.angularSpeed = Math.PI / 4, this._destinationHighlight.addChild(sprite);
                        var sprite = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_walk_target_02"));
                        sprite.anchor.set(.5), sprite.angularSpeed = -Math.PI / 2, this._destinationHighlight.addChild(sprite), this._destinationHighlight.arrow = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_walk_target_arrow")), this._destinationHighlight.arrow.anchor.set(.5), this._destinationHighlight.arrow.angularSpeed = 0, this._destinationHighlight.addChild(this._destinationHighlight.arrow)
                    }
                    this._destinationHighlight.position = this._world.getCoordsAtTile(this._path.tiles[0]), this._destinationHighlight.arrow.visible = !1;
                    var targetPosition = this._world.missionManager.getNearestTargetPosition();
                    if (null != targetPosition) {
                        var distance = Math.sqrt(Math.pow(targetPosition.y - this._destinationHighlight.y, 2) + Math.pow(targetPosition.x - this._destinationHighlight.x, 2));
                        if (distance > 100) {
                            this._destinationHighlight.arrow.visible = !0;
                            var angle = Math.atan2(targetPosition.y - this._destinationHighlight.y, targetPosition.x - this._destinationHighlight.x) + Math.PI / 2;
                            this._destinationHighlight.arrow.rotation = angle
                        }
                    }
                    this._destinationHighlight.tl && this._destinationHighlight.tl.kill(), this._destinationHighlight.tl = new TimelineMax, this._destinationHighlight.tl.to(this._destinationHighlight, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(this._destinationHighlight.tl)
                }, Unit.prototype.hideDestinationHighlight = function() {
                    this._destinationHighlight && (this._destinationHighlight.tl && this._destinationHighlight.tl.kill(), this._destinationHighlight.tl = new TimelineMax, this._destinationHighlight.tl.to(this._destinationHighlight, .3, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), Common.animator.add(this._destinationHighlight.tl))
                }, Unit.prototype.setHealth = function(hp) {
                    this.isFriendly || (hp *= this._world.healthMulti), this._healthMax = Math.round(hp), this._health = this._healthMax
                }, Unit.prototype.healOverTime = function(hp, time) {
                    this._heals.push({
                        hps: hp / time,
                        time: time
                    }), this.healPS || (this.healPS = new PIXI.particles.Emitter(this, [this._assetManager.getTexture("ui_icon_health_radar")], this._assetManager.getJSON("particle_health_01"))), this.healPS.emit = !0
                }, Unit.prototype.heal = function(hp) {
                    this._health += hp, this._health = Math.min(this._healthMax, this._health), this.updateHealthBar()
                }, Unit.prototype.showHealthBar = function() {
                    if (!this._healthBar) {
                        var width = 31,
                            height = 4;
                        this._healthBar = new PIXI.Container, this._healthBar.x = -Math.floor(width / 2), this._healthBar.y = -40, this.addChild(this._healthBar), this._healthBar._container = new PIXI.Graphics, this._healthBar._container.beginFill(0, 1), this._healthBar._container.drawRect(-1, -1, width + 2, height + 2), this._healthBar.addChild(this._healthBar._container);
                        var color = 16711680;
                        "player" == this.type || "ally" == this.type ? color = 8513319 : "destructible" == this.type && (color = 8421504), this._healthBar._bar = new PIXI.Graphics, this._healthBar._bar.beginFill(color, 1), this._healthBar._bar.drawRect(0, 0, width, height), this._healthBar.addChild(this._healthBar._bar)
                    }
                    this._healthBar.visible = !0
                }, Unit.prototype.hideHealthBar = function() {
                    this._healthBar && (this._healthBar.visible = !1)
                }, Unit.prototype.updateHealthBar = function() {
                    this._healthBar && (this._healthBar._bar.scale.x = this._health / this._healthMax)
                }, Unit.prototype.getMovementDirection = function() {
                    return this._lastFrameMovement
                }, Unit.prototype.getBulletSpawnPosition = function() {
                    return new PIXI.Point(this.x, this.y)
                }, Unit.prototype.getCollisionMaskTiles = function() {}, Unit.prototype.swapWeapon = function() {
                    if (this._subWeapon) {
                        var wTemp = this._weapon;
                        this._weapon = this._subWeapon, this._weapon._cooldown = 0, this._subWeapon = wTemp
                    }
                }, Unit.prototype.removeFromScene = function(time, callback) {
                    if (time = "undefined" == typeof time ? 0 : parseFloat(time), time <= 0) {
                        var index = this._world.objects.units[this.type].indexOf(this);
                        if (index != -1) {
                            if ("function" == typeof callback && callback(), this._world.objects.units[this.type].splice(index, 1), this.parent && this.parent.removeChild(this), this._world.occupyTiles(this, []), this._spawner) {
                                var spawnerIndex = this._spawner._entities.indexOf(this);
                                spawnerIndex != -1 ? this._spawner._entities.splice(spawnerIndex, 1) : console.error("Index not found")
                            }
                        } else console.error("Unit, removeFromScene failed: Index not found %i", index), console.log(this)
                    } else {
                        new TimelineMax({
                            delay: time,
                            onStartScope: this,
                            onStart: function() {
                                this.removeFromScene(0, callback)
                            }
                        })
                    }
                }, Object.defineProperty(Unit.prototype, "status", {
                    get: function() {
                        return this._status
                    }
                }), Object.defineProperty(Unit.prototype, "totalAccuracy", {
                    get: function() {
                        return Math.max(Math.min(1, this._accuracy * this._weapon._accuracy), 0)
                    }
                }), Object.defineProperty(Unit.prototype, "isAlive", {
                    get: function() {
                        return this._health > 0
                    }
                }), Object.defineProperty(Unit.prototype, "isDead", {
                    get: function() {
                        return this._health <= 0
                    }
                }), Object.defineProperty(Unit.prototype, "isFriendly", {
                    get: function() {
                        return this._isFriendly
                    }
                }), Object.defineProperty(Unit.prototype, "isImmortal", {
                    get: function() {
                        return this._immortal
                    }
                }), Object.defineProperty(Unit.prototype, "isVehicle", {
                    get: function() {
                        return this._isVehicle
                    }
                }), Object.defineProperty(Unit.prototype, "canBeAttacked", {
                    get: function() {
                        return this._canBeAttacked && !this._immortal
                    }
                }), Object.defineProperty(Unit.prototype, "canBeHealed", {
                    get: function() {
                        return this._canBeHealed
                    }
                }), Object.defineProperty(Unit.prototype, "tile", {
                    get: function() {
                        return this._status == this.STATUS_WALK && this._path ? this._path.tiles[this._pathIndex - 1] : this._world.getTileAtCoords(this.x, this.y)
                    }
                })
            }, {
                "../Common": 5,
                "./GameObject": 31
            }
        ],
        60: [
            function(require, module, exports) {
                function UnitBarrel(world, params) {
                    Unit.call(this, world, "destructible"), this._score = Common.config.arcade.units.barrel.score, this._explosionDamage = Common.config.arcade.units.barrel.explosion_damage, this._explosionRadius = Common.config.arcade.units.barrel.explosion_radius, this.setHealth(Common.config.arcade.units.barrel.health), this._parameters = $.extend(this._parameters, params)
                }
                var Common = require("../Common"),
                    Unit = require("./Unit");
                module.exports = UnitBarrel, UnitBarrel.prototype = Object.create(Unit.prototype), UnitBarrel.prototype.constructor = UnitBarrel, UnitBarrel.prototype.init = function() {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(-this._world.mapTileSize / 2, -this._world.mapTileSize / 2, this._world.mapTileSize, this._world.mapTileSize), this._clickCollisionMask = new PIXI.Circle(0, 0, 1.5 * this._world.mapTileSize), this._world.debug && (this._clickGraphic = new PIXI.Graphics, this._clickGraphic.lineStyle(3, 16711680), this._clickGraphic.drawCircle(this._clickCollisionMask.x, this._clickCollisionMask.y, this._clickCollisionMask.radius), this.addChild(this._clickGraphic), this.drawCollision()), Unit.prototype.init.call(this), this._sprite || (this._sprite = new PIXI.Sprite(this._assetManager.getTexture("ui_icon_destructible_01")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite)), this._sprite.scale.set(p3.Utils.randomRange(.7, .9)), this._sprite.alpha = 1, this.showHealthBar()
                }, UnitBarrel.prototype.update = function() {}, UnitBarrel.prototype.hit = function(damage) {
                    Unit.prototype.hit.call(this, damage)
                }, UnitBarrel.prototype.death = function() {
                    if (this._status != this.STATUS_DEAD) {
                        Unit.prototype.death.call(this), this._sprite.alpha = 0;
                        var explosion = this._world.objectManager.generate("effectExplosion");
                        explosion.play(this.x, this.y, ["sfx_barrel_explode_00"]);
                        new TimelineMax({
                            delay: .1,
                            onStartScope: this,
                            onStart: function() {
                                this._world.damageArea(new PIXI.Point(this.x, this.y), this._explosionRadius * this._world.mapTileSize, this._explosionDamage)
                            }
                        });
                        this._world.shake(.5, new PIXI.Point(15, 15)), this.removeFromScene(.5)
                    }
                }, UnitBarrel.prototype.isClicked = function(clickPos) {
                    return Math.sqrt(Math.pow(this.x - clickPos.x, 2) + Math.pow(this.y - clickPos.y, 2)) <= this._clickCollisionMask.radius
                }
            }, {
                "../Common": 5,
                "./Unit": 59
            }
        ],
        61: [
            function(require, module, exports) {
                function UnitCargo(world, params) {
                    Unit.call(this, world, "ally"), this._culling = !1, this._damage = Common.config.arcade.units.cargo.explosion_damage, this._radius = Common.config.arcade.units.cargo.explosion_radius, this.setHealth(Common.config.arcade.units.cargo.health), this._immortal = !0, this._isFriendly = !0, this._canBeHealed = !1, this._parameters = $.extend(this._parameters, params)
                }
                var Common = require("../Common"),
                    Unit = require("./Unit");
                module.exports = UnitCargo, UnitCargo.prototype = Object.create(Unit.prototype), UnitCargo.prototype.constructor = UnitCargo, UnitCargo.prototype.init = function() {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(1.9 * -this._world.mapTileSize, 1.4 * -this._world.mapTileSize, 3.8 * this._world.mapTileSize, 2.8 * this._world.mapTileSize), this._activationCollisionMask = new PIXI.Circle(0, 0, 6 * this._world.mapTileSize), this._world.debug && (this._activationGraphic = new PIXI.Graphics, this._activationGraphic.lineStyle(3, 16711680), this._activationGraphic.drawCircle(this.x, this.y, this._activationCollisionMask.radius), this.addChild(this._activationGraphic), this.drawCollision()), Unit.prototype.init.call(this), this._sprite || (this._sprite = new PIXI.Sprite(this._assetManager.getTexture("env_00_orange_crate_02")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite)), this._sprite.alpha = 1, this.showHealthBar()
                }, UnitCargo.prototype.update = function() {
                    Unit.prototype.update.call(this)
                }, UnitCargo.prototype.spawn = function(position) {
                    Unit.prototype.spawn.call(this, position), this.showGoalHighlight();
                    for (var tiles = this._world.getSATShapeTiles(this), t = 0; t < tiles.length; t++) {
                        var unit = this._world.getUnitAtTile(tiles[t]);
                        unit != this && unit && "undefined" != typeof unit.teleport && unit.teleport(this._world.getNearestAvailableTile(unit.tile, tiles))
                    }
                    this._world.occupyTiles(this, tiles)
                }, UnitCargo.prototype.hit = function(damage) {
                    Unit.prototype.hit.call(this, damage)
                }, UnitCargo.prototype.death = function() {
                    if (this._status != this.STATUS_DEAD) {
                        Unit.prototype.death.call(this), this.hideGoalHighlight(), this._sprite.alpha = 0;
                        var explosion = this._world.objectManager.generate("effectExplosionBig");
                        explosion.play(this.x, this.y, ["sfx_barrel_explode_00"]);
                        new TimelineMax({
                            delay: .1,
                            onStartScope: this,
                            onStart: function() {
                                this._world.damageArea(new PIXI.Point(this.x, this.y), this._radius * this._world.mapTileSize, this._damage)
                            }
                        });
                        this._world.shake(.5, new PIXI.Point(15, 15)), this.removeFromScene(.5)
                    }
                }, UnitCargo.prototype.rescued = function() {
                    this._immortal = !0, this.hideGoalHighlight(), this.removeFromScene(1);
                    var tl = new TimelineMax;
                    tl.to(this, .5, {
                        alpha: 0,
                        ease: Linear.easeNone
                    }, .5), Common.animator.add(tl)
                }, UnitCargo.prototype.isClicked = function(clickPos) {
                    return !1
                }
            }, {
                "../Common": 5,
                "./Unit": 59
            }
        ],
        62: [
            function(require, module, exports) {
                function UnitDestroyTarget(world, params) {
                    Unit.call(this, world, "destructible"), this._parameters = $.extend(this._parameters, params), this._score = Common.config.arcade.units.destroy_target.score, this._explosionDamage = Common.config.arcade.units.destroy_target.explosion_damage, this._explosionRadius = Common.config.arcade.units.destroy_target.explosion_radius, this.setHealth(Common.config.arcade.units.destroy_target.health), this._mission = !0
                }
                var Common = require("../Common"),
                    Unit = require("./Unit");
                require("./EffectExplosion");
                module.exports = UnitDestroyTarget, UnitDestroyTarget.prototype = Object.create(Unit.prototype), UnitDestroyTarget.prototype.constructor = UnitDestroyTarget, UnitDestroyTarget.prototype.init = function() {
                    if (this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(.9 * -this._world.mapTileSize, .9 * -this._world.mapTileSize, 1.8 * this._world.mapTileSize, 1.8 * this._world.mapTileSize), this._clickCollisionMask = new PIXI.Circle(0, 0, 1.5 * this._world.mapTileSize), this._world.debug && (this._clickGraphic = new PIXI.Graphics, this._clickGraphic.lineStyle(3, 16711680), this._clickGraphic.drawCircle(this._clickCollisionMask.x, this._clickCollisionMask.y, this._clickCollisionMask.radius), this.addChild(this._clickGraphic), this.drawCollision()), Unit.prototype.init.call(this), !this._sprite) {
                        var index = p3.Utils.randomInt(0, 3);
                        switch (index) {
                            case 0:
                                this._sprite = new PIXI.Sprite(this._assetManager.getTexture("env_00_enemy_beacon_01")), this._sprite.scale.set(.8), this._sprite.y += 30;
                                break;
                            case 1:
                                this._sprite = new PIXI.Sprite(this._assetManager.getTexture("env_00_enemy_store_01")), this._sprite.scale.set(.5), this._sprite.x += 5, this._sprite.y += 70;
                                break;
                            case 2:
                                this._sprite = new PIXI.Sprite(this._assetManager.getTexture("env_00_enemy_dish_01")), this._sprite.scale.set(.6), this._sprite.x += 5, this._sprite.y += 15;
                                break;
                            case 3:
                                this._sprite = new PIXI.Sprite(this._assetManager.getTexture("env_00_enemy_dish_02")), this._sprite.scale.set(.6), this._sprite.x += 5, this._sprite.y += 15
                        }
                        this._sprite.anchor.set(.5, 1), this._spriteContainer.addChild(this._sprite)
                    }
                    this._sprite.alpha = 1
                }, UnitDestroyTarget.prototype.spawn = function(position) {
                    Unit.prototype.spawn.call(this, position), this.showGoalHighlight()
                }, UnitDestroyTarget.prototype.update = function() {
                    this._culling && !this.visible || Unit.prototype.update.call(this)
                }, UnitDestroyTarget.prototype.hit = function(damage) {
                    Unit.prototype.hit.call(this, damage)
                }, UnitDestroyTarget.prototype.death = function() {
                    if (this._status != this.STATUS_DEAD) {
                        Unit.prototype.death.call(this), this._sprite.alpha = 0;
                        var explosion = this._world.objectManager.generate("effectExplosion");
                        explosion.play(this.x, this.y, ["sfx_explosion_target_00", "sfx_explosion_target_01", "sfx_explosion_target_03", "sfx_explosion_target_04"]);
                        var smoke = this._world.objectManager.generate("effectSmoke");
                        smoke.play(this.x, this.y);
                        new TimelineMax({
                            delay: .1,
                            onStartScope: this,
                            onStart: function() {
                                this._world.damageArea(new PIXI.Point(this.x, this.y), this._explosionRadius * this._world.mapTileSize, this._explosionDamage)
                            }
                        });
                        this._world.shake(.5, new PIXI.Point(15, 15)), this.hideGoalHighlight(), this.removeFromScene(.5)
                    }
                }, UnitDestroyTarget.prototype.isClicked = function(clickPos) {
                    return Math.sqrt(Math.pow(this.x - clickPos.x, 2) + Math.pow(this.y - clickPos.y, 2)) <= this._clickCollisionMask.radius
                }
            }, {
                "../Common": 5,
                "./EffectExplosion": 25,
                "./Unit": 59
            }
        ],
        63: [
            function(require, module, exports) {
                function UnitEscort(world) {
                    Unit.call(this, world, "ally"), this._isFriendly = !0, this._hasBeenEscorted = !1, this._immortal = !0, this.setHealth(Common.config.arcade.units.escort.health), this._score = Common.config.arcade.missions.escort.score, this.angle = 2 * Math.random() * Math.PI, this.angleTarget = this.angle, this._activated = !1, this._speed = Common.config.arcade.units.escort.speed, this._turnCooldown = 0, this._isWalking = !1, this._destination = null, this.animation = {
                        name: "willix_pilot",
                        time: 0,
                        status: "idle",
                        loop: !0,
                        angle: "000"
                    }, this.animations = {
                        idle: {
                            code: "idl",
                            frames: 4,
                            time: 1,
                            loop: !0
                        },
                        walk: {
                            code: "wal",
                            frames: 4,
                            time: .75,
                            loop: !0
                        },
                        death: {
                            code: "die",
                            frames: 4,
                            time: .5,
                            loop: !1
                        }
                    }
                }
                var Common = require("../Common"),
                    Unit = require("./Unit");
                module.exports = UnitEscort, UnitEscort.prototype = Object.create(Unit.prototype), UnitEscort.prototype.constructor = UnitEscort, UnitEscort.prototype.init = function() {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(1.4 * -this._world.mapTileSize, 1.4 * -this._world.mapTileSize, 2.8 * this._world.mapTileSize, 2.8 * this._world.mapTileSize), this._threatCollisionMask = new PIXI.Circle(0, 0, Common.config.arcade.units.escort.threat_radius * this._world.mapTileSize), this._rescueCollisionMask = new PIXI.Circle(0, 0, Common.config.arcade.units.escort.rescue_radius * this._world.mapTileSize), this._activationCollisionMask = new PIXI.Circle(0, 0, 6 * this._world.mapTileSize), this._world.debug && (this._threatGraphic = new PIXI.Graphics, this._threatGraphic.lineStyle(3, 16711680), this._threatGraphic.drawCircle(this._threatCollisionMask.x, this._threatCollisionMask.y, this._threatCollisionMask.radius), this.addChild(this._threatGraphic), this._rescueGraphic = new PIXI.Graphics, this._rescueGraphic.lineStyle(3, 65280), this._rescueGraphic.drawCircle(this._rescueCollisionMask.x, this._rescueCollisionMask.y, this._rescueCollisionMask.radius), this.addChild(this._rescueGraphic), this.drawCollision()), Unit.prototype.init.call(this), this._shadow = new PIXI.Sprite(this._assetManager.getTexture("marine_shadow_00")), this._shadow.anchor.set(.5), this._shadow.y -= 5, this._spriteContainer.addChild(this._shadow), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("willix_pilot_ild_270_00")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite), this.showHealthBar()
                }, UnitEscort.prototype.spawn = function(position) {
                    Unit.prototype.spawn.call(this, position), this.showGoalHighlight()
                }, UnitEscort.prototype.update = function() {
                    if (!this._culling || this.visible) {
                        if (Unit.prototype.update.call(this), !this._hasBeenEscorted) {
                            var partyMembers = this._world.party.getAliveCharacters();
                            if (this.isInRange(partyMembers, this._activated ? this._rescueCollisionMask.radius : this._activationCollisionMask.radius)) {
                                this._activated || (this._activated = !0, this._immortal = !1, this._destination.showGoalHighlight());
                                for (var enemies = [], i = 0; i < this._world.objects.units.enemy.length; i++) this._world.objects.units.enemy[i].isDead || enemies.push(this._world.objects.units.enemy[i]);
                                this.isInRange(enemies, this._threatCollisionMask.radius) ? this.stop() : this.walk()
                            } else this.stop();
                            this._world.party.isAlive && !this._isWalking ? (this._turnCooldown -= p3.Timestep.deltaTime, this._turnCooldown <= 0 && (this.angleTarget = Math.atan2(this.y - this._world.party.getLeader().y, this._world.party.getLeader().x - this.x), this._turnCooldown = p3.Utils.randomRange(1.5, 3))) : this.isInRange(this._destination, this._destination._pickupCollisionMask.radius) && this.targetReached()
                        }
                        var nextStatus = "";
                        switch (this.status) {
                            case this.STATUS_IDLE:
                            case this.STATUS_WAIT:
                            case this.STATUS_READY:
                            default:
                                nextStatus = "idle";
                                break;
                            case this.STATUS_WALK:
                                nextStatus = "walk";
                                break;
                            case this.STATUS_DEAD:
                                nextStatus = "death"
                        }
                        nextStatus != this.animation.status ? (this.animation.status = nextStatus, this.animation.time = 0, this.animation.loop = this.animations[this.animation.status].loop, "walk" == nextStatus ? (this.stopSound("sfx_runsand_00"), this.playSound("sfx_walk_sand_00", {
                            loop: !0
                        })) : (this.stopSound("sfx_walk_sand_00"), this.stopSound("sfx_runsand_00"))) : (this.animation.time += p3.Timestep.deltaTime, this.animation.loop ? this.animation.time %= this.animations[this.animation.status].time : this.animation.time = Math.min(this.animation.time, this.animations[this.animation.status].time - .01));
                        var angle = this.angle * PIXI.RAD_TO_DEG;
                        angle = Math.fmod(45 * Math.floor((angle + 22.5) / 45), 360);
                        var str = "" + angle,
                            pad = "000";
                        this.animation.angle = pad.substring(0, pad.length - str.length) + str;
                        var index = Math.floor(this.animation.time / this.animations[this.animation.status].time * this.animations[this.animation.status].frames),
                            str = "" + index,
                            pad = "00",
                            index = pad.substring(0, pad.length - str.length) + str;
                        this._sprite.texture = this._assetManager.getTexture(this.animation.name + "_" + this.animations[this.animation.status].code + "_" + this.animation.angle + "_" + index), this._spriteContainer.rotation = angle * PIXI.DEG_TO_RAD - this.angle
                    }
                }, UnitEscort.prototype.setDestination = function(destination) {
                    this._destination = destination
                }, UnitEscort.prototype.walk = function() {
                    this._isWalking || (this._isWalking = !0, this.move(this._world.getNearestAvailableTile(this._destination.tile)))
                }, UnitEscort.prototype.stop = function() {
                    this._isWalking && (this._isWalking = !1, this.stopMovement())
                }, UnitEscort.prototype.targetReached = function() {
                    if (!this._hasBeenEscorted) {
                        this._hasBeenEscorted = !0, this._immortal = !0, this.stopMovement(), this._world.awardPoints(this._score, this.x, this.y - this._sprite.height / 4), this._destination.pickup(), this.removeFromScene(1);
                        var tl = new TimelineMax;
                        tl.to(this, .5, {
                            alpha: 0,
                            ease: Linear.easeNone
                        }, .5), Common.animator.add(tl), this.hideGoalHighlight();
                        var tl = new TimelineMax({
                            delay: 1.5,
                            onStartScope: this,
                            onStart: function() {
                                this._world.missionManager.missionComplete()
                            }
                        })
                    }
                }, UnitEscort.prototype.death = function() {
                    if (this._status != this.STATUS_DEAD) {
                        Unit.prototype.death.call(this), this.hideGoalHighlight(), this._sprite.alpha = 0;
                        var explosion = this._world.objectManager.generate("effectExplosion");
                        explosion.play(this.x, this.y, ["sfx_barrel_explode_00"]), this.removeFromScene(.5), this._world.missionManager.missionFailed()
                    }
                }, Object.defineProperty(UnitEscort.prototype, "hasBeenEscorted", {
                    get: function() {
                        return this._hasBeenEscorted
                    }
                })
            }, {
                "../Common": 5,
                "./Unit": 59
            }
        ],
        64: [
            function(require, module, exports) {
                function UnitHostage(world) {
                    Unit.call(this, world, "hostage"), this._isFriendly = !0, this._hasBeenSaved = !1, this._score = Common.config.arcade.missions.hostage.score, this.angle = 2 * Math.random() * Math.PI, this.angleTarget = this.angle, this.turnCooldown = 0, this.animation = {
                        name: "willix_pilot",
                        time: 0,
                        status: "idle",
                        loop: !0,
                        angle: "000"
                    }, this.animations = {
                        idle: {
                            code: "idl",
                            frames: 4,
                            time: 1,
                            loop: !0
                        }
                    }
                }
                var Common = require("../Common"),
                    Unit = require("./Unit");
                module.exports = UnitHostage, UnitHostage.prototype = Object.create(Unit.prototype), UnitHostage.prototype.constructor = UnitHostage, UnitHostage.prototype.init = function() {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(-this._world.mapTileSize / 2, -this._world.mapTileSize / 2, this._world.mapTileSize, this._world.mapTileSize), this._threatCollisionMask = new PIXI.Circle(0, 0, 12 * this._world.mapTileSize), this._rescueCollisionMask = new PIXI.Circle(0, 0, 4 * this._world.mapTileSize), this._world.debug && (this._threatGraphic = new PIXI.Graphics, this._threatGraphic.lineStyle(3, 16711680), this._threatGraphic.drawCircle(this._threatCollisionMask.x, this._threatCollisionMask.y, this._threatCollisionMask.radius), this.addChild(this._threatGraphic), this._rescueGraphic = new PIXI.Graphics, this._rescueGraphic.lineStyle(3, 65280), this._rescueGraphic.drawCircle(this._rescueCollisionMask.x, this._rescueCollisionMask.y, this._rescueCollisionMask.radius), this.addChild(this._rescueGraphic), this.drawCollision()), Unit.prototype.init.call(this), this._shadow = new PIXI.Sprite(this._assetManager.getTexture("marine_shadow_00")), this._shadow.anchor.set(.5), this._spriteContainer.addChild(this._shadow), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("willix_pilot_ild_270_00")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite)
                }, UnitHostage.prototype.spawn = function(position) {
                    Unit.prototype.spawn.call(this, position), this.showGoalHighlight()
                }, UnitHostage.prototype.update = function() {
                    if (!this._culling || this.visible) {
                        if (Unit.prototype.update.call(this), !this._hasBeenSaved) {
                            var partyMembers = this._world.party.getAliveCharacters();
                            if (this.isInRange(partyMembers, this._rescueCollisionMask.radius)) {
                                for (var enemies = [], i = 0; i < this._world.objects.units.enemy.length; i++) this._world.objects.units.enemy[i].isDead || enemies.push(this._world.objects.units.enemy[i]);
                                this.isInRange(enemies, this._threatCollisionMask.radius) || this.rescued()
                            }
                        }
                        this._world.party.isAlive && (this.turnCooldown -= p3.Timestep.deltaTime, this.turnCooldown <= 0 && (this.angleTarget = Math.atan2(this.y - this._world.party.getLeader().y, this._world.party.getLeader().x - this.x), this.turnCooldown = p3.Utils.randomRange(1.5, 3))), this.animation.time += p3.Timestep.deltaTime, this.animation.loop ? this.animation.time %= this.animations[this.animation.status].time : this.animation.time = Math.min(this.animation.time, this.animations[this.animation.status].time - .01);
                        var angle = this.angle * PIXI.RAD_TO_DEG;
                        angle = Math.fmod(45 * Math.floor((angle + 22.5) / 45), 360);
                        var str = "" + angle,
                            pad = "000";
                        this.animation.angle = pad.substring(0, pad.length - str.length) + str;
                        var index = Math.floor(this.animation.time / this.animations[this.animation.status].time * this.animations[this.animation.status].frames),
                            str = "" + index,
                            pad = "00",
                            index = pad.substring(0, pad.length - str.length) + str;
                        this._sprite.texture = this._assetManager.getTexture(this.animation.name + "_" + this.animations[this.animation.status].code + "_" + this.animation.angle + "_" + index), this._spriteContainer.rotation = angle * PIXI.DEG_TO_RAD - this.angle
                    }
                }, UnitHostage.prototype.rescued = function() {
                    if (!this._hasBeenSaved) {
                        this._hasBeenSaved = !0, this._world.awardPoints(this._score, this.x, this.y - this._sprite.height / 4), this.removeFromScene(.5);
                        var tl = new TimelineMax;
                        tl.to(this, .5, {
                            alpha: 0,
                            ease: Linear.easeNone
                        }, 0), Common.animator.add(tl), this.hideGoalHighlight()
                    }
                }, Object.defineProperty(UnitHostage.prototype, "hasBeenSaved", {
                    get: function() {
                        return this._hasBeenSaved
                    }
                })
            }, {
                "../Common": 5,
                "./Unit": 59
            }
        ],
        65: [
            function(require, module, exports) {
                function UnitPlayer(world) {
                    Unit.call(this, world, "player"), this._isFriendly = !0, this._stealthTime = 0, this._deathFadeOutDelay = 4.5, this._deathFadeOutDuration = .5, this._ability = {
                        type: null,
                        charge: 0,
                        chargeTime: 1,
                        justRecharged: !1,
                        decharge: !1,
                        dechargetTime: 0,
                        medicPower: Common.config.arcade.abilities.medic.health,
                        medicTime: Common.config.arcade.abilities.medic.time,
                        stealthTime: Common.config.arcade.abilities.stealth.time,
                        airstrikeTime: Common.config.arcade.abilities.airstrike.time,
                        cooldown: {
                            stealth: Common.config.arcade.abilities.stealth.cooldown,
                            rocket: Common.config.arcade.abilities.rocket.cooldown,
                            hacker: Common.config.arcade.abilities.hacker.cooldown,
                            sniper: Common.config.arcade.abilities.sniper.cooldown,
                            airstrike: Common.config.arcade.abilities.airstrike.cooldown,
                            granade: Common.config.arcade.abilities.granade.cooldown,
                            medic: Common.config.arcade.abilities.medic.cooldown
                        }
                    }, this.angle = -Math.PI / 2, this.angleTarget = this.angle, this.animation = {
                        name: "marine_air",
                        time: 0,
                        status: "idle",
                        loop: !0,
                        angle: "000"
                    }, this.animations = {
                        idle: {
                            code: "idl",
                            frames: 4,
                            time: 1,
                            loop: !0
                        },
                        run: {
                            code: "run",
                            frames: 8,
                            time: .8,
                            loop: !0
                        },
                        death: {
                            code: "die",
                            frames: 4,
                            time: .5,
                            loop: !1
                        },
                        attack: {
                            code: "sho",
                            frames: 4,
                            time: 1,
                            loop: !1
                        },
                        special: {
                            code: "spe",
                            frames: 4,
                            time: 1,
                            loop: !1
                        }
                    }, this._abilityIcons = {
                        stealth: "ui_ingame_char_icon_1",
                        rocket: "ui_ingame_char_icon_2",
                        hacker: "ui_ingame_char_icon_3",
                        sniper: "ui_ingame_char_icon_4",
                        airstrike: "ui_ingame_char_icon_5",
                        bomber: "ui_ingame_char_icon_6",
                        granade: "ui_ingame_char_icon_6",
                        medic: "ui_ingame_char_icon_7"
                    }, this._portraits = {
                        girl: "ui_ingame_char_1",
                        k2so: "ui_ingame_char_2",
                        willix: "ui_ingame_char_3",
                        cina: "ui_ingame_char_4",
                        baze: "ui_ingame_char_5",
                        marine_hea: "ui_ingame_char_A",
                        marine_air: "ui_ingame_char_A",
                        marine_tec: "ui_ingame_char_A",
                        marine_cra: "ui_ingame_char_A",
                        marine_bom: "ui_ingame_char_A",
                        marine_med: "ui_ingame_char_A"
                    }
                }
                var Common = require("../Common"),
                    Unit = require("./Unit"),
                    AirUnitXWing = require("./AirUnitXWing"),
                    Weapon = require("./Weapon");
                module.exports = UnitPlayer, UnitPlayer.prototype = Object.create(Unit.prototype), UnitPlayer.prototype.constructor = UnitPlayer, UnitPlayer.prototype.init = function(config) {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(-8, -8, 16, 16), this._world.debug && this.drawCollision(), Unit.prototype.init.call(this), this._shadow = new PIXI.Sprite(this._assetManager.getTexture("marine_shadow_00")), this._shadow.anchor.set(.5), this._shadow.y -= 5, this._spriteContainer.addChild(this._shadow), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("char_troop_00_000_00")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite), "undefined" != typeof config.sprite && (this.animation.name = config.sprite), "undefined" != typeof config.speed && (this._speed = config.speed), "undefined" != typeof config.accuracy && (this._accuracy = config.accuracy), "undefined" != typeof config.health && this.setHealth(config.health), "undefined" != typeof config.ability && (this._ability.type = config.ability, this._ability.chargeTime = this._ability.cooldown[this._ability.type]), config.weapon && (this._weapon = config.weapon, this._weapon.init(this)), config.subWeapon && (this._subWeapon = config.subWeapon, this._subWeapon.init(this), this._subWeapon._type == Weapon.GRANADE && (this.animations.special = this.animations.idle)), this.showHealthBar()
                }, UnitPlayer.prototype.update = function() {
                    Unit.prototype.update.call(this), this._ability.justRecharged && (this._ability.justRecharged = !1), this.isAlive && (this._ability.decharge ? 0 != this._ability.dechargeTime && (this._ability.charge -= p3.Timestep.deltaTime / this._ability.dechargeTime, this._ability.charge <= 0 && (this._ability.charge = 0, this._ability.decharge = !1, this.endAbility())) : this._ability.charge < 1 && (this._world.settings.lockSkills && this._world.settings.lockSkillExceptions.indexOf(this._ability.type) == -1 || (this._ability.charge += p3.Timestep.deltaTime / this._ability.chargeTime, this._ability.charge >= 1 && (this._ability.charge = 1, this._ability.justRecharged = !0)))), this._stealthTime && (this._stealthTime -= p3.Timestep.deltaTime, this._stealthTime <= 0 && this.stealthEnd());
                    var nextStatus = "";
                    switch (this.status) {
                        case this.STATUS_IDLE:
                        case this.STATUS_WAIT:
                        case this.STATUS_READY:
                        default:
                            this._weapon.hasJustShoot ? (this.isAbilityOn && this.hideAbilityGlow(), nextStatus = this.isUsingSpecialWeapon ? "special" : "attack", this.animation.time = 0, this.animations[nextStatus].time = this._weapon._fireRate) : nextStatus = "attack" == this.animation.status ? "attack" : "special" == this.animation.status ? "special" : "idle";
                            break;
                        case this.STATUS_WALK:
                            nextStatus = this._weapon.canOwnerMove ? "run" : "attack";
                            break;
                        case this.STATUS_DEAD:
                            nextStatus = "death"
                    }
                    nextStatus != this.animation.status ? (this.animation.status = nextStatus, this.animation.time = 0, this.animation.loop = this.animations[this.animation.status].loop, "run" == nextStatus ? this.playSound("sfx_runsand_00", {
                        loop: !0
                    }) : this.stopSound("sfx_runsand_00")) : (this.animation.time += p3.Timestep.deltaTime, this.animation.loop ? this.animation.time %= this.animations[this.animation.status].time : this.animation.time = Math.min(this.animation.time, this.animations[this.animation.status].time - .01));
                    var angle = this.angle * PIXI.RAD_TO_DEG;
                    angle = Math.fmod(45 * Math.floor((angle + 22.5) / 45), 360);
                    var str = "" + angle,
                        pad = "000";
                    this.animation.angle = pad.substring(0, pad.length - str.length) + str;
                    var index = Math.floor(this.animation.time / this.animations[this.animation.status].time * this.animations[this.animation.status].frames),
                        str = "" + index,
                        pad = "00",
                        index = pad.substring(0, pad.length - str.length) + str;
                    this._sprite.texture = this._assetManager.getTexture(this.animation.name + "_" + this.animations[this.animation.status].code + "_" + this.animation.angle + "_" + index), this._spriteContainer.rotation = angle * PIXI.DEG_TO_RAD - this.angle
                }, UnitPlayer.prototype.getAbilityCooldownStatus = function() {
                    return this.isDead ? 0 : this._ability.charge
                }, UnitPlayer.prototype.useAbility = function() {
                    if (1 != this.getAbilityCooldownStatus()) return !1;
                    if (this._world.settings.lockSkills && this._world.settings.lockSkillExceptions.indexOf(this._ability.type) == -1) return !1;
                    if (this.isAbilityOn) return this.endAbility(), this._ability.charge = 1, this._ability.decharge = !1, this.hideAbilityGlow(), !1;
                    switch (this._ability.type) {
                        case "medic":
                            if (!this._world.party.isWounded) return !1;
                            this._world.party.healOverTime(this._ability.medicPower, this._ability.medicTime), this._ability.dechargeTime = this._ability.medicTime;
                            break;
                        case "rocket":
                            this.swapWeapon(), this._ability.dechargeTime = 0, this.showAbilityGlow();
                            break;
                        case "sniper":
                            this.swapWeapon(), this._ability.dechargeTime = 0, this.showAbilityGlow();
                            break;
                        case "granade":
                            this.swapWeapon(), this._ability.dechargeTime = 0, this.showAbilityGlow();
                            break;
                        case "stealth":
                            this._world.party.stealth(this._ability.stealthTime), this._ability.dechargeTime = this._ability.stealthTime;
                            break;
                        case "airstrike":
                            var xwing = new AirUnitXWing(this._world);
                            xwing.x = this.x, xwing.y = this.y, xwing.init(), this._world.layers.sky.addChild(xwing), this._world.objects.units.flyingVehicle.push(xwing), this._ability.dechargeTime = this._ability.airstrikeTime;
                            break;
                        default:
                            return console.info("Ability %s not defined", this._ability.type), !1
                    }
                    return this._ability.decharge = !0, this._world.signals.skillUsed.dispatch(this, this._ability.type), Common.savedData.tutorialSkill[this.abilityType] || (Common.savedData.tutorialSkill[this.abilityType] = !0, Common.savedData.save()), !0
                }, UnitPlayer.prototype.endAbility = function() {
                    switch (this._ability.type) {
                        default: this.swapWeapon(),
                        this.hideAbilityGlow()
                    }
                }, UnitPlayer.prototype.showAbilityGlow = function() {
                    null == this._attackTarget && (this._glow || (this._glow = new PIXI.Sprite(this._assetManager.getTexture("particle_explode_spark_01")), this._glow.anchor.set(.5), this._glow.tint = 840163, this._glow.blendMode = 1, this._glow.scale.set(1), this._spriteContainer.addChildAt(this._glow, 0)), this._glow.alpha = 1, this._glow.visible = !0, this._shadow.visible = !1)
                }, UnitPlayer.prototype.hideAbilityGlow = function() {
                    if (this._glow && this._glow.visible)
                        if (this.isAlive) {
                            var glowTimeline = new TimelineMax({
                                onCompleteScope: this,
                                onComplete: function() {
                                    this._glow.visible = !1, this._shadow.visible = !0
                                }
                            });
                            glowTimeline.to(this._glow, .2, {
                                alpha: 0,
                                ease: Sine.easeInOut
                            })
                        } else this._glow.visible = !1
                }, UnitPlayer.prototype.shoot = function(target) {
                    this._weapon && this._weapon.canShoot && this._world.party.canShoot && (this._world.party.trackShoot(), this.stealthEnd(), Unit.prototype.shoot.call(this, target))
                }, UnitPlayer.prototype.hit = function(damage) {
                    this.stealthEnd(), Unit.prototype.hit.call(this, damage)
                }, UnitPlayer.prototype.death = function() {
                    this.hideAbilityGlow(), this._shadow.visible = !1;
                    var tl = new TimelineMax;
                    tl.to(this, this._deathFadeOutDuration, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, this._deathFadeOutDelay), Common.animator.add(tl), Unit.prototype.death.call(this), this.playRandomSound(["sfx_marine_fall_03"])
                }, UnitPlayer.prototype.getBulletSpawnPosition = function() {
                    var perp = new PIXI.Point(Math.sin(this.angle), -Math.cos(this.angle)),
                        perpLength = Math.sqrt(Math.pow(perp.x, 2) + Math.pow(perp.y, 2));
                    perp.x /= perpLength, perp.y /= perpLength;
                    var x = 8,
                        y = 18,
                        angle = parseInt(this.animation.angle);
                    return 0 == angle ? (x = 0, y = -4) : (angle >= 315 || angle <= 45) && (x = 0, y = 0), new PIXI.Point(this.x + perp.x * x, this.y - perp.y * y);
                }, UnitPlayer.prototype.stealth = function(time) {
                    this.isStealth || (this._stealthTime = time, this.stealthTimeline = new TimelineMax, this.stealthTimeline.to(this._spriteContainer, .3, {
                        alpha: .5,
                        ease: Sine.easeInOut
                    }, 0), Common.animator.add(this.stealthTimeline))
                }, UnitPlayer.prototype.stealthEnd = function() {
                    this.stealthTimeline && (this.stealthTimeline.kill(), this.stealthTimeline = null), this._stealthTime = 0, this._spriteContainer.alpha = 1
                }, UnitPlayer.prototype.rechargeAbility = function() {
                    this._ability.decharge = !1, this._ability.charge = 1, this._ability.justRecharged = !0
                }, UnitPlayer.prototype.getAbilityIcon = function() {
                    return this._abilityIcons[this._ability.type]
                }, UnitPlayer.prototype.getPortrait = function() {
                    return this._portraits[this.animation.name]
                }, Object.defineProperty(UnitPlayer.prototype, "isAbilityOn", {
                    get: function() {
                        return !!this._ability.decharge && this.isAlive
                    }
                }), Object.defineProperty(UnitPlayer.prototype, "isAbilityNowAvailable", {
                    get: function() {
                        return !!this._ability.justRecharged
                    }
                }), Object.defineProperty(UnitPlayer.prototype, "isUsingSpecialWeapon", {
                    get: function() {
                        return this.isAbilityOn && !!this._subWeapon
                    }
                }), Object.defineProperty(UnitPlayer.prototype, "isSpecialWeaponReady", {
                    get: function() {
                        return this.isUsingSpecialWeapon && 0 == this._ability.dechargeTime
                    }
                }), Object.defineProperty(UnitPlayer.prototype, "isStealth", {
                    get: function() {
                        return this._stealthTime > 0
                    }
                }), Object.defineProperty(UnitPlayer.prototype, "abilityType", {
                    get: function() {
                        return this._ability.type
                    }
                })
            }, {
                "../Common": 5,
                "./AirUnitXWing": 14,
                "./Unit": 59,
                "./Weapon": 69
            }
        ],
        66: [
            function(require, module, exports) {
                function UnitSoldier(world, behaviour, params) {
                    switch (Unit.call(this, world, "enemy"), this._behaviour = behaviour, this._behaviourStatus = 0, this._deathFadeOutDelay = 4.5, this._deathFadeOutDuration = .5, this._parameters = {
                        type: "stormtrooper",
                        fov: 45,
                        standWaitMin: 3,
                        standWaitMax: 6,
                        wanderDistance: 6,
                        wanderWaitMin: 3,
                        wanderWaitMax: 6,
                        patrolWait: 3,
                        losRadius: 10,
                        losPlayerMulti: 1,
                        losBulletMulti: .5,
                        losChaseMulti: 3,
                        pursuer: !1
                    }, this._parameters = $.extend(this._parameters, params), this._parameters.type) {
                        case "stormtrooper_off":
                            this._weapon = new Weapon(this._world, Weapon.GRANADE), this._subWeapon = new Weapon(this._world, Weapon.RIFLE), this._walkSpeed = Common.config.arcade.units.stormtrooper_off.walk_speed, this._runSpeed = Common.config.arcade.units.stormtrooper_off.run_speed, this._accuracy = Common.config.arcade.units.stormtrooper_off.accuracy + this._world.accuracyBonus, this._score = Common.config.arcade.units.stormtrooper_off.score, this.setHealth(Common.config.arcade.units.stormtrooper_off.health), this._parameters.losRadius *= Common.config.arcade.units.stormtrooper_off.los;
                            break;
                        default:
                            this._weapon = new Weapon(this._world, Weapon.GUN), this._walkSpeed = Common.config.arcade.units.stormtrooper.walk_speed, this._runSpeed = Common.config.arcade.units.stormtrooper.run_speed, this._accuracy = Common.config.arcade.units.stormtrooper.accuracy + this._world.accuracyBonus, this._score = Common.config.arcade.units.stormtrooper.score, this.setHealth(Common.config.arcade.units.stormtrooper.health), this._parameters.losRadius *= Common.config.arcade.units.stormtrooper.los
                    }
                    this._speed = this._walkSpeed, this._weapon && this._weapon.init(this), this._subWeapon && this._subWeapon.init(this), this.angle = 2 * Math.random() * Math.PI, this.angleTarget = this.angle, this.animation = {
                        name: this._parameters.type,
                        time: 0,
                        status: "idle",
                        loop: !0,
                        angle: "000"
                    }, this.animations = {
                        idle: {
                            code: "idl",
                            frames: 4,
                            time: 1,
                            loop: !0
                        },
                        walk: {
                            code: "wal",
                            frames: 4,
                            time: 1,
                            loop: !0
                        },
                        death: {
                            code: "die",
                            frames: 4,
                            time: .5,
                            loop: !1
                        },
                        run: {
                            code: "run",
                            frames: 8,
                            time: .8,
                            loop: !0
                        },
                        attack: {
                            code: "sho",
                            frames: 4,
                            time: 1,
                            loop: !1
                        }
                    }
                }
                var Common = require("../Common"),
                    Unit = require("./Unit"),
                    Weapon = require("./Weapon");
                module.exports = UnitSoldier, UnitSoldier.prototype = Object.create(Unit.prototype), UnitSoldier.prototype.constructor = UnitSoldier, UnitSoldier.prototype.init = function() {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(-this._world.mapTileSize / 1.75, -this._world.mapTileSize / 1.75, this._world.mapTileSize / 1.75 * 2, this._world.mapTileSize / 1.75 * 2), this._clickCollisionMask = new PIXI.Circle(0, 0, 2 * this._world.mapTileSize), this._losCollisionMask = new PIXI.Circle(0, 0, this._parameters.losRadius * this._world.mapTileSize), this._world.debug && (this._clickGraphic = new PIXI.Graphics, this._clickGraphic.lineStyle(3, 16711680), this._clickGraphic.drawCircle(this._clickCollisionMask.x, this._clickCollisionMask.y, this._clickCollisionMask.radius), this.addChild(this._clickGraphic), this._losGraphic = new PIXI.Graphics, this._losGraphic.lineStyle(3, 16737843), this._losGraphic.drawCircle(this._losCollisionMask.x, this._losCollisionMask.y, this._losCollisionMask.radius), this.addChild(this._losGraphic), this.drawCollision()), Unit.prototype.init.call(this), this._shadow = new PIXI.Sprite(this._assetManager.getTexture("marine_shadow_00")), this._shadow.anchor.set(.5), this._shadow.y -= 5, this._spriteContainer.addChild(this._shadow), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("char_enemy_00_270_00")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite), this.showHealthBar()
                }, UnitSoldier.prototype.update = function() {
                    if (!this._culling || this.visible) {
                        if (Unit.prototype.update.call(this), !this.isDead) {
                            if (this._attackTarget && (this.status != this.STATUS_IDLE || this.isInRange(this._attackTarget, this._losCollisionMask.radius * this._parameters.losChaseMulti) && this.isLineOfSightFree(this._attackTarget) && !this._attackTarget.isStealth || (!this._parameters.pursuer || this._attackTarget.isStealth ? (this._behaviourStatus = 0, this._speed = this._walkSpeed, this.stopAttack()) : this.move(this._attackTarget.tile))), !this._attackTarget) {
                                if (!this._attackTarget)
                                    for (var i = 0; i < this._world.objects.units.ally.length; i++) {
                                        var ally = this._world.objects.units.ally[i];
                                        if (!ally.isImmortal && this.isInRange(ally, this._losCollisionMask.radius * this._parameters.losPlayerMulti)) {
                                            this._speed = this._runSpeed;
                                            var result = this.attack(ally);
                                            if (result) break
                                        }
                                    }
                                if (!this._attackTarget)
                                    for (var aliveCharacters = this._world.party.getAliveCharacters(), i = 0; i < aliveCharacters.length; i++)
                                        if (!aliveCharacters[i].isStealth && this.isInRange(aliveCharacters[i], this._losCollisionMask.radius * this._parameters.losPlayerMulti) && this.isLineOfSightFree(aliveCharacters[i])) {
                                            this._speed = this._runSpeed;
                                            var result = this.attack(aliveCharacters[i]);
                                            if (result) break
                                        }
                                if (!this._attackTarget)
                                    for (var i = 0; i < this._world.objects.bullets.length; i++) {
                                        var bullet = this._world.objects.bullets[i];
                                        if (bullet.isFriendly && bullet._owner && !bullet._owner.isStealth && this.isInRange(bullet.getPositionRelativeToObject(this), this._losCollisionMask.radius * this._parameters.losBulletMulti)) {
                                            this._speed = this._runSpeed;
                                            var result = this.attack(bullet._owner);
                                            if (result) break
                                        }
                                    }
                            }
                            if (!this._attackTarget) switch (this._behaviour) {
                                case "stand":
                                    switch (this._behaviourStatus) {
                                        case 0:
                                            this._behaviourStatus++;
                                            break;
                                        case 1:
                                            this._waitTime = p3.Utils.randomRange(this._parameters.standWaitMin, this._parameters.standWaitMax), this._behaviourStatus++;
                                            break;
                                        case 2:
                                            this._waitTime -= p3.Timestep.deltaTime, this._waitTime <= 0 && (this.angleTarget = 2 * Math.random() * Math.PI, this._behaviourStatus = 0)
                                    }
                                    break;
                                case "patrol":
                                    switch (this._behaviourStatus) {
                                        case 0:
                                            this._waitTime = this._parameters.patrolWait, this._behaviourStatus++;
                                            break;
                                        case 1:
                                            this._waitTime -= p3.Timestep.deltaTime, this._waitTime <= 0 && (this._behaviourStatus++, this._status = Unit.prototype.STATUS_READY);
                                            break;
                                        case 2:
                                            this._parameters.patrolPointIndex++, this._parameters.patrolPointIndex >= this._parameters.patrolPoints.length && (this._parameters.patrolPointIndex = 0);
                                            var newTile = this._parameters.patrolPoints[this._parameters.patrolPointIndex];
                                            this.move(newTile) ? this._behaviourStatus++ : this._behaviourStatus = 0;
                                            break;
                                        case 3:
                                            this._status == Unit.prototype.STATUS_IDLE && (this._behaviourStatus = 0)
                                    }
                                    break;
                                case "wander":
                                    if (!this.visible && 0 == this._behaviourStatus) return;
                                    switch (this._behaviourStatus) {
                                        case 0:
                                            this._waitTime = p3.Utils.randomRange(this._parameters.wanderWaitMin, this._parameters.wanderWaitMax), this._behaviourStatus++;
                                            break;
                                        case 1:
                                            this._waitTime -= p3.Timestep.deltaTime, this._waitTime <= 0 && (this.visible ? this._behaviourStatus++ : this._behaviourStatus = 0);
                                            break;
                                        case 2:
                                            var newTile = new PIXI.Point(this._spawnTile.x + p3.Utils.randomInt(-this._parameters.wanderDistance, +this._parameters.wanderDistance), this._spawnTile.y + p3.Utils.randomInt(-this._parameters.wanderDistance, +this._parameters.wanderDistance));
                                            this.move(newTile) ? this._behaviourStatus++ : this._behaviourStatus = 0;
                                            break;
                                        case 3:
                                            this._status == Unit.prototype.STATUS_IDLE && (this._behaviourStatus = 0)
                                    }
                            }
                        }
                        var nextStatus = "";
                        switch (this.status) {
                            case this.STATUS_IDLE:
                            case this.STATUS_WAIT:
                            case this.STATUS_READY:
                            default:
                                this._weapon.hasJustShoot ? (nextStatus = "attack", this.animation.time = 0, this.animations[nextStatus].time = this._weapon._fireRate) : nextStatus = "attack" == this.animation.status ? "attack" : "idle";
                                break;
                            case this.STATUS_WALK:
                                nextStatus = this._weapon.canOwnerMove ? this._speed == this._runSpeed ? "run" : "walk" : "attack";
                                break;
                            case this.STATUS_DEAD:
                                nextStatus = "death"
                        }
                        nextStatus != this.animation.status ? (this.animation.status = nextStatus, this.animation.time = 0, this.animation.loop = this.animations[this.animation.status].loop, "run" == nextStatus ? (this.stopSound("sfx_walk_sand_00"), this.playSound("sfx_runsand_00", {
                            loop: !0
                        })) : "walk" == nextStatus ? (this.stopSound("sfx_runsand_00"), this.playSound("sfx_walk_sand_00", {
                            loop: !0
                        })) : (this.stopSound("sfx_walk_sand_00"), this.stopSound("sfx_runsand_00"))) : (this.animation.time += p3.Timestep.deltaTime, this.animation.loop ? this.animation.time %= this.animations[this.animation.status].time : this.animation.time = Math.min(this.animation.time, this.animations[this.animation.status].time - .01));
                        var angle = this.angle * PIXI.RAD_TO_DEG;
                        angle = Math.fmod(45 * Math.floor((angle + 22.5) / 45), 360);
                        var str = "" + angle,
                            pad = "000";
                        this.animation.angle = pad.substring(0, pad.length - str.length) + str;
                        var index = Math.floor(this.animation.time / this.animations[this.animation.status].time * this.animations[this.animation.status].frames),
                            str = "" + index,
                            pad = "00",
                            index = pad.substring(0, pad.length - str.length) + str;
                        this._sprite.texture = this._assetManager.getTexture(this.animation.name + "_" + this.animations[this.animation.status].code + "_" + this.animation.angle + "_" + index), this._spriteContainer.rotation = angle * PIXI.DEG_TO_RAD - this.angle
                    }
                }, UnitSoldier.prototype.teleport = function(x, y) {
                    Unit.prototype.teleport.call(this, x, y), this._behaviourStatus = 0
                }, UnitSoldier.prototype.run = function() {
                    this._speed = this._runSpeed
                }, UnitSoldier.prototype.move = function(tile) {
                    return this._world.isTileFree(tile) || this._world.getUnitAtTile(tile) && this._world.getUnitAtTile(tile).status != Unit.prototype.STATUS_IDLE || (tile = this._world.getNearestAvailableTile(tile)), Unit.prototype.move.call(this, tile)
                }, UnitSoldier.prototype.death = function() {
                    if (this._status != this.STATUS_DEAD) {
                        this._shadow.visible = !1, this._world.layers.decals.addChild(this);
                        var tl = new TimelineMax;
                        tl.to(this, this._deathFadeOutDuration, {
                            alpha: 0,
                            ease: Sine.easeOut
                        }, this._deathFadeOutDelay), Common.animator.add(tl), Unit.prototype.death.call(this), this.removeFromScene(this._deathFadeOutDuration + this._deathFadeOutDelay)
                    }
                }, UnitSoldier.prototype.isClicked = function(clickPos) {
                    return Math.sqrt(Math.pow(this.x - clickPos.x, 2) + Math.pow(this.y - clickPos.y, 2)) <= this._clickCollisionMask.radius
                }
            }, {
                "../Common": 5,
                "./Unit": 59,
                "./Weapon": 69
            }
        ],
        67: [
            function(require, module, exports) {
                function UnitTank(world, behaviour, params) {
                    Unit.call(this, world, "enemy"), this._culling = !1, this._isVehicle = !0, this._parameters = {
                        type: "tank",
                        losRadius: 10,
                        losBulletMulti: .5
                    }, this._parameters = $.extend(this._parameters, params), this._speed = Common.config.arcade.units.tank.speed, this._accuracy = Common.config.arcade.units.tank.accuracy, this._score = Common.config.arcade.units.tank.score, this._fov = Common.config.arcade.units.tank.fov, this._explosionDamage = Common.config.arcade.units.tank.explosion_damage, this._explosionRadius = Common.config.arcade.units.tank.explosion_radius, this._parameters.losRadius *= Common.config.arcade.units.tank.los, this.setHealth(Common.config.arcade.units.tank.health), this._weapon = new Weapon(this._world, Weapon.GRANADE), this._subWeapon = new Weapon(this._world, Weapon.TANKGUN, ["sfx_transport_fire1_trail_00"]), this._weapon.init(this), this._subWeapon.init(this), this._spawn = !0, this._spawnMin = Common.config.arcade.missions.destroy_tank.spawn_range[0], this._spawnMax = Common.config.arcade.missions.destroy_tank.spawn_range[1], this.angle = 0, this.angleTarget = this.angle, this.angleSpeed = .01, this.animation = {
                        name: this._parameters.type,
                        angle: 0
                    }
                }
                var Common = require("../Common"),
                    Unit = require("./Unit"),
                    Weapon = require("./Weapon"),
                    UnitSoldier = require("./UnitSoldier"),
                    GameObject = require("./GameObject");
                module.exports = UnitTank, UnitTank.prototype = Object.create(Unit.prototype), UnitTank.prototype.constructor = UnitTank, UnitTank.prototype.init = function() {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(4.7 * -this._world.mapTileSize, 2.6 * -this._world.mapTileSize, 9.5 * this._world.mapTileSize, 5.2 * this._world.mapTileSize), this._clickCollisionMask = new PIXI.Circle(0, 0, 5 * this._world.mapTileSize), this._losCollisionMask = new PIXI.Circle(0, 0, this._parameters.losRadius * this._world.mapTileSize), this._world.debug && (this._clickGraphic = new PIXI.Graphics, this._clickGraphic.lineStyle(3, 16711680), this._clickGraphic.drawCircle(this._clickCollisionMask.x, this._clickCollisionMask.y, this._clickCollisionMask.radius), this.addChild(this._clickGraphic), this._losGraphic = new PIXI.Graphics, this._losGraphic.lineStyle(3, 16737843), this._losGraphic.drawCircle(this._losCollisionMask.x, this._losCollisionMask.y, this._losCollisionMask.radius), this.addChild(this._losGraphic), this.drawCollision()), Unit.prototype.init.call(this), this._sprite = new PIXI.Sprite(this._assetManager.getTexture("tank_0018")), this._sprite.anchor.set(.5), this._spriteContainer.addChild(this._sprite), this.dustPS = new PIXI.particles.Emitter(this._world.layers.decals, [this._assetManager.getTexture("particle_explode_smoke_00"), this._assetManager.getTexture("particle_explode_smoke_01")], this._assetManager.getJSON("particle_tank_dust_00")), this.dustPS.emit = !0, this.showHealthBar()
                }, UnitTank.prototype.spawn = function(position) {
                    Unit.prototype.spawn.call(this, position);
                    for (var tiles = this._world.getSATShapeTiles(this), t = 0; t < tiles.length; t++) {
                        var unit = this._world.getUnitAtTile(tiles[t]);
                        unit != this && unit && "undefined" != typeof unit.teleport && unit.teleport(this._world.getNearestAvailableTile(unit.tile, tiles))
                    }
                    this._world.occupyTiles(this, tiles), this.playSound("sfx_transport_hover_loop_00", {
                        loop: !0
                    })
                }, UnitTank.prototype.update = function() {
                    if (GameObject.prototype.update.call(this), this.dustPS.updateSpawnPos(this.x, this.y), this.dustPS.update(p3.Timestep.deltaTime), this._hitHighlightTime > 0) {
                        this._hitHighlightTime -= p3.Timestep.deltaTime, this._hitHighlightTime = Math.max(0, this._hitHighlightTime);
                        var color = Math.round(255 - this._hitHighlightTime / this._hitHighlightTimeMax * 255).toString(16);
                        1 == color.length && (color = "0" + color), color = "#ff" + color + color, this._sprite.tint = parseInt(color.substring(1), 16)
                    }
                    if (!this.isDead) {
                        if (this._weapon && this._weapon.update(), this._attackTarget && (this._attackTarget.isDead || this._attackTarget.isImmortal) && (this.stopAttack(), this.stopMovement()), !this._attackTarget)
                            for (var aliveCharacters = this._world.party.getAliveCharacters(), i = 0; i < aliveCharacters.length; i++)
                                if (!aliveCharacters[i].isStealth && this.isInRange(aliveCharacters[i], this._losCollisionMask.radius)) {
                                    if (this._spawn && (console.log("spawnEnemies!"), this._spawn = !1, this.spawnEnemies()), this._fov < 360) {
                                        var angle = Math.atan2(this.y - aliveCharacters[i].y, aliveCharacters[i].x - this.x),
                                            angleDiff = Math.atan2(Math.sin(angle - this.angle), Math.cos(angle - this.angle));
                                        if (Math.abs(angleDiff * PIXI.RAD_TO_DEG) > this._fov) continue
                                    }
                                    if (this.isLineOfSightFree(aliveCharacters[i])) {
                                        var result = this.attack(aliveCharacters[i]);
                                        if (result) break
                                    }
                                }
                        this._attackTarget || this.status == this.STATUS_IDLE && this._waypointIndex < this._waypoints.length && (this.tile.x == this._waypoints[this._waypointIndex].tile.x && this.tile.y == this._waypoints[this._waypointIndex].tile.y && this._waypointIndex++, this._waypointIndex < this._waypoints.length ? this.move(this._waypoints[this._waypointIndex].position) : this._world.missionManager.missionFailed());
                        var oldAngle = this.angle;
                        if (null != this._attackTarget)
                            if (this.isInRange(this._attackTarget, this._weapon.range) && this.isLineOfSightFree(this._attackTarget) && !this._attackTarget.isStealth) {
                                var angleTarget = Math.atan2(this.y - this._attackTarget.y, this._attackTarget.x - this.x),
                                    angleDiff = Math.atan2(Math.sin(angleTarget - this.angle), Math.cos(angleTarget - this.angle));
                                this.angleTarget = angleTarget, this._weapon.type == Weapon.GRANADE ? this.shoot(this._attackTarget) : Math.abs(angleDiff) < 5 * PIXI.DEG_TO_RAD && this.shoot(this._attackTarget)
                            } else this.stopAttack(), this._status = this.STATUS_IDLE;
                        else if (this.status == this.STATUS_WALK) {
                            var prevPosition = new PIXI.Point(this.x, this.y),
                                poly = this.getSATShape();
                            poly.translate(-this.x, -this.y);
                            var deltaDistance = this._speed * p3.Timestep.deltaTime,
                                posFrom = this._moveFrom,
                                posTo = this._moveTo,
                                segmentDistance = Math.sqrt(Math.pow(posTo.x - posFrom.x, 2) + Math.pow(posTo.y - posFrom.y, 2)),
                                doneDistance = Math.sqrt(Math.pow(this.x - posFrom.x, 2) + Math.pow(this.y - posFrom.y, 2)),
                                percentage = doneDistance / segmentDistance,
                                deltaPercentage = deltaDistance / segmentDistance;
                            percentage += deltaPercentage, percentage = Math.min(1, percentage), this.x = posFrom.x + (posTo.x - posFrom.x) * percentage, this.y = posFrom.y + (posTo.y - posFrom.y) * percentage, 1 == percentage && (this._status = this.STATUS_IDLE), poly.translate(+this.x, +this.y), this.angleTarget = Math.atan2(prevPosition.y - this.y, this.x - prevPosition.x)
                        }
                        var angleDiff = Math.atan2(Math.sin(this.angleTarget - this.angle), Math.cos(this.angleTarget - this.angle));
                        isNaN(angleDiff) && (angleDiff = 0), this.angle += angleDiff * this.angleSpeed;
                        var poly = this.getSATShape();
                        poly.translate(-this.x - this.collisionMask.width / 2, -this.y - this.collisionMask.height / 2), poly.rotate(oldAngle - this.angle), poly.translate(this.x + this.collisionMask.width / 2, this.y + this.collisionMask.height / 2), this._world.debug && (this._collisionGraphic.rotation = -this.angle);
                        for (var tiles = this._world.getSATShapeTiles(this), t = 0; t < tiles.length; t++) {
                            var unit = this._world.getUnitAtTile(tiles[t]);
                            unit != this && unit && "undefined" != typeof unit.teleport && unit.teleport(this._world.getNearestAvailableTile(unit.tile, tiles))
                        }
                        this._world.occupyTiles(this, tiles);
                        var angle = this.angle * PIXI.RAD_TO_DEG;
                        angle = Math.fmod(Math.floor(angle / 11.25), 32);
                        var str = "" + angle,
                            pad = "0000";
                        if (this.animation.angle = pad.substring(0, pad.length - str.length) + str, this._sprite.texture = this._assetManager.getTexture(this.animation.name + "_" + this.animation.angle), this._spriteContainer.rotation = 11.25 * angle * PIXI.DEG_TO_RAD - this.angle, this._targetHighlight && this._targetHighlight.visible)
                            for (var i = 0; i < this._targetHighlight.children.length; i++) this._targetHighlight.children[i].rotation += this._targetHighlight.children[i].angularSpeed * p3.Timestep.deltaTime
                    }
                }, UnitTank.prototype.move = function(position) {
                    this._status = this.STATUS_WALK, this._moveFrom = new PIXI.Point(this.x, this.y), this._moveTo = new PIXI.Point(position.x, position.y)
                }, UnitTank.prototype.death = function() {
                    if (this._status != this.STATUS_DEAD) {
                        Unit.prototype.death.call(this), this.dustPS.emit = !1, this.dustPS.cleanup(), this.dustPS.parent.removeChild(this.dustPS);
                        var tl = new TimelineMax;
                        tl.to(this, .25, {
                            alpha: 0,
                            ease: Sine.easeOut
                        }, 0), Common.animator.add(tl);
                        var explosion = this._world.objectManager.generate("effectExplosionBig");
                        explosion.scale.set(1.3), explosion.play(this.x, this.y, ["sfx_transport_explode_00"]);
                        var smoke = this._world.objectManager.generate("effectSmoke");
                        smoke.play(this.x, this.y);
                        var tl = new TimelineMax({
                            delay: .1,
                            onStartScope: this,
                            onStart: function() {
                                this._world.damageArea(new PIXI.Point(this.x, this.y), this._explosionRadius * this._world.mapTileSize, this._explosionDamage)
                            }
                        });
                        this._world.shake(.5, new PIXI.Point(25, 15)), this.removeFromScene(.5)
                    }
                }, UnitTank.prototype.showTargetHighlight = function() {
                    Unit.prototype.showTargetHighlight.call(this), this._targetHighlight.scale.set(1.25)
                }, UnitTank.prototype.getBulletSpawnPosition = function() {
                    if (this._weapon.type == Weapon.GRANADE) return console.log("granade"), new PIXI.Point(this.x, this.y);
                    var angle = this.angle + 3 * (2 * Math.random() - 1) * PIXI.DEG_TO_RAD;
                    return new PIXI.Point(this.x + this._clickCollisionMask.radius * Math.cos(-angle), this.y + this._clickCollisionMask.radius * Math.sin(-angle))
                }, UnitTank.prototype.setDestination = function(destination) {
                    this._destination = destination;
                    for (var waypoints = [], i = 0; i < this._world.objects.spawners.tankWaypoint.length; i++) waypoints.push({
                        waypoint: this._world.objects.spawners.tankWaypoint[i],
                        used: !1
                    });
                    this._waypointIndex = 0, this._waypoints = [];
                    for (var p = this.position, l = 0; l < waypoints.length; l++) {
                        for (var nearest = null, nearestDistance = 0, i = 0; i < waypoints.length; i++)
                            if (!waypoints[i].used) {
                                var distance = Math.sqrt(Math.pow(p.x - waypoints[i].waypoint.x, 2) + Math.pow(p.y - waypoints[i].waypoint.y, 2));
                                (null == nearest || nearestDistance > distance) && (nearest = waypoints[i], nearestDistance = distance)
                            }
                        this._waypoints.push(nearest.waypoint), nearest.used = !0, p = nearest.waypoint
                    }
                    if (this._waypoints.push(destination), this._world.debug) {
                        this._world._tankPathGraphic && this._world._tankPathGraphic.parent.removeChild(this._world._tankPathGraphic), this._world._tankPathGraphic = new PIXI.Graphics, this._world._tankPathGraphic.lineStyle(3, 0), this._world._tankPathGraphic.moveTo(this.x, this.y);
                        for (var i = 0; i < this._waypoints.length; i++) this._world._tankPathGraphic.lineTo(this._waypoints[i].x, this._waypoints[i].y);
                        this._world.layers.tiles.addChild(this._world._tankPathGraphic)
                    }
                }, UnitTank.prototype.stopMovement = function() {}, UnitTank.prototype.isClicked = function(clickPos) {
                    return Math.sqrt(Math.pow(this.x - clickPos.x, 2) + Math.pow(this.y - clickPos.y, 2)) <= this._clickCollisionMask.radius
                }, UnitTank.prototype.spawnEnemies = function() {
                    if (this._world.party.isAlive) {
                        for (var partyLeader = this._world.party.getLeader(), partyPosition = partyLeader.position, aliveCharacter = this._world.party.getAliveCharacters(), units = [], i = 0; i < p3.Utils.randomInt(this._spawnMin, this._spawnMax); i++) {
                            var random = Math.random();
                            random < .1 ? units.push({
                                unit: new UnitSoldier(this._world, "guard", {
                                    type: "stormtrooper_off",
                                    pursuer: !0
                                })
                            }) : units.push({
                                unit: new UnitSoldier(this._world, "guard", {
                                    type: "stormtrooper",
                                    pursuer: !0
                                })
                            })
                        }
                        this._spawnPoints = [];
                        for (var i = 0; i < this._world.objects.spawners.soldier.length; i++) {
                            var distance = Math.sqrt(Math.pow(partyPosition.x - this._world.objects.spawners.soldier[i].x, 2) + Math.pow(partyPosition.y - this._world.objects.spawners.soldier[i].y, 2));
                            distance > 300 && distance < 1200 && this._spawnPoints.push(this._world.objects.spawners.soldier[i])
                        }
                        for (var i = 0; i < units.length; i++) {
                            var spawnPoint = this._spawnPoints[p3.Utils.randomInt(0, this._spawnPoints.length - 1)],
                                position = new PIXI.Point(spawnPoint.x, spawnPoint.y),
                                tile = this._world.getTileAtCoords(position);
                            units[i].unit.init(), units[i].unit.spawn(tile), units[i].unit._spawner = null, units[i].unit._culling = !1;
                            var tl = new TimelineMax;
                            tl.to(units[i].unit, .5, {
                                alpha: units[i].unit.alpha,
                                ease: Linear.easeNone
                            }, 0), Common.animator.add(tl), units[i].unit.alpha = 0, units[i].unit.attack(aliveCharacter[p3.Utils.randomInt(0, aliveCharacter.length - 1)]), units[i].unit.run()
                        }
                    }
                }
            }, {
                "../Common": 5,
                "./GameObject": 31,
                "./Unit": 59,
                "./UnitSoldier": 66,
                "./Weapon": 69
            }
        ],
        68: [
            function(require, module, exports) {
                function UnitTurret(world, params) {
                    Unit.call(this, world, "enemy"), this._score = Common.config.arcade.units.turret.score, this._rocketDamage = Common.config.arcade.units.turret.rocket_damage, this._rocketRadius = Common.config.arcade.units.turret.rocket_radius, this._rocketTime = Common.config.arcade.units.turret.rocket_time, this._rocketSpeed = Common.config.arcade.units.turret.rocket_speed, this._explosionDamage = Common.config.arcade.units.turret.explosion_damage, this._explosionRadius = Common.config.arcade.units.turret.explosion_radius, this.setHealth(Common.config.arcade.units.turret.health), this._parameters = $.extend(this._parameters, params), this._friendly = !1, this._idleTime = 0, this._isShooting = !1, this._parameters = {
                        fov: 45,
                        losRadius: 16,
                        losBulletMulti: .5,
                        losChaseMulti: 2
                    }, this.animation = {
                        name: "env_00_enemy_turret_03_top",
                        angle: 0
                    }, this.angleSpeed = .04
                }
                var Common = require("../Common"),
                    Unit = require("./Unit");
                module.exports = UnitTurret, UnitTurret.prototype = Object.create(Unit.prototype), UnitTurret.prototype.constructor = UnitTurret, UnitTurret.prototype.init = function() {
                    this.collisionType = "rectangle", this.collisionMask = new PIXI.Rectangle(1.4 * -this._world.mapTileSize, 1.4 * -this._world.mapTileSize, 2.8 * this._world.mapTileSize, 2.8 * this._world.mapTileSize), this._clickCollisionMask = new PIXI.Circle(0, 0, 2.5 * this._world.mapTileSize), this._losCollisionMask = new PIXI.Circle(0, 0, this._parameters.losRadius * this._world.mapTileSize), this._world.debug && (this._clickGraphic = new PIXI.Graphics, this._clickGraphic.lineStyle(3, 16711680), this._clickGraphic.drawCircle(this._clickCollisionMask.x, this._clickCollisionMask.y, this._clickCollisionMask.radius), this.addChild(this._clickGraphic), this._losGraphic = new PIXI.Graphics, this._losGraphic.lineStyle(3, 16737843), this._losGraphic.drawCircle(this._losCollisionMask.x, this._losCollisionMask.y, this._losCollisionMask.radius), this.addChild(this._losGraphic), this.drawCollision()), Unit.prototype.init.call(this), this._sprite || (this._sprite = new PIXI.Sprite(this._assetManager.getTexture("env_00_enemy_turret_03_base")), this._sprite.y += 45, this._sprite.anchor.set(.5, 1), this._spriteContainer.addChild(this._sprite), this._topContainer = new PIXI.Container, this._topContainer.y = -78, this._sprite.addChild(this._topContainer), this._top = new PIXI.Sprite(this._assetManager.getTexture("env_00_enemy_turret_03_top_00")), this._top.anchor.set(.5), this._topContainer.addChild(this._top)), this._sprite.alpha = 1
                }, UnitTurret.prototype.spawn = function(position) {
                    Unit.prototype.spawn.call(this, position);
                    for (var tiles = this._world.getSATShapeTiles(this), t = 0; t < tiles.length; t++) {
                        var unit = this._world.getUnitAtTile(tiles[t]);
                        unit != this && unit && "undefined" != typeof unit.teleport && unit.teleport(this._world.getNearestAvailableTile(unit.tile, tiles))
                    }
                    this._world.occupyTiles(this, tiles)
                }, UnitTurret.prototype.update = function() {
                    if ((!this._culling || this.visible) && this._status != this.STATUS_DEAD) {
                        if (this._hitHighlightTime > 0) {
                            this._hitHighlightTime -= p3.Timestep.deltaTime, this._hitHighlightTime = Math.max(0, this._hitHighlightTime);
                            var color = Math.round(255 - this._hitHighlightTime / this._hitHighlightTimeMax * 255).toString(16);
                            1 == color.length && (color = "0" + color), color = "#ff" + color + color, this._sprite.tint = parseInt(color.substring(1), 16), this._top.tint = parseInt(color.substring(1), 16)
                        }
                        if (!this._isShooting)
                            if (this._attackTarget)
                                if (this._attackTarget.isDead) this._attackTarget = null, this._idleTime = 2;
                                else if (!this.isInRange(this._attackTarget, this._parameters.losRadius * this._parameters.losChaseMulti * this._world.mapTileSize) || this._attackTarget.isStealth) this._attackTarget = null, this._idleTime = 5;
                        else if (this.isLineOfSightFree(this._attackTarget)) {
                            var angleTarget = Math.atan2(this.y - this._attackTarget.y, this._attackTarget.x - this.x),
                                angleDiff = Math.atan2(Math.sin(angleTarget - this.angle), Math.cos(angleTarget - this.angle));
                            this.angleTarget = angleTarget, Math.abs(angleDiff) < 10 * PIXI.DEG_TO_RAD && this.shoot(this._attackTarget.x, this._attackTarget.y)
                        } else this._attackTarget = null, this._idleTime = 5;
                        else if (this._idleTime -= p3.Timestep.deltaTime, this._idleTime <= 0) this.angleTarget += p3.Utils.randomRange(-Math.PI, Math.PI), this._idleTime = p3.Utils.randomRange(5, 10);
                        else {
                            if (!this._friendly && this._world.party.isAlive) {
                                var target = this._world.party.getLeader();
                                if (!target.isStealth && this.isInRange(target, this._parameters.losRadius * this._world.mapTileSize) && this.isLineOfSightFree(target)) return void(this._attackTarget = target)
                            }
                            for (var i = 0; i < this._world.objects.bullets.length; i++) {
                                var bullet = this._world.objects.bullets[i];
                                if (bullet.isFriendly != this.isFriendly && bullet._owner && this.isInRange(bullet.getPositionRelativeToObject(this), this._parameters.losRadius * this._parameters.losBulletMulti * this._world.mapTileSize)) return void(this._attackTarget = bullet._owner)
                            }
                        }
                        var angleDiff = Math.atan2(Math.sin(this.angleTarget - this.angle), Math.cos(this.angleTarget - this.angle));
                        isNaN(angleDiff) && (angleDiff = 0), this.angle += angleDiff * this.angleSpeed;
                        var angle = this.angle * PIXI.RAD_TO_DEG;
                        angle = Math.fmod(Math.floor(angle / 11.25), 32);
                        var str = "" + angle,
                            pad = "00";
                        this.animation.angle = pad.substring(0, pad.length - str.length) + str, this._top.texture = this._assetManager.getTexture(this.animation.name + "_" + this.animation.angle), this._topContainer.rotation = 11.25 * angle * PIXI.DEG_TO_RAD - this.angle
                    }
                }, UnitTurret.prototype.shoot = function(x, y) {
                    if (!this._isShooting) {
                        this._isShooting = !0;
                        var distance = Math.sqrt(Math.pow(x - this.x, 2) + Math.pow(y - this.y, 2));
                        this._aoeGraphic = this._world.objectManager.generate("effectAirstrikeTarget"), this._aoeGraphic.play(this.x, this.y), this._aoeGraphic.alpha = 1, this._aoeGraphic.scale.set(0), this._aoeGraphic.position.set(this.x, this.y), this._aoeTimeline = new TimelineMax({
                            onCompleteScope: this,
                            onComplete: function() {
                                this._isShooting = !1
                            }
                        }), this._aoeTimeline.to(this._aoeGraphic.scale, this._rocketTime, {
                            x: 1,
                            y: 1,
                            ease: Sine.easeOut
                        }, 0), this._aoeTimeline.to(this._aoeGraphic, this._rocketTime, {
                            x: x,
                            y: y - 33,
                            ease: Sine.easeOut,
                            onCompleteScope: this,
                            onCompleteParams: [distance],
                            onComplete: function(distance) {
                                if (!this.isDead) {
                                    var bulletSpawnPosition = new PIXI.Point(this.x + this._sprite.x + this._topContainer.x, this.y + this._sprite.y + this._topContainer.y),
                                        bullet = this._world.objectManager.generate("bulletLaserExplosive");
                                    bullet.position = bulletSpawnPosition, bullet._isFriendly = this.isFriendly, bullet._owner = this, bullet._damage = this._rocketDamage, bullet._radius = this._rocketRadius, bullet._angle = Math.atan2(-Math.sin(this.angle), Math.cos(this.angle)), bullet._speed = this._rocketSpeed, bullet._lifeMax = distance / bullet._speed, bullet.setup(), this._world.objects.bullets.push(bullet), this._world.layers.ground.addChild(bullet), this._aoeGraphic && (this._aoeGraphic.fadeOut(), this._aoeGraphic = null)
                                }
                            }
                        }, 0), Common.animator.add(this._aoeTimeline)
                    }
                }, UnitTurret.prototype.hit = function(damage) {
                    Unit.prototype.hit.call(this, damage)
                }, UnitTurret.prototype.death = function() {
                    if (this._status != this.STATUS_DEAD) {
                        Unit.prototype.death.call(this), this._sprite.alpha = 0;
                        var explosion = this._world.objectManager.generate("effectExplosionBig");
                        explosion.scale.set(1.3), explosion.play(this.x, this.y, ["sfx_exp_turret_0", "sfx_exp_turret_1", "sfx_exp_turret_2"]);
                        var smoke = this._world.objectManager.generate("effectSmoke");
                        smoke.play(this.x, this.y), this._aoeTimeline && this._aoeTimeline.kill(), this._aoeGraphic && (this._aoeGraphic.fadeOut(), this._aoeGraphic = null);
                        new TimelineMax({
                            delay: .1,
                            onStartScope: this,
                            onStart: function() {
                                this._world.damageArea(new PIXI.Point(this.x, this.y), this._explosionRadius * this._world.mapTileSize, this._explosionDamage)
                            }
                        });
                        this._world.shake(.5, new PIXI.Point(15, 15)), this.removeFromScene(.5)
                    }
                }, UnitTurret.prototype.showTargetHighlight = function() {
                    Unit.prototype.showTargetHighlight.call(this), this._targetHighlight.scale.set(.75)
                }, UnitTurret.prototype.isClicked = function(clickPos) {
                    return Math.sqrt(Math.pow(this.x - clickPos.x, 2) + Math.pow(this.y - clickPos.y, 2)) <= this._clickCollisionMask.radius
                }
            }, {
                "../Common": 5,
                "./Unit": 59
            }
        ],
        69: [
            function(require, module, exports) {
                function Weapon(world, type, sounds) {
                    this._world = world, this._type = type, this._damage = 1, this._fireRate = 1, this._firePause = 0, this._bulletSpeed = 400, this._bulletLife = 1.25, this._accuracy = 1, this._estimateAim = !0, this._hasJustShoot = !1, this._cooldown = 0, this._sounds = sounds || null, this.init(type)
                }
                require("../Common"), require("./BulletLaser");
                module.exports = Weapon, Weapon.GUN = 1, Weapon.RIFLE = 2, Weapon.ROCKET = 3, Weapon.SNIPER = 4, Weapon.GRANADE = 5, Weapon.CHARGED = 6, Weapon.TANKGUN = 7, Weapon.prototype.init = function(owner) {
                    switch (this._owner = owner, this._type) {
                        case Weapon.RIFLE:
                            this._damage = 1.5, this._fireRate = .2, this._bulletLife = 1, this._accuracy = .95;
                            break;
                        case Weapon.GUN:
                        default:
                            this._type = Weapon.GUN, this._damage = 4, this._accuracy = 1;
                            break;
                        case Weapon.ROCKET:
                            this._estimateAim = !1, this._damage = 20, this._accuracy = 1.1, this._fireRate = 1, this._firePause = 2, this._fireRate = 10;
                            break;
                        case Weapon.SNIPER:
                            this._estimateAim = !1, this._damage = 20, this._accuracy = 1.1, this._fireRate = 10, this._fireRate = 1, this._firePause = 2, this._bulletLife = .7;
                            break;
                        case Weapon.GRANADE:
                            this._estimateAim = !1, this._accuracy = 1.1, this._fireRate = 1, this._firePause = 2, this._fireRate = 10, this._owner.isFriendly ? (this._bulletSpeed = 600, this._damage = 30, this._bulletLife = 2) : (this._bulletSpeed = 400, this._damage = 10, this._bulletLife = 3);
                            break;
                        case Weapon.CHARGED:
                            this._damage = 40, this._fireRate = 10, this._bulletLife = 1, this._bulletSpeed = 1200, this._accuracy = 1.1;
                            break;
                        case Weapon.TANKGUN:
                            this._estimateAim = !1, this._damage = 1.5, this._fireRate = 1 / 6, this._bulletLife = 1, this._accuracy = 1.1
                    }
                }, Weapon.prototype.update = function() {
                    this._hasJustShoot = !1, this._cooldown > 0 && (this._cooldown -= p3.Timestep.deltaTime, this._cooldown = Math.max(0, this._cooldown))
                }, Weapon.prototype.shoot = function(target, position) {
                    if (this.canShoot) {
                        this._cooldown = this._fireRate + this._firePause, this._hasJustShoot = !0;
                        var bullet;
                        switch (this._type) {
                            case Weapon.ROCKET:
                                bullet = this._world.objectManager.generate("bulletRocket");
                                break;
                            case Weapon.SNIPER:
                                bullet = this._world.objectManager.generate("bulletSniper");
                                break;
                            case Weapon.GRANADE:
                                bullet = this._world.objectManager.generate("bulletGranade");
                                break;
                            case Weapon.CHARGED:
                                bullet = this._world.objectManager.generate("bulletLaser"), bullet.scale.set(4), bullet._texture = "projectile_laser_00";
                                break;
                            case Weapon.TANKGUN:
                                bullet = this._world.objectManager.generate("bulletLaser"), bullet.scale.set(1.5);
                                break;
                            default:
                                bullet = this._world.objectManager.generate("bulletLaser")
                        }
                        var spawnPosition = position || this._owner.getBulletSpawnPosition(),
                            targetPosition = new PIXI.Point(target.x, target.y);
                        if (this._estimateAim && "function" == typeof target.getMovementDirection) {
                            var distance = Math.sqrt(Math.pow(spawnPosition.x - target.x, 2) + Math.pow(spawnPosition.y - target.y, 2)),
                                time = distance / this._bulletSpeed,
                                direction = target.getMovementDirection();
                            targetPosition.x += direction.x * time, targetPosition.y += direction.y * time
                        }
                        var deltaAngle = p3.Utils.randomRange(-90, 90) * (1 - this._owner.totalAccuracy) * PIXI.DEG_TO_RAD;
                        switch (bullet.position = spawnPosition, bullet._isFriendly = this._owner.isFriendly, bullet._owner = this._owner, bullet._damage = this._damage, bullet._angle = Math.atan2(targetPosition.y - spawnPosition.y, targetPosition.x - spawnPosition.x) + deltaAngle, bullet._speed = this._bulletSpeed, bullet._lifeMax = this._bulletLife, bullet._target = target, bullet._shootSounds = this._sounds, bullet.setup(), this._type) {
                            case Weapon.SNIPER:
                            case Weapon.ROCKET:
                            case Weapon.CHARGED:
                                this._owner._ability.dechargeTime = 1;
                                break;
                            case Weapon.GRANADE:
                                this._owner.isFriendly ? this._owner._ability.dechargeTime = 1 : this._owner.swapWeapon()
                        }
                        return bullet
                    }
                }, Object.defineProperty(Weapon.prototype, "type", {
                    get: function() {
                        return this._type
                    }
                }), Object.defineProperty(Weapon.prototype, "canShoot", {
                    get: function() {
                        return 0 == this._cooldown
                    }
                }), Object.defineProperty(Weapon.prototype, "range", {
                    get: function() {
                        switch (this._type) {
                            case Weapon.ROCKET:
                                return 20 * this._world.mapTileSize;
                            case Weapon.SNIPER:
                                return 30 * this._world.mapTileSize;
                            case Weapon.GRANADE:
                                return 16 * this._world.mapTileSize;
                            default:
                                return this._bulletLife * this._bulletSpeed
                        }
                    }
                }), Object.defineProperty(Weapon.prototype, "hasJustShoot", {
                    get: function() {
                        return this._hasJustShoot
                    }
                }), Object.defineProperty(Weapon.prototype, "canOwnerMove", {
                    get: function() {
                        return this._cooldown - this._firePause < .4 * this._fireRate
                    }
                })
            }, {
                "../Common": 5,
                "./BulletLaser": 18
            }
        ],
        70: [
            function(require, module, exports) {
                function AbilityChargeFilter(sprite) {
                    this.maskSprite = sprite, this.maskMatrix = new PIXI.Matrix, PIXI.Filter.call(this, vertShaderSrc, fragShaderSrc, {
                        percentage: {
                            type: "f",
                            value: 1
                        },
                        mappedMatrix: {
                            type: "mat3",
                            value: this.maskMatrix
                        }
                    })
                }
                var fragShaderSrc = "precision lowp float;\r\n\r\nvarying lowp vec2 vTextureCoord;\r\nuniform lowp sampler2D uSampler;\r\nuniform lowp float percentage;\r\nuniform mat3 mappedMatrix;\r\n//uniform vec2 range;\r\n\r\n\r\nfloat when_lt(float x, float y)\r\n{\r\n\treturn max(sign(y - x), 0.0);\r\n}\r\n\r\nvoid main()\r\n{\r\n\tlowp vec2 range = vec2(0.19, 0.69);\r\n\tlowp vec3 uv    = vec3(vTextureCoord, 1.0) * mappedMatrix;\r\n\tlowp vec4 color = texture2D(uSampler, vTextureCoord);\r\n\tcolor.a        *= when_lt(uv.y, mix(range.x, range.y, percentage));\r\n\r\n\tcolor.rgb *= color.a; // Premultiplied alpha - important!\r\n\r\n\tgl_FragColor = color;\r\n}",
                    vertShaderSrc = "attribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nuniform mat3 projectionMatrix;\r\nuniform mat3 filterMatrix;\r\nvarying vec2 vTextureCoord;\r\nvarying vec2 vFilterCoord;\r\n\r\nvoid main(void)\r\n{\r\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\r\n   vTextureCoord = aTextureCoord ;\r\n}";
                module.exports = AbilityChargeFilter, AbilityChargeFilter.prototype = Object.create(PIXI.Filter.prototype), AbilityChargeFilter.prototype.constructor = AbilityChargeFilter, AbilityChargeFilter.prototype.apply = function(filterManager, input, output) {
                    this.maskSprite ? this.uniforms.mappedMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite) : filterManager.calculateNormalizedScreenSpaceMatrix(this.uniforms.mappedMatrix), filterManager.applyFilter(this, input, output)
                }
            }, {}
        ],
        71: [
            function(require, module, exports) {
                function AbilityDechargeFilter(sprite) {
                    this.maskSprite = sprite, this.maskMatrix = new PIXI.Matrix, PIXI.Filter.call(this, null, fragShaderSrc, {
                        percentage: {
                            type: "f",
                            value: 1
                        },
                        mappedMatrix: {
                            type: "mat3",
                            value: this.maskMatrix
                        }
                    })
                }
                var fragShaderSrc = "precision lowp float;\r\n\r\nvarying lowp vec2 vFilterCoord;\r\nvarying lowp vec2 vTextureCoord;\r\nuniform lowp sampler2D uSampler;\r\nuniform lowp float percentage;\r\nuniform mat3 mappedMatrix;\r\n//uniform vec2 center;\r\n\r\nfloat atan2(float y, float x)\r\n{\r\n\treturn 2.0 * atan(y / (sqrt(x * x + y * y) + x));\r\n}\r\n\r\nfloat when_lt(float x, float y)\r\n{\r\n\treturn max(sign(y - x), 0.0);\r\n}\r\n\r\nvoid main()\r\n{\r\n\tlowp vec2 center  = vec2(0.52, 0.45);\r\n\tlowp float pi     = 3.14;\r\n\tlowp vec3 uv      = vec3(vTextureCoord, 1.0) * mappedMatrix;\r\n\tlowp float pAngle = atan2(uv.x - center.x, uv.y - center.y);\r\n\r\n\tlowp vec4 color = texture2D(uSampler, vTextureCoord);\r\n\tcolor.a   *= when_lt((pAngle+pi)/(2.0 * pi), percentage);\r\n\tcolor.rgb *= color.a;// Premultiplied alpha - important!\r\n\r\n\tgl_FragColor = color;\r\n}";
                module.exports = AbilityDechargeFilter, AbilityDechargeFilter.prototype = Object.create(PIXI.Filter.prototype), AbilityDechargeFilter.prototype.constructor = AbilityDechargeFilter, AbilityDechargeFilter.prototype.apply = function(filterManager, input, output) {
                    this.maskSprite ? this.uniforms.mappedMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite) : filterManager.calculateNormalizedScreenSpaceMatrix(this.uniforms.mappedMatrix), filterManager.applyFilter(this, input, output)
                }
            }, {}
        ],
        72: [
            function(require, module, exports) {
                "use strict";

                function LightSpeedFilter(sprite) {
                    this.maskSprite = sprite, this.maskMatrix = new PIXI.Matrix, this.speed = 8, PIXI.Filter.call(this, null, fragShaderSrc, {
                        intensity: {
                            type: "f",
                            value: 0
                        },
                        starOffset: {
                            type: "f",
                            value: 0
                        },
                        mappedMatrix: {
                            type: "mat3",
                            value: this.maskMatrix
                        }
                    })
                }
                var fragShaderSrc = (require("../Common"), "precision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\n\r\nuniform float intensity;\r\nuniform float starOffset;\r\nuniform mat3 mappedMatrix;\r\n\r\nfloat rand(float n){\r\n    return fract(sin(n) * 43758.5453123);\r\n}\r\n\r\nvec4 mapStar(vec2 position, float intensity, float angleOffset) {\r\n    vec4 color = vec4(vec3(0.0), 1.0);\r\n\r\n    float angle = atan(position.y, position.x) + angleOffset;\r\n\r\n    //float angleNumber = 20.0;\r\n    float angleNumber = 34.0;\r\n\r\n    float random = rand(floor(angle * angleNumber) * 100.0);\r\n\r\n    float distance = random;\r\n    distance += starOffset * 0.001;\r\n    distance = fract(distance);\r\n\r\n    float fragDistance = length(position);\r\n\r\n    float size = smoothstep(-0.1, 2.0, intensity);\r\n\r\n    float bounded = step(distance, fragDistance) * step(fragDistance, distance + size);\r\n    bounded += step(fragDistance, fract(distance + size)) * step(fract(distance + size), distance);\r\n\r\n    color.rgb = mix(vec3(0.0), vec3(1.0), bounded);\r\n\r\n    //color.r *= 0.3;\r\n    //color.g *= 0.7 + random * 0.3;\r\n    //color.b *= 2.0;\r\n\r\n    color.r *= 0.6;\r\n    color.g *= 0.7 + random * 0.42;\r\n    color.b *= 2.0;\r\n\r\n    // hard edges\r\n    float angleCenter = abs(fract(angle * angleNumber) * 2.0 - 1.0);\r\n    color.a = step(angleCenter, smoothstep(-0.2, 1.0, intensity));\r\n\r\n    // smooth gradient\r\n    color.a *= 1.0 - angleCenter;\r\n\r\n    color.a *= smoothstep(0.0, 1.0, fragDistance);\r\n    color.a *= cos(pow(random, 5.0) * starOffset * 0.001) * 0.5 + 0.5;\r\n\r\n    return color;\r\n}\r\n\r\nvoid main() {\r\n    vec3 mapCoord = vec3(vTextureCoord, 1.0) * mappedMatrix;\r\n\r\n    vec4 color = vec4(vec3(0.05), 1.0);\r\n    for (float i = 0.0; i < 2.0; ++ i) {\r\n        vec4 starColor = mapStar(vec2(mapCoord.x - 0.5, mapCoord.y - 0.5), intensity, i * 20.0);\r\n        color.rgb += starColor.rgb * starColor.a;\r\n    }\r\n\r\n    gl_FragColor = color;\r\n}\r\n");
                module.exports = LightSpeedFilter, LightSpeedFilter.prototype = Object.create(PIXI.Filter.prototype), LightSpeedFilter.prototype.constructor = LightSpeedFilter, LightSpeedFilter.prototype.apply = function(filterManager, input, output) {
                    this.maskSprite ? this.uniforms.mappedMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite) : filterManager.calculateNormalizedScreenSpaceMatrix(this.uniforms.mappedMatrix), filterManager.applyFilter(this, input, output)
                }, LightSpeedFilter.prototype.update = function() {
                    this.uniforms.starOffset += this.speed + this.intensity * p3.Timestep.deltaTime
                }, LightSpeedFilter.prototype.enterLightSpeed = function(duration, callback, scope) {
                    duration = duration || 3, TweenMax.to(this.uniforms, duration, {
                        intensity: 1,
                        ease: Power4.easeInOut,
                        onComplete: callback,
                        onCompleteScope: scope
                    }), TweenMax.to(this, duration, {
                        speed: 34,
                        ease: Power4.easeInOut
                    })
                }, LightSpeedFilter.prototype.exitLightSpeed = function(duration, callback, scope) {
                    duration = duration || 2, TweenMax.to(this.uniforms, duration, {
                        intensity: 0,
                        ease: Power2.easeInOut,
                        onComplete: callback,
                        onCompleteScope: scope
                    }), TweenMax.to(this, duration, {
                        speed: 1,
                        ease: Power2.easeInOut
                    })
                }, Object.defineProperty(LightSpeedFilter.prototype, "intensity", {
                    get: function() {
                        return this.uniforms.intensity
                    },
                    set: function(value) {
                        this.uniforms.intensity = value
                    }
                })
            }, {
                "../Common": 5
            }
        ],
        73: [
            function(require, module, exports) {
                "use strict";

                function ScanlinesFilter(sprite) {
                    this.maskSprite = sprite, this.maskMatrix = new PIXI.Matrix, PIXI.Filter.call(this, null, fragShaderSrc, {
                        time: {
                            type: "f",
                            value: 0
                        },
                        multi: {
                            type: "f",
                            value: 1
                        },
                        mappedMatrix: {
                            type: "mat3",
                            value: this.maskMatrix
                        }
                    }), this.multi = this.nextPowerOfTwo(sprite.height * sprite.parent.scale.y) / 400
                }
                var fragShaderSrc = (require("../Common"), "precision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\n\r\nuniform float time;\r\nuniform float multi;\r\nuniform mat3 mappedMatrix;\r\n\r\nvoid main() {\r\n    vec3 mapCoord = vec3(vTextureCoord, 1.0) * mappedMatrix;\r\n    vec4 color = texture2D(uSampler, vTextureCoord);\r\n    color -= abs(sin(vTextureCoord.y * 200.0 * multi + time * 2.5)) * 0.04;\r\n    color -= abs(sin(vTextureCoord.y * 400.0 * multi + time * 5.0)) * 0.02;\r\n    gl_FragColor = color;\r\n}");
                module.exports = ScanlinesFilter, ScanlinesFilter.prototype = Object.create(PIXI.Filter.prototype), ScanlinesFilter.prototype.constructor = ScanlinesFilter, ScanlinesFilter.prototype.apply = function(filterManager, input, output) {
                    this.maskSprite ? this.uniforms.mappedMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite) : filterManager.calculateNormalizedScreenSpaceMatrix(this.uniforms.mappedMatrix), filterManager.applyFilter(this, input, output)
                }, ScanlinesFilter.prototype.nextPowerOfTwo = function(n) {
                    return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)))
                }, Object.defineProperty(ScanlinesFilter.prototype, "time", {
                    get: function() {
                        return this.uniforms.time
                    },
                    set: function(value) {
                        this.uniforms.time = value
                    }
                }), Object.defineProperty(ScanlinesFilter.prototype, "multi", {
                    get: function() {
                        return this.uniforms.multi
                    },
                    set: function(value) {
                        this.uniforms.multi = value
                    }
                })
            }, {
                "../Common": 5
            }
        ],
        74: [
            function(require, module, exports) {
                "use strict";

                function SwipeFilter() {
                    PIXI.Filter.call(this, null, fragShaderSrc, {
                        progress: {
                            type: "f",
                            value: 0
                        },
                        mappedMatrix: {
                            type: "mat3",
                            value: new PIXI.Matrix
                        }
                    })
                }
                var fragShaderSrc = (require("../Common"), "precision highp float;\r\n\r\n#define PI 3.14159265359\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\n\r\nuniform float progress;\r\nuniform mat3 mappedMatrix;\r\n\r\nvoid main() {\r\n    vec3 mapCoord = vec3(vTextureCoord, 1.0) * mappedMatrix;\r\n    vec2 position = vTextureCoord;\r\n    position.x -= 0.5 * (vTextureCoord.x / mapCoord.x);\r\n    position.y -= 0.5 * (vTextureCoord.y / mapCoord.y);\r\n\r\n    float angle = atan(position.y, position.x);\r\n    angle += PI;\r\n\r\n    float progressAngle = progress * (PI * 2.5) - 1.25;\r\n\r\n    vec4 color = vec4(0.0);\r\n    color = mix(vec4(0.0), texture2D(uSampler, vTextureCoord), smoothstep(0.0, 1.0, angle - progressAngle));\r\n    gl_FragColor = color;\r\n}");
                module.exports = SwipeFilter, SwipeFilter.prototype = Object.create(PIXI.Filter.prototype), SwipeFilter.prototype.constructor = SwipeFilter, SwipeFilter.prototype.apply = function(filterManager, input, output) {
                    filterManager.calculateNormalizedScreenSpaceMatrix(this.uniforms.mappedMatrix), filterManager.applyFilter(this, input, output)
                }, Object.defineProperty(SwipeFilter.prototype, "progress", {
                    get: function() {
                        return this.uniforms.progress
                    },
                    set: function(value) {
                        this.uniforms.progress = value
                    }
                })
            }, {
                "../Common": 5
            }
        ],
        75: [
            function(require, module, exports) {
                "use strict";

                function SwipeTransition() {
                    p3.Transition.call(this), this.crossfade = !0
                }
                var SwipeFilter = require("./SwipeFilter");
                module.exports = SwipeTransition, SwipeTransition.prototype = Object.create(p3.Transition.prototype), SwipeTransition.prototype.constructor = SwipeTransition, SwipeTransition.prototype.init = function() {
                    this.newScene.filters = [new SwipeFilter]
                }, SwipeTransition.prototype.reset = function() {
                    this.signals.in.removeAll(), this.signals.out.removeAll(), this.removeChildren()
                }, SwipeTransition.prototype.destroy = function() {
                    this.signals.in.dispose(), this.signals.out.dispose(), this.removeChildren()
                }, SwipeTransition.prototype.dispose = SwipeTransition.prototype.destroy, SwipeTransition.prototype.in = function() {
                    this.newScene.filterArea = new PIXI.Rectangle(0, 0, p3.View.width, p3.View.height);
                    var filter = this.newScene.filters[0];
                    filter.progress = 1, TweenMax.to(filter, 1.4, {
                        delay: 1,
                        progress: 0,
                        ease: Power0.easeNone,
                        onComplete: function() {
                            this.newScene.filters = null, this.signals.in.dispatch(this)
                        },
                        onCompleteScope: this
                    })
                }, SwipeTransition.prototype.out = function() {
                    this.signals.out.dispatch(this)
                }, SwipeTransition.prototype.resize = function() {}, SwipeTransition.prototype.fallback = function() {}
            }, {
                "./SwipeFilter": 74
            }
        ],
        76: [
            function(require, module, exports) {
                "use strict";

                function AchievementsOverlay(subMenu) {
                    p3.Scene.call(this), this.subMenu = !!subMenu
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    Slider = (require("../Utils"), require("../ui/Slider")),
                    SWButton = require("../ui/SWButton"),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = AchievementsOverlay, AchievementsOverlay.prototype = Object.create(p3.Scene.prototype), AchievementsOverlay.prototype.constructor = AchievementsOverlay, AchievementsOverlay.prototype.init = function() {
                    this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .9, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this.subMenu || this.addChild(this._bg), this._deviceContainer = new PIXI.Container, this.addChild(this._deviceContainer), this._deviceBotSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box")), this._deviceBotSprite.anchor = new PIXI.Point(.5, .5), this._deviceBotSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT + 260), this._deviceContainer.addChild(this._deviceBotSprite), this._deviceScreenBottomSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box_display")), this._deviceScreenBottomSprite.anchor = new PIXI.Point(.5, .5), this._deviceBotSprite.addChild(this._deviceScreenBottomSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenBottomSprite);
                    this._deviceScreenBottomSprite.filters = [filter], this._deviceSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small")), this._deviceSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._deviceContainer.addChild(this._deviceSprite), this._deviceScreenSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small_display")), this._deviceScreenSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceScreenSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenSprite);
                    this._deviceScreenSprite.filters = [filter], this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(-30, -282), this._deviceSprite.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter];
                    var text = Common.copy.TROPHIES[Common.COUNTRY_CODE];
                    webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.position.set(-25, -290), this._deviceSprite.addChild(this._title), this._deviceCloseSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_close")), this._deviceCloseSprite.anchor = new PIXI.Point(.5, .5), this._deviceCloseSprite.position = new PIXI.Point(0, 0), this._deviceSprite.addChild(this._deviceCloseSprite), this._deviceScrollSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_scroll_small")), this._deviceScrollSprite.anchor = new PIXI.Point(.5, .5), this._deviceScrollSprite.position = new PIXI.Point(0, 0), this._deviceSprite.addChild(this._deviceScrollSprite), this._btnContainer = new PIXI.Container, this._btnContainer.scale.set(.75), this._btnContainer.x = this._deviceCloseSprite.x + 368, this._btnContainer.y = this._deviceCloseSprite.y - 222, this._deviceSprite.addChild(this._btnContainer);
                    var btnCloseStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_red_medium_out"), p3.AssetManager.instance.getTexture("ui_button_red_medium_over"), p3.AssetManager.instance.getTexture("ui_button_red_medium_down"), p3.AssetManager.instance.getTexture("ui_icon_negative"));
                    this._closeButton = new SWButton(btnCloseStates), this._closeButton.downSoundName = "sfx_ui_btn_press_01", this._closeButton.signals.down.addOnce(this.onCloseBtn_click, this), this._btnContainer.addChild(this._closeButton);
                    var TROPHY_ITEM_SCALE = .8,
                        TROPHY_ITEM_MARGIN = 20,
                        contentMask = new PIXI.Graphics;
                    contentMask.beginFill(), contentMask.drawRect(-350, -224, 640, 400), contentMask.endFill(), this._deviceSprite.addChild(contentMask), this._contentContainer = new PIXI.Container, this._contentContainer.mask = contentMask, this._contentContainer.position = new PIXI.Point(-220, -80), this._deviceSprite.addChild(this._contentContainer);
                    var btnTrophyOffStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("hub_icon_medal_off_out"), p3.AssetManager.instance.getTexture("hub_icon_medal_off_over"), p3.AssetManager.instance.getTexture("hub_icon_medal_off_over")),
                        btnTrophyOnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("hub_icon_medal_on_out"), p3.AssetManager.instance.getTexture("hub_icon_medal_on_over"), p3.AssetManager.instance.getTexture("hub_icon_medal_on_over"));
                    this._trophyButtons = [];
                    for (var i = 0; i < 9; ++i) {
                        var data = Common.savedData.getTrophyData(i),
                            achieved = Common.savedData.getTrophyStatus(i),
                            icon = data.texture.replace("medals/", "");
                        if (i < 4) var name = p3.AssetManager.instance.getJSON("strings")[data.name][Common.COUNTRY_CODE],
                            desc = p3.AssetManager.instance.getJSON("strings")[data.description][Common.COUNTRY_CODE];
                        else var name = p3.AssetManager.instance.getJSON("strings").TROPHY_COMING_SOON_1[Common.COUNTRY_CODE],
                            desc = p3.AssetManager.instance.getJSON("strings").TROPHY_COMING_SOON_2[Common.COUNTRY_CODE];
                        var trophyButton = new p3.Button(achieved ? btnTrophyOnStates : btnTrophyOffStates);
                        if (trophyButton.overSoundName = "sfx_ui_btn_rollover_00", trophyButton.downSoundName = "sfx_ui_btn_press_00", trophyButton.x = trophyButton._background.width * (i % 3) * TROPHY_ITEM_SCALE, trophyButton.x += i % 3 * TROPHY_ITEM_MARGIN, trophyButton.y = (trophyButton._background.height * TROPHY_ITEM_SCALE + TROPHY_ITEM_MARGIN) * Math.floor(i / 3), trophyButton.name = name, trophyButton.desc = desc, trophyButton.scale.set(TROPHY_ITEM_SCALE), trophyButton.signals.down.add(this.onTrophyClicked, this), this._contentContainer.addChild(trophyButton), trophyButton.selectedBg = new PIXI.Sprite(p3.AssetManager.instance.getTexture(achieved ? "hub_icon_medal_on_over" : "hub_icon_medal_off_over")), trophyButton.selectedBg.visible = !1, trophyButton.selectedBg.anchor.set(.5), trophyButton.addChild(trophyButton.selectedBg), achieved) {
                            var icon = new PIXI.Sprite(p3.AssetManager.instance.getTexture(icon));
                            icon.anchor.set(.5), trophyButton.addChild(icon)
                        }
                        this._trophyButtons.push(trophyButton)
                    }
                    webfont ? this._name = new PIXI.Text("", {
                        fontFamily: "Arial",
                        fontSize: 30,
                        fill: 16777215,
                        align: "center"
                    }) : this._name = new PIXI.extras.BitmapText("", {
                        font: "30px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._name.anchor.set(.5), this._name.position.set(0, 242), this._deviceSprite.addChild(this._name), webfont ? this._description = new PIXI.Text("", {
                        fontFamily: "Arial",
                        fontSize: 22,
                        fill: 16777215,
                        align: "center"
                    }) : this._description = new PIXI.extras.BitmapText("", {
                        font: "22px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._description.anchor.set(.5), this._description.position.set(0, 278), this._deviceSprite.addChild(this._description), this._scrollSlider = new Slider(p3.AssetManager.instance.getTexture("ui_scroll_slider"), this._contentContainer, this._contentContainer.height + 20, 356, 200), this._scrollSlider.anchor = new PIXI.Point(.5, .5), this._scrollSlider.position = new PIXI.Point(this._deviceScrollSprite.x + 356, this._deviceScrollSprite.y - 85), this._scrollSlider.init(), this._deviceSprite.addChild(this._scrollSlider), this._metalGuySprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_char_1")), this._metalGuySprite.anchor = new PIXI.Point(0, 1), this._metalGuySprite.x = 330, this._metalGuySprite.y = Common.STAGE_HEIGHT, this.addChild(this._metalGuySprite), this.onTrophyClicked(this._trophyButtons[Common.savedData.trophies.length > 0 ? Common.savedData.trophies[Common.savedData.trophies.length - 1] : 0])
                }, AchievementsOverlay.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, AchievementsOverlay.prototype.end = function() {}, AchievementsOverlay.prototype.show = function() {}, AchievementsOverlay.prototype.animateIn = function(callback, scope) {
                    this._bg.alpha = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._bg, .3, {
                        alpha: .9,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._deviceContainer, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        x: this._metalGuySprite.x,
                        ease: Back.easeOut
                    }, 0), Common.animator.add(tl), this._deviceContainer.alpha = 0, this._metalGuySprite.x -= 100, this._metalGuySprite.alpha = 0
                }, AchievementsOverlay.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._deviceContainer, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        x: this._metalGuySprite.x - 50,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(tl)
                }, AchievementsOverlay.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH)
                }, AchievementsOverlay.prototype.update = function() {
                    this._deviceScreenSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenBottomSprite.filters[0].time -= 5 * p3.Timestep.deltaTime
                }, AchievementsOverlay.prototype.onTrophyClicked = function(trophy) {
                    this._name.text = trophy.name, this._description.text = trophy.desc;
                    for (var i = 0; i < this._trophyButtons.length; i++) this._trophyButtons[i].selectedBg.visible = !1;
                    trophy.selectedBg.visible = !0
                }, AchievementsOverlay.prototype.onCloseBtn_click = function() {
                    this.animateOut(function() {
                        this.signals.previous.dispatch()
                    }, this)
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/SWButton": 92,
                "../ui/Slider": 93
            }
        ],
        77: [
            function(require, module, exports) {
                function ArcadeGameOverOverlay() {
                    p3.Scene.call(this), this._score = 0, this._showHighscores = Common.savedData.lastArcadeMatch.isDailyRecord, this._firstTime = !0, this._dataSent = !1, this.signals.showAchievements = new signals.Signal, this.signals.showLeaderboard = new signals.Signal, this.signals.restart = new signals.Signal, this.signals.home = new signals.Signal
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    Utils = require("../Utils"),
                    SWButton = require("../ui/SWButton"),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = ArcadeGameOverOverlay, ArcadeGameOverOverlay.prototype = Object.create(p3.Scene.prototype), ArcadeGameOverOverlay.prototype.constructor = ArcadeGameOverOverlay, ArcadeGameOverOverlay.prototype.init = function() {
                    Common.savedData.lastArcadeMatch.score > 0 && (Common.savedData.logScore(Common.savedData.name, Common.savedData.lastArcadeMatch.score, Common.savedData.lastArcadeMatch.missionsCompleted), Common.hiscoreManager.send(Common.savedData.name, Common.savedData.arcade.lastScore, function(data) {
                        console.log("Score sent!", data), this._dataSent = !data.error
                    }.bind(this))), this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .9, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this.addChild(this._bg), this._deviceContainer = new PIXI.Container, this.addChild(this._deviceContainer), this._deviceSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small")), this._deviceSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._deviceContainer.addChild(this._deviceSprite), this._deviceScreenSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small_display")), this._deviceScreenSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceScreenSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenSprite);
                    this._deviceScreenSprite.filters = [filter], this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(-30, -282), this._deviceSprite.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter];
                    var text = Common.copy.GAME_OVER[Common.COUNTRY_CODE];
                    webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.position.set(-25, -290), this._deviceSprite.addChild(this._title), this._deviceGameOverSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_game_over")), this._deviceGameOverSprite.anchor = new PIXI.Point(.5, .5), this._deviceGameOverSprite.position = new PIXI.Point(0, 0), this._deviceSprite.addChild(this._deviceGameOverSprite);
                    var text = Common.copy.MISSIONS_COMPLETED[Common.COUNTRY_CODE];
                    webfont ? this._missionCountTitle = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 30,
                        fill: 16777215,
                        align: "center"
                    }) : this._missionCountTitle = new PIXI.extras.BitmapText(text, {
                        font: "30px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._missionCountTitle.anchor = new PIXI.Point(.5, 1), this._missionCountTitle.position = new PIXI.Point(-200, 7), this._deviceSprite.addChild(this._missionCountTitle), this._missionCountText = new PIXI.extras.BitmapText(Common.savedData.arcade.lastMissionCount + "x", {
                        font: "70px Great Escape Big",
                        tint: 16777215,
                        align: "left"
                    }), this._missionCountText.anchor = new PIXI.Point(1, .5), this._missionCountText.position = new PIXI.Point(-200, -112), this._deviceSprite.addChild(this._missionCountText), this._missionIconSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_icon_mission")), this._missionIconSprite.anchor = new PIXI.Point(0, .5), this._missionIconSprite.scale = new PIXI.Point(.7, .7), this._missionIconSprite.position = new PIXI.Point(this._missionCountText.position.x + 10, this._missionCountText.position.y), this._deviceSprite.addChild(this._missionIconSprite);
                    var btnLeaderboardStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_leaderboard"));
                    this._leaderboardButton = new SWButton(btnLeaderboardStates), this._leaderboardButton.position.set(-268, 125), this._leaderboardButton.signals.down.add(this.onLeaderboardBtn_click, this), this._deviceSprite.addChild(this._leaderboardButton);
                    var btnAchievementsStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_trophies"));
                    this._achievementsButton = new SWButton(btnAchievementsStates), this._achievementsButton.position.set(-138, 125), this._achievementsButton.signals.down.add(this.onAchievementsBtn_click, this), this._deviceSprite.addChild(this._achievementsButton);
                    var btnRestartStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_gold_out"), p3.AssetManager.instance.getTexture("ui_button_gold_over"), p3.AssetManager.instance.getTexture("ui_button_gold_down"), p3.AssetManager.instance.getTexture("ui_icon_replay"));
                    this._restartButton = new SWButton(btnRestartStates), this._restartButton.position.set(300, 120), this._restartButton.signals.down.addOnce(this.onRestartBtn_click, this), this._deviceSprite.addChild(this._restartButton), this._wellDoneContainer = new PIXI.Container, this._wellDoneContainer.position.set(0, -210), this._deviceSprite.addChild(this._wellDoneContainer);
                    var text = Common.copy[Common.savedData.arcade.lastMissionCount > 0 ? "WELL_DONE" : "TRY_AGAIN"][Common.COUNTRY_CODE],
                        placeholder = "{NAME}",
                        placeholderIndex = text.indexOf(placeholder),
                        textBefore = $.trim(text.substr(0, placeholderIndex)),
                        textAfter = $.trim(text.substr(placeholderIndex + placeholder.length, 100)),
                        name = Common.savedData.name,
                        gap = 10;
                    webfont ? this._wellDoneTextBefore = new PIXI.Text(textBefore, {
                        fontFamily: "Arial",
                        fontSize: 44,
                        fill: 16777215,
                        align: "left"
                    }) : this._wellDoneTextBefore = new PIXI.extras.BitmapText(textBefore, {
                        font: "44px Great Escape",
                        tint: 16777215,
                        align: "left"
                    }), this._wellDoneContainer.addChild(this._wellDoneTextBefore), webfont ? this._wellDoneName = new PIXI.Text(name, {
                        fontFamily: "Arial",
                        fontSize: 44,
                        fill: 16771584,
                        align: "left"
                    }) : this._wellDoneName = new PIXI.extras.BitmapText(name, {
                        font: "44px Great Escape",
                        tint: 16771584,
                        align: "left"
                    }), this._wellDoneContainer.addChild(this._wellDoneName), this._wellDoneName.x = this._wellDoneTextBefore.width + gap, webfont ? this._wellDoneTextAfter = new PIXI.Text(textAfter, {
                        fontFamily: "Arial",
                        fontSize: 44,
                        fill: 16777215,
                        align: "left"
                    }) : this._wellDoneTextAfter = new PIXI.extras.BitmapText(textAfter, {
                        font: "44px Great Escape",
                        tint: 16777215,
                        align: "left"
                    }), this._wellDoneContainer.addChild(this._wellDoneTextAfter), this._wellDoneTextAfter.x = this._wellDoneTextBefore.width + this._wellDoneName.width + 2 * gap, this._wellDoneContainer.x -= (this._wellDoneTextBefore.width + this._wellDoneName.width + this._wellDoneTextAfter.width + 2 * gap) / 2, this._scoreText = new PIXI.extras.BitmapText("0", {
                        font: "66px Great Escape Big",
                        tint: 16777215,
                        align: "left"
                    }), this._scoreText.x = -30, this._scoreText.y = -150, this._deviceSprite.addChild(this._scoreText), this._progressContainer = new PIXI.Container, this._progressContainer.position.set(this._scoreText.x, -50), this._deviceSprite.addChild(this._progressContainer), this._bestProgressSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_gameover_yellowbar")), this._bestProgressSprite.anchor = new PIXI.Point(0, .5), this._bestProgressSprite.x = 0, this._bestProgressSprite.y = 50, this._progressContainer.addChild(this._bestProgressSprite);
                    var text = Common.copy.HIGHSCORE[Common.COUNTRY_CODE] + " " + Common.savedData.arcade.highScore.toLocaleString("en-US");
                    webfont ? this._bestScoreText = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 30,
                        fill: 16771584,
                        align: "left"
                    }) : this._bestScoreText = new PIXI.extras.BitmapText(text, {
                        font: "30px Great Escape",
                        tint: 16771584,
                        align: "left"
                    }), this._bestScoreText.x = 0, this._bestScoreText.y = this._bestProgressSprite.y + 20, this._progressContainer.addChild(this._bestScoreText), this._currentProgressStartSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_gameover_whitebar_start")), this._currentProgressMiddleSprite = new PIXI.Sprite(Common.generatedTextures.whiteSquare), this._currentProgressEndSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_gameover_whitebar_end")), this._currentProgressStartSprite.anchor = new PIXI.Point(0, .5), this._progressContainer.addChild(this._currentProgressStartSprite), this._currentProgressMiddleSprite.anchor = new PIXI.Point(0, .5), this._currentProgressMiddleSprite.x = this._currentProgressStartSprite.width, this._currentProgressMiddleSprite.y = this._currentProgressStartSprite.y, this._currentProgressMiddleSprite.scale = new PIXI.Point(0, 21), this._progressContainer.addChild(this._currentProgressMiddleSprite), this._currentProgressEndSprite.anchor = new PIXI.Point(0, .5), this._currentProgressEndSprite.x = this._currentProgressMiddleSprite.x + this._currentProgressMiddleSprite.width - 1, this._currentProgressEndSprite.y = this._currentProgressStartSprite.y, this._progressContainer.addChild(this._currentProgressEndSprite);
                    var maxScale = (this._bestProgressSprite.width - this._currentProgressEndSprite.width) / 2;
                    if (0 == Common.savedData.arcade.highScore) percentage = 1;
                    else var percentage = Common.savedData.arcade.lastScore / Common.savedData.arcade.highScore;
                    Common.savedData.arcade.lastScore > 0 && (this._scoreLoop = Common.audio.playSound("sfx_scoreloop_00", {
                        loop: !0
                    }));
                    var tl = new TimelineMax({
                        onCompleteScope: this,
                        onComplete: function() {
                            this.stopScoreLoop()
                        }
                    });
                    tl.to(this._currentProgressMiddleSprite.scale, 2, {
                        x: maxScale * percentage,
                        ease: Power1.easeOut,
                        onUpdateScope: this,
                        onUpdate: function() {
                            this._currentProgressEndSprite.x = this._currentProgressMiddleSprite.x + this._currentProgressMiddleSprite.width - 1
                        }
                    }, 0), tl.to(this, 2, {
                        _score: Common.savedData.arcade.lastScore,
                        ease: Sine.easeOut,
                        onUpdateScope: this,
                        onUpdate: function() {
                            this._scoreText.text = Math.ceil(this._score).toLocaleString("en-US")
                        }
                    }, 0), Common.animator.add(tl);
                    var btnHomeStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_home"));
                    this._homeButton = new SWButton(btnHomeStates), this._homeButton.downSoundName = "sfx_ui_btn_press_01", this._homeButton.position.set(Utils.getFirstButtonPositionLeft(), 80), this._homeButton.signals.down.addOnce(this.onHomeBtn_click, this), this.addChild(this._homeButton), this._metalGuySprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_char_3")), this._metalGuySprite.anchor = new PIXI.Point(0, 1), this._metalGuySprite.endX = 330, this._metalGuySprite.position = new PIXI.Point(this._metalGuySprite.endX, Common.STAGE_HEIGHT), this.addChild(this._metalGuySprite), Common.bgMusic && Common.bgMusic.howl.fade(Common.bgMusicVolume, 0, 500, Common.bgMusic.id), Common.bgMusic = Common.audio.playSound("music_menu_strings_gentle_00", {
                        loop: !0,
                        volume: 0
                    }), Common.bgMusic.howl.fade(0, Common.bgMusicVolume, 500, Common.bgMusic.id), this._leaderboardButton.scale.set(0), this._achievementsButton.scale.set(0), this._restartButton.scale.set(0), delay(function() {
                        if (this._firstTime = !1, this._showHighscores && this._dataSent) this.onLeaderboardBtn_click();
                        else {
                            var tl = new TimelineMax;
                            tl.to(this._leaderboardButton.scale, .5, {
                                x: 1,
                                y: 1,
                                ease: Back.easeOut
                            }, 0), tl.to(this._achievementsButton.scale, .5, {
                                x: 1,
                                y: 1,
                                ease: Back.easeOut
                            }, .15), tl.to(this._restartButton.scale, .5, {
                                x: 1,
                                y: 1,
                                ease: Back.easeOut
                            }, .3)
                        }
                    }, 2, this)
                }, ArcadeGameOverOverlay.prototype.stopScoreLoop = function() {
                    this._scoreLoop && (Common.audio.stopSound("sfx_scoreloop_00", this._scoreLoop.id), this._scoreLoop = null)
                }, ArcadeGameOverOverlay.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, ArcadeGameOverOverlay.prototype.end = function() {}, ArcadeGameOverOverlay.prototype.show = function() {}, ArcadeGameOverOverlay.prototype.animateIn = function(callback, scope) {
                    this.showGUI(), this._bg.alpha = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._bg, .3, {
                        alpha: .9,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(tl)
                }, ArcadeGameOverOverlay.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .3, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), Common.animator.add(tl), this.stopScoreLoop()
                }, ArcadeGameOverOverlay.prototype.showGUI = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._deviceContainer, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._deviceContainer, .3, {
                        y: 0,
                        ease: Quad.easeOut
                    }, 0), tl.to(this._homeButton.scale, .5, {
                        x: 1,
                        y: 1,
                        ease: Back.easeOut
                    }, 2), tl.to(this._metalGuySprite, .6, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        x: this._metalGuySprite.endX,
                        ease: Back.easeOut
                    }, 0), Common.animator.add(tl), this._homeButton.scale.set(0), this._deviceContainer.alpha = 0, this._deviceContainer.y = -120, this._metalGuySprite.x = this._metalGuySprite.endX - 150, this._metalGuySprite.alpha = 0, this._firstTime || (this._leaderboardButton.scale.set(1), this._achievementsButton.scale.set(1), this._restartButton.scale.set(1))
                }, ArcadeGameOverOverlay.prototype.hideGUI = function(callback, scope) {
                    this._deviceContainer.y = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._deviceContainer, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._homeButton.scale, .5, {
                        x: 0,
                        y: 0,
                        ease: Back.easeIn
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        x: this._metalGuySprite.x - 100,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(tl), this.stopScoreLoop()
                }, ArcadeGameOverOverlay.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH), this._homeButton.x = Utils.getFirstButtonPositionLeft()
                }, ArcadeGameOverOverlay.prototype.update = function() {
                    this._deviceScreenSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime
                }, ArcadeGameOverOverlay.prototype.onHomeBtn_click = function() {
                    this.stopScoreLoop(), this.signals.home.dispatch()
                }, ArcadeGameOverOverlay.prototype.onRestartBtn_click = function() {
                    this.stopScoreLoop(), this.signals.restart.dispatch()
                }, ArcadeGameOverOverlay.prototype.onLeaderboardBtn_click = function() {
                    this.hideGUI(function() {
                        this.signals.showLeaderboard.dispatch()
                    }, this)
                }, ArcadeGameOverOverlay.prototype.onAchievementsBtn_click = function() {
                    this.hideGUI(function() {
                        this.signals.showAchievements.dispatch()
                    }, this)
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/SWButton": 92
            }
        ],
        78: [
            function(require, module, exports) {
                "use strict";

                function ArcadePauseOverlay() {
                    p3.Scene.call(this), this.signals.restart = new signals.Signal, this.signals.resume = new signals.Signal, this.signals.quit = new signals.Signal, this.signals.showHowToPlay = new signals.Signal, this.signals.showAchievements = new signals.Signal
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    Utils = require("../Utils"),
                    MuteButton = require("../ui/MuteButton"),
                    SWButton = require("../ui/SWButton"),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = ArcadePauseOverlay, ArcadePauseOverlay.prototype = Object.create(p3.Scene.prototype), ArcadePauseOverlay.prototype.constructor = ArcadePauseOverlay, ArcadePauseOverlay.prototype.init = function() {
                    this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .9, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this.addChild(this._bg), this._deviceContainer = new PIXI.Container, this.addChild(this._deviceContainer), this._deviceSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_large")), this._deviceSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._deviceContainer.addChild(this._deviceSprite), this._deviceScreenSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_large_display")), this._deviceScreenSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceScreenSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenSprite);
                    this._deviceScreenSprite.filters = [filter], this._deviceQuitSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_quit")), this._deviceQuitSprite.anchor = new PIXI.Point(.5, .5), this._deviceQuitSprite.position = new PIXI.Point(0, 81), this._deviceSprite.addChild(this._deviceQuitSprite), this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(0, -282), this._deviceSprite.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter];
                    var text = Common.copy.PAUSED[Common.COUNTRY_CODE];
                    webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.y -= 290, this._deviceSprite.addChild(this._title);
                    var btnPlayStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_gold_out"), p3.AssetManager.instance.getTexture("ui_button_gold_over"), p3.AssetManager.instance.getTexture("ui_button_gold_down"), p3.AssetManager.instance.getTexture("ui_icon_play"));
                    this._playButton = new SWButton(btnPlayStates), this._playButton.x = 300.5, this._playButton.y = 196.5, this._playButton.signals.down.addOnce(this.onResumeBtn_click, this), this._deviceSprite.addChild(this._playButton);
                    var btnReplayStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_gold_out"), p3.AssetManager.instance.getTexture("ui_button_gold_over"), p3.AssetManager.instance.getTexture("ui_button_gold_down"), p3.AssetManager.instance.getTexture("ui_icon_replay"));
                    this._replayButton = new SWButton(btnReplayStates), this._replayButton.x = 75, this._replayButton.y = 196, this._replayButton.signals.down.addOnce(this.onRestartBtn_click, this), this._deviceSprite.addChild(this._replayButton);
                    var btnHelpStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_help"));
                    this._helpButton = new SWButton(btnHelpStates), this._helpButton.x = -320, this._helpButton.y = 211, this._helpButton.signals.down.add(this.onHowToPlayBtn_click, this), this._deviceSprite.addChild(this._helpButton), this._missionIconSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture(Common.gameWorld.missionManager.mission.icon)), this._missionIconSprite.scale.set(1.3), this._missionIconSprite.anchor = new PIXI.Point(.5, .5), this._missionIconSprite.position = new PIXI.Point(0, -120), this._deviceSprite.addChild(this._missionIconSprite);
                    var tl = new TimelineMax;
                    tl.to(this._missionIconSprite, 1, {
                        y: this._missionIconSprite.y + 10,
                        ease: Sine.easeInOut,
                        yoyo: !0,
                        repeat: -1
                    }, 0), Common.animator.add(tl);
                    var text = Common.copy.CURRENT_MISSION[Common.COUNTRY_CODE];
                    webfont ? this._missionObjectiveText = new PIXI.Text(Common.gameWorld.missionManager.mission.description, {
                        fontFamily: "Arial",
                        fontSize: 48,
                        fill: 16777215,
                        align: "center"
                    }) : this._missionObjectiveText = new PIXI.extras.BitmapText(text, {
                        font: "48px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._missionObjectiveText.anchor.set(.5), this._missionObjectiveText.y = -20, this._deviceSprite.addChild(this._missionObjectiveText);
                    var text = Common.gameWorld.missionManager.mission.description;
                    webfont ? this._missionDescriptionText = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 28,
                        fill: 65535,
                        align: "center"
                    }) : this._missionDescriptionText = new PIXI.extras.BitmapText(text, {
                        font: "28px Great Escape",
                        tint: 65535,
                        align: "center"
                    }), this._missionDescriptionText.anchor.set(.5), this._missionDescriptionText.y = 40, this._deviceSprite.addChild(this._missionDescriptionText);
                    var btnHomeStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_home"));
                    this._homeButton = new SWButton(btnHomeStates), this._homeButton.downSoundName = "sfx_ui_btn_press_01", this._homeButton.x = Utils.getFirstButtonPositionLeft(), this._homeButton.y = 80, this._homeButton.signals.down.add(this.onQuitBtn_click, this), this.addChild(this._homeButton);
                    var muteBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_sound_" + (Common.audio.isMute ? "off" : "on")));
                    this._muteButton = new MuteButton(muteBtnStates, p3.AssetManager.instance.getTexture("ui_icon_sound_on"), p3.AssetManager.instance.getTexture("ui_icon_sound_off")), this._muteButton.x = Utils.getFirstButtonPositionRight(), this._muteButton.y = 80, this.addChild(this._muteButton)
                }, ArcadePauseOverlay.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, ArcadePauseOverlay.prototype.end = function() {}, ArcadePauseOverlay.prototype.show = function() {}, ArcadePauseOverlay.prototype.animateIn = function(callback, scope) {
                    this.showGUI(), this._bg.alpha = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._bg, .3, {
                        alpha: .9,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(tl)
                }, ArcadePauseOverlay.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .3, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), Common.animator.add(tl)
                }, ArcadePauseOverlay.prototype.showGUI = function(callback, scope) {
                    this._deviceContainer.alpha = 0, this._deviceContainer.y = -120, this._muteButton.scale.set(0), this._homeButton.scale.set(0), this._homeButton.alpha = 1, this._homeButton.interactive = !0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._deviceContainer, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._deviceContainer, .3, {
                        y: 0,
                        ease: Quad.easeOut
                    }, 0), tl.to(this._muteButton.scale, .5, {
                        x: 1,
                        y: 1,
                        ease: Back.easeOut
                    }, .3), tl.to(this._homeButton.scale, .5, {
                        x: 1,
                        y: 1,
                        ease: Back.easeOut
                    }, .3), Common.animator.add(tl)
                }, ArcadePauseOverlay.prototype.hideGUI = function(callback, scope) {
                    this._deviceContainer.y = 0, this._homeButton.interactive = !1;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._deviceContainer, .3, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._deviceContainer, .3, {
                        y: -120,
                        ease: Quad.easeIn
                    }, 0), tl.to(this._muteButton.scale, .3, {
                        x: 0,
                        y: 0,
                        ease: Back.easeIn
                    }, 0), tl.to(this._homeButton, .3, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), Common.animator.add(tl)
                }, ArcadePauseOverlay.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH), this._homeButton.x = Utils.getFirstButtonPositionLeft(), this._muteButton.x = Utils.getFirstButtonPositionRight()
                }, ArcadePauseOverlay.prototype.update = function() {
                    Common.animator.paused || (this._deviceScreenSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime)
                }, ArcadePauseOverlay.prototype.onRestartBtn_click = function() {
                    this.signals.restart.dispatch()
                }, ArcadePauseOverlay.prototype.onResumeBtn_click = function() {
                    Common.bgMusic && Common.bgMusic.howl.fade(Common.bgMusicVolume, 0, 500, Common.bgMusic.id), Common.bgMusic = Common.bgMusicGame, Common.bgMusicGame = null, Common.bgMusic.howl.fade(0, Common.bgMusicVolume, 500, Common.bgMusic.id), this.animateOut(function() {
                        this.signals.resume.dispatch()
                    }, this)
                }, ArcadePauseOverlay.prototype.onQuitBtn_click = function() {
                    this.hideGUI(function() {
                        this.signals.quit.dispatch(!0)
                    }, this)
                }, ArcadePauseOverlay.prototype.onHowToPlayBtn_click = function() {
                    this.hideGUI(function() {
                        this.signals.showHowToPlay.dispatch(!0)
                    }, this)
                }, ArcadePauseOverlay.prototype.onAchievementsBtn_click = function() {
                    this.signals.showAchievements.dispatch()
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/MuteButton": 91,
                "../ui/SWButton": 92
            }
        ],
        79: [
            function(require, module, exports) {
                "use strict";

                function EnterNameScene() {
                    p3.Scene.call(this)
                }
                var Common = require("../Common"),
                    CornerFrame = require("../ui/CornerFrame"),
                    LetterSelector = require("../ui/LetterSelector"),
                    ScanlinesFilter = require("../lib/ScanlinesFilter"),
                    SWButton = require("../ui/SWButton");
                module.exports = EnterNameScene, EnterNameScene.prototype = Object.create(p3.Scene.prototype), EnterNameScene.prototype.constructor = EnterNameScene, EnterNameScene.prototype.init = function() {
                    this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .9, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this.addChild(this._bg), this._panel = new PIXI.Container, this._panel.x = .5 * Common.STAGE_WIDTH, this._panel.y = .5 * Common.STAGE_HEIGHT, this.addChild(this._panel), this._panel.image = new PIXI.Sprite(Common.assets.getTexture("device/ui_device_large")), this._panel.image.anchor = new PIXI.Point(.5, .5), this._panel.addChild(this._panel.image), this._deviceScreenSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_large_display")), this._deviceScreenSprite.anchor = new PIXI.Point(.5, .5), this._panel.image.addChild(this._deviceScreenSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenSprite);
                    this._deviceScreenSprite.filters = [filter], this._panel.image.stretch = new PIXI.Sprite(Common.assets.getTexture("ui_name_overlay_name")), this._panel.image.stretch.y = 14, this._panel.image.stretch.anchor = new PIXI.Point(.5, .5), this._panel.image.stretch.scale.x = 774 / this._panel.image.stretch.width, this._panel.image.stretch.scale.y = 1.5, this._deviceScreenSprite.addChild(this._panel.image.stretch), this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(-30, -282), this._panel.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter], this._deviceCloseSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_close")), this._deviceCloseSprite.anchor = new PIXI.Point(.5, .5), this._panel.addChild(this._deviceCloseSprite), this._btnContainer = new PIXI.Container, this._btnContainer.scale.set(.75), this._btnContainer.x = this._deviceCloseSprite.x + 368, this._btnContainer.y = this._deviceCloseSprite.y - 222, this._panel.addChild(this._btnContainer);
                    var btnSaveStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_gold_out"), p3.AssetManager.instance.getTexture("ui_button_gold_over"), p3.AssetManager.instance.getTexture("ui_button_gold_down"), p3.AssetManager.instance.getTexture("ui_icon_positive"));
                    this._saveButton = new SWButton(btnSaveStates), this._saveButton.downSoundName = "sfx_ui_btn_press_01", this._saveButton.signals.down.add(this.onSaveButtonClick, this), this._btnContainer.addChild(this._saveButton);
                    var text = Common.copy.ENTER_YOUR_NAME[Common.COUNTRY_CODE];
                    webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.position.set(-25, -290), this._panel.addChild(this._title), this._letter1 = new LetterSelector(""), this._letter1.x = -260, this._letter1.y = 16, this._panel.addChild(this._letter1), this._letter2 = new LetterSelector(""), this._letter2.y = 16, this._panel.addChild(this._letter2), this._letter3 = new LetterSelector(""), this._letter3.x = 260, this._letter3.y = 16, this._panel.addChild(this._letter3);
                    var name = Common.savedData.name;
                    name.split("");
                    this._letter1.value = name[0], this._letter2.value = name[1], this._letter3.value = name[2];
                    var states = new p3.ButtonStates;
                    states.normal = Common.assets.getTexture("ui_btn_arrow_out"), states.over = Common.assets.getTexture("ui_btn_arrow_over"), states.down = Common.assets.getTexture("ui_btn_arrow_down"), this._nextButton1 = new p3.Button(states), this._nextButton1.x = this._letter1.x, this._nextButton1.y = this._letter1.y + 156, this._nextButton1.rotation = 0, this._nextButton1.selector = this._letter1, this._nextButton1.animate = !0, this._nextButton1.signals.click.add(this.onNextButtonClick, this), this._panel.addChild(this._nextButton1), this._nextButton2 = new p3.Button(states), this._nextButton2.x = this._letter2.x, this._nextButton2.y = this._letter2.y + 156, this._nextButton2.rotation = 0, this._nextButton2.selector = this._letter2, this._nextButton2.animate = !0, this._nextButton2.signals.click.add(this.onNextButtonClick, this), this._panel.addChild(this._nextButton2), this._nextButton3 = new p3.Button(states), this._nextButton3.x = this._letter3.x, this._nextButton3.y = this._letter3.y + 156, this._nextButton3.rotation = 0, this._nextButton3.selector = this._letter3, this._nextButton3.animate = !0, this._nextButton3.signals.click.add(this.onNextButtonClick, this), this._panel.addChild(this._nextButton3), this._prevButton1 = new p3.Button(states), this._prevButton1.x = this._letter1.x, this._prevButton1.y = this._letter1.y - 156, this._prevButton1.rotation = Math.PI, this._prevButton1.selector = this._letter1, this._prevButton1.animate = !0, this._prevButton1.signals.click.add(this.onPreviousButtonClick, this), this._panel.addChild(this._prevButton1), this._prevButton2 = new p3.Button(states), this._prevButton2.x = this._letter2.x, this._prevButton2.y = this._letter2.y - 156, this._prevButton2.rotation = Math.PI, this._prevButton2.selector = this._letter2, this._prevButton2.animate = !0, this._prevButton2.signals.click.add(this.onPreviousButtonClick, this), this._panel.addChild(this._prevButton2), this._prevButton3 = new p3.Button(states), this._prevButton3.x = this._letter3.x, this._prevButton3.y = this._letter3.y - 156, this._prevButton3.rotation = Math.PI, this._prevButton3.selector = this._letter3, this._prevButton3.animate = !0, this._prevButton3.signals.click.add(this.onPreviousButtonClick, this), this._panel.addChild(this._prevButton3), this._frame1 = new CornerFrame(160, 160), this._frame1.x = this._letter2.x, this._frame1.y = 14, this._frame1.animate(), this._panel.addChild(this._frame1), this._frame2 = new CornerFrame(160, 160), this._frame2.x = this._letter1.x, this._frame2.y = 14, this._frame2.animate(), this._panel.addChild(this._frame2), this._frame3 = new CornerFrame(160, 160), this._frame3.x = this._letter3.x, this._frame3.y = 14, this._frame3.animate(), this._panel.addChild(this._frame3)
                }, EnterNameScene.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, EnterNameScene.prototype.end = function() {}, EnterNameScene.prototype.show = function() {}, EnterNameScene.prototype.animateIn = function(callback, scope) {
                    this.alpha = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .5, {
                        alpha: 1,
                        ease: Power1.easeInOut
                    }), Common.animator.add(tl)
                }, EnterNameScene.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .5, {
                        alpha: 0,
                        ease: Power1.easeInOut
                    }), Common.animator.add(tl)
                }, EnterNameScene.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH)
                }, EnterNameScene.prototype.update = function() {
                    this._deviceScreenSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime;
                    var name = this._letter1.value + this._letter2.value + this._letter3.value,
                        isValid = this.validateName(name);
                    this._saveButton.alpha = isValid ? 1 : .5, this._saveButton.interactive = isValid
                }, EnterNameScene.prototype.validateName = function(name) {
                    return Common.assets.getJSON("profanity").list.indexOf(name.toLowerCase()) == -1
                }, EnterNameScene.prototype.onNextButtonClick = function(button) {
                    button.selector.next(), Common.audio.playSound("sfx_ui_letters_00")
                }, EnterNameScene.prototype.onPreviousButtonClick = function(button) {
                    button.selector.previous(), Common.audio.playSound("sfx_ui_letters_00")
                }, EnterNameScene.prototype.onSaveButtonClick = function(button) {
                    var name = this._letter1.value + this._letter2.value + this._letter3.value;
                    Common.savedData.setName(name), this.animateOut(function() {
                        this.signals.previous.dispatch(this)
                    }, this)
                }
            }, {
                "../Common": 5,
                "../lib/ScanlinesFilter": 73,
                "../ui/CornerFrame": 89,
                "../ui/LetterSelector": 90,
                "../ui/SWButton": 92
            }
        ],
        80: [
            function(require, module, exports) {
                function ExitToArcadeOverlay() {
                    p3.Scene.call(this)
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    SWButton = (require("../Utils"), require("../ui/SWButton")),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = ExitToArcadeOverlay, ExitToArcadeOverlay.prototype = Object.create(p3.Scene.prototype), ExitToArcadeOverlay.prototype.constructor = ExitToArcadeOverlay, ExitToArcadeOverlay.prototype.init = function() {
                    this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .9, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this.addChild(this._bg), this._deviceContainer = new PIXI.Container, this.addChild(this._deviceContainer), this._deviceSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small")), this._deviceSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._deviceContainer.addChild(this._deviceSprite), this._deviceScreenSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small_display")), this._deviceScreenSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceScreenSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenSprite);
                    this._deviceScreenSprite.filters = [filter], this._deviceQuitSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_quit")), this._deviceQuitSprite.anchor = new PIXI.Point(.5, .5), this._deviceQuitSprite.position = new PIXI.Point(0, 0), this._deviceSprite.addChild(this._deviceQuitSprite), this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(0, -282), this._deviceSprite.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter];
                    var text = Common.copy.QUIT_GAME[Common.COUNTRY_CODE];
                    webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.y -= 290, this._deviceSprite.addChild(this._title);
                    var btnNoStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_red_medium_out"), p3.AssetManager.instance.getTexture("ui_button_red_medium_over"), p3.AssetManager.instance.getTexture("ui_button_red_medium_down"), p3.AssetManager.instance.getTexture("ui_icon_negative"));
                    this._noButton = new SWButton(btnNoStates), this._noButton.x = 75, this._noButton.y = 120, this._noButton.signals.down.addOnce(this.onNoBtn_click, this), this._deviceSprite.addChild(this._noButton);
                    var btnYesStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_gold_out"), p3.AssetManager.instance.getTexture("ui_button_gold_over"), p3.AssetManager.instance.getTexture("ui_button_gold_down"), p3.AssetManager.instance.getTexture("ui_icon_positive"));
                    this._yesButton = new SWButton(btnYesStates), this._yesButton.downSoundName = "sfx_ui_btn_press_01", this._yesButton.x = 300, this._yesButton.y = 120, this._yesButton.signals.down.addOnce(this.onYesBtn_click, this), this._deviceSprite.addChild(this._yesButton);
                    var text = Common.copy.ARE_YOU_SURE_ARCADE[Common.COUNTRY_CODE];
                    webfont ? this._areYouSureText = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 38,
                        fill: 16777215,
                        align: "center"
                    }) : this._areYouSureText = new PIXI.extras.BitmapText(text, {
                        font: "38px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._areYouSureText.anchor.set(.5), this._areYouSureText.x = 100, this._areYouSureText.y = -75, this._deviceSprite.addChild(this._areYouSureText), this._metalGuySprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_char_2")), this._metalGuySprite.anchor = new PIXI.Point(0, 1), this._metalGuySprite.position = new PIXI.Point(.55 * this._deviceSprite.width, Common.STAGE_HEIGHT), this.addChild(this._metalGuySprite)
                }, ExitToArcadeOverlay.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, ExitToArcadeOverlay.prototype.end = function() {}, ExitToArcadeOverlay.prototype.show = function() {}, ExitToArcadeOverlay.prototype.animateIn = function(callback, scope) {
                    this._bg.alpha = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._bg, .3, {
                        alpha: .9,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._deviceContainer, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        x: this._metalGuySprite.x,
                        ease: Back.easeOut
                    }, 0), Common.animator.add(tl), this._deviceContainer.alpha = 0, this._metalGuySprite.x -= 150, this._metalGuySprite.alpha = 0
                }, ExitToArcadeOverlay.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._deviceContainer, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        x: this._metalGuySprite.x - 100,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(tl)
                }, ExitToArcadeOverlay.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH)
                }, ExitToArcadeOverlay.prototype.update = function() {
                    Common.animator.paused || (this._deviceScreenSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime)
                }, ExitToArcadeOverlay.prototype.onYesBtn_click = function() {
                    window.location.href = swlinks.arcade_url
                }, ExitToArcadeOverlay.prototype.onNoBtn_click = function() {
                    this.animateOut(function() {
                        this.signals.previous.dispatch()
                    }, this)
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/SWButton": 92
            }
        ],
        81: [
            function(require, module, exports) {
                "use strict";

                function GameQuitOverlay() {
                    p3.Scene.call(this)
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    SWButton = (require("../Utils"), require("../ui/SWButton")),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = GameQuitOverlay, GameQuitOverlay.prototype = Object.create(p3.Scene.prototype), GameQuitOverlay.prototype.constructor = GameQuitOverlay, GameQuitOverlay.prototype.init = function() {
                    this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .9, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this._deviceContainer = new PIXI.Container, this.addChild(this._deviceContainer), this._deviceSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small")), this._deviceSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._deviceContainer.addChild(this._deviceSprite), this._deviceScreenSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small_display")), this._deviceScreenSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceScreenSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenSprite);
                    this._deviceScreenSprite.filters = [filter], this._deviceQuitSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_quit")), this._deviceQuitSprite.anchor = new PIXI.Point(.5, .5), this._deviceQuitSprite.position = new PIXI.Point(0, 0), this._deviceSprite.addChild(this._deviceQuitSprite), this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(0, -282), this._deviceSprite.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter];
                    var text = Common.copy.QUIT_GAME[Common.COUNTRY_CODE];
                    webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.y -= 290, this._deviceSprite.addChild(this._title);
                    var btnNoStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_red_medium_out"), p3.AssetManager.instance.getTexture("ui_button_red_medium_over"), p3.AssetManager.instance.getTexture("ui_button_red_medium_down"), p3.AssetManager.instance.getTexture("ui_icon_negative"));
                    this._noButton = new SWButton(btnNoStates), this._noButton.x = 75, this._noButton.y = 120, this._noButton.signals.down.addOnce(this.onNoBtn_click, this), this._deviceSprite.addChild(this._noButton);
                    var btnYesStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_gold_out"), p3.AssetManager.instance.getTexture("ui_button_gold_over"), p3.AssetManager.instance.getTexture("ui_button_gold_down"), p3.AssetManager.instance.getTexture("ui_icon_positive"));
                    this._yesButton = new SWButton(btnYesStates), this._yesButton.downSoundName = "sfx_ui_btn_press_01", this._yesButton.x = 300, this._yesButton.y = 120, this._yesButton.signals.down.addOnce(this.onYesBtn_click, this), this._deviceSprite.addChild(this._yesButton);
                    var text = Common.copy.ARE_YOU_SURE[Common.COUNTRY_CODE];
                    webfont ? this._areYouSureText = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 44,
                        fill: 16777215,
                        align: "center"
                    }) : this._areYouSureText = new PIXI.extras.BitmapText(text, {
                        font: "44px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._areYouSureText.anchor.set(.5), this._areYouSureText.x = 100, this._areYouSureText.y = -75, this._deviceSprite.addChild(this._areYouSureText), this._metalGuySprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_char_2")), this._metalGuySprite.anchor = new PIXI.Point(0, 1), this._metalGuySprite.position = new PIXI.Point(.55 * this._deviceSprite.width, Common.STAGE_HEIGHT), this.addChild(this._metalGuySprite)
                }, GameQuitOverlay.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, GameQuitOverlay.prototype.end = function() {}, GameQuitOverlay.prototype.show = function() {}, GameQuitOverlay.prototype.animateIn = function(callback, scope) {
                    this._bg.alpha = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._bg, .3, {
                        alpha: .9,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._deviceContainer, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        x: this._metalGuySprite.x,
                        ease: Back.easeOut
                    }, 0), Common.animator.add(tl), this._deviceContainer.alpha = 0, this._metalGuySprite.x -= 150, this._metalGuySprite.alpha = 0
                }, GameQuitOverlay.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._deviceContainer, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        x: this._metalGuySprite.x - 100,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(tl)
                }, GameQuitOverlay.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH)
                }, GameQuitOverlay.prototype.update = function() {
                    Common.animator.paused || (this._deviceScreenSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime)
                }, GameQuitOverlay.prototype.onYesBtn_click = function() {
                    Common.bgMusic && (Common.bgMusic.howl.fade(Common.bgMusicVolume, 0, 500, Common.bgMusic.id), Common.bgMusic = null), this.signals.next.dispatch()
                }, GameQuitOverlay.prototype.onNoBtn_click = function() {
                    this.animateOut(function() {
                        this.signals.previous.dispatch()
                    }, this)
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/SWButton": 92
            }
        ],
        82: [
            function(require, module, exports) {
                "use strict";

                function HowToPlayOverlay(subMenu, section) {
                    p3.Scene.call(this), this._subMenu = !!subMenu, this._section = section || "arcade", this._closeButton = null, this._bg = null, this._deviceBotSprite = null, this._deviceSprite = null, this._deviceTopSprite = null, this._howToPlayText = null, this._imageText = null, this._deviceCloseSprite = null, this._deviceArrowLeftSprite = null, this._deviceArrowRightSprite = null, this._nextButton = null, this._previousButton = null, this._metalGuySprite = null, this._arrPaginationSprite = [], this._paginationIndex = 0
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    SWButton = (require("../Utils"), require("../ui/SWButton")),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = HowToPlayOverlay, HowToPlayOverlay.prototype = Object.create(p3.Scene.prototype), HowToPlayOverlay.prototype.constructor = HowToPlayOverlay, HowToPlayOverlay.prototype.init = function() {
                    this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .9, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this._subMenu || this.addChild(this._bg), this._deviceContainer = new PIXI.Container, this.addChild(this._deviceContainer), this._deviceBotSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box")), this._deviceBotSprite.anchor = new PIXI.Point(.5, .5), this._deviceBotSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT + 260), this._deviceContainer.addChild(this._deviceBotSprite), this._deviceScreenBottomSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box_display")), this._deviceScreenBottomSprite.anchor = new PIXI.Point(.5, .5), this._deviceBotSprite.addChild(this._deviceScreenBottomSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenBottomSprite);
                    this._deviceScreenBottomSprite.filters = [filter], this._deviceSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small")), this._deviceSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._deviceContainer.addChild(this._deviceSprite), this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(-30, -282), this._deviceSprite.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter];
                    var text = Common.copy.HOW_TO_PLAY[Common.COUNTRY_CODE];
                    switch (webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.x -= 25, this._title.y -= 290, this._deviceSprite.addChild(this._title), this._content = [], this._section) {
                        case "arcade":
                            this._content.push({
                                image: ["help/ui_help_bg_01", "help/ui_help_move", "help/ui_help_move_" + (p3.Device.isMobile ? "hand" : "cursor")],
                                text: "HELP_MOVE_" + (p3.Device.isMobile ? "MOB" : "PC")
                            }), this._content.push({
                                image: ["help/ui_help_bg_01", "help/ui_help_shoot", "help/ui_help_shoot_" + (p3.Device.isMobile ? "hand" : "cursor")],
                                text: "HELP_SHOOT_" + (p3.Device.isMobile ? "MOB" : "PC")
                            }), this._content.push({
                                image: ["help/ui_help_bg_01", "help/ui_help_map"],
                                text: "HELP_MAP_" + (p3.Device.isMobile ? "MOB" : "PC")
                            }), this._content.push({
                                image: ["help/ui_help_bg_01", "help/ui_help_willix", "help/ui_help_willix_" + (p3.Device.isMobile ? "hand" : "cursor")],
                                text: "HELP_AIRSTRIKE"
                            }), this._content.push({
                                image: ["help/ui_help_bg_01", "help/ui_help_k2so", "help/ui_help_k2so_" + (p3.Device.isMobile ? "hand" : "cursor")],
                                text: "HELP_GRANADE"
                            }), this._content.push({
                                image: ["help/ui_help_bg_01", "help/ui_help_marine", "help/ui_help_marine_" + (p3.Device.isMobile ? "hand" : "cursor")],
                                text: "HELP_SNIPER"
                            })
                    }
                    this._screens = [];
                    for (var i = 0; i < this._content.length; i++) {
                        var screen = new PIXI.Container;
                        screen.alpha = 0 == i ? 1 : 0, this._screens.push(screen), this._deviceSprite.addChild(screen);
                        for (var m = 0; m < this._content[i].image.length; m++) {
                            var image = new PIXI.Sprite(p3.AssetManager.instance.getTexture(this._content[i].image[m]));
                            image.anchor.set(.5), screen.addChild(image)
                        }
                        var copy = p3.AssetManager.instance.getJSON("strings")[this._content[i].text][Common.COUNTRY_CODE];
                        if (webfont) var imageDesc = new PIXI.Text(copy, {
                            fontFamily: "Arial",
                            fontSize: 26,
                            fill: 16777215,
                            align: "center"
                        });
                        else var imageDesc = new PIXI.extras.BitmapText(copy, {
                            font: "26px Great Escape",
                            tint: 16777215,
                            align: "center"
                        });
                        imageDesc.anchor.set(.5), imageDesc.y += 260, screen.addChild(imageDesc)
                    }
                    this._deviceCloseSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_close")), this._deviceCloseSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceCloseSprite), this._deviceArrowLeftSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_arrow_l")), this._deviceArrowLeftSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceArrowLeftSprite), this._deviceArrowRightSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_arrow_r")), this._deviceArrowRightSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceArrowRightSprite);
                    var btnPreviousStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_arrow_l"));
                    this._previousButton = new SWButton(btnPreviousStates), this._previousButton.x = -420, this._previousButton.y = -17, this._previousButton.signals.down.add(this.onPrevBtn_click, this), this._deviceSprite.addChild(this._previousButton);
                    var btnNextStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_arrow_r"));
                    this._nextButton = new SWButton(btnNextStates), this._nextButton.x = 420, this._nextButton.y = -17, this._nextButton.signals.down.add(this.onNextBtn_click, this), this._deviceSprite.addChild(this._nextButton), this._btnContainer = new PIXI.Container, this._btnContainer.scale.set(.75), this._btnContainer.x = this._deviceCloseSprite.x + 368, this._btnContainer.y = this._deviceCloseSprite.y - 222, this._deviceSprite.addChild(this._btnContainer);
                    var btnCloseStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_red_medium_out"), p3.AssetManager.instance.getTexture("ui_button_red_medium_over"), p3.AssetManager.instance.getTexture("ui_button_red_medium_down"), p3.AssetManager.instance.getTexture("ui_icon_negative"));
                    this._closeButton = new SWButton(btnCloseStates), this._closeButton.downSoundName = "sfx_ui_btn_press_01", this._closeButton.signals.down.addOnce(this.onCloseBtn_click, this), this._btnContainer.addChild(this._closeButton);
                    for (var PAGINATION_ITEM_COUNT = this._screens.length, PAGINATION_ITEM_MARGIN = 10, PAGINATION_ITEM_WIDTH = p3.AssetManager.instance.getTexture("ui_help_pagination_on").frame.width, paginationItemX = -PAGINATION_ITEM_WIDTH * PAGINATION_ITEM_COUNT / 2 - 20, i = 0; i < PAGINATION_ITEM_COUNT; ++i) {
                        var paginationSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture(0 == i ? "ui_help_pagination_on" : "ui_help_pagination_off"));
                        paginationSprite.anchor = new PIXI.Point(.5, .5), paginationSprite.x = paginationItemX + i * (PAGINATION_ITEM_MARGIN + PAGINATION_ITEM_WIDTH), paginationSprite.y = 150, this._deviceSprite.addChild(paginationSprite), this._arrPaginationSprite.push(paginationSprite)
                    }
                    this._metalGuySprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_char_1")), this._metalGuySprite.anchor = new PIXI.Point(0, 1), this._metalGuySprite.x = 240, this._metalGuySprite.y = Common.STAGE_HEIGHT, this._metalGuySprite.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this.addChild(this._metalGuySprite)
                }, HowToPlayOverlay.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, HowToPlayOverlay.prototype.end = function() {}, HowToPlayOverlay.prototype.show = function() {}, HowToPlayOverlay.prototype.animateIn = function(callback, scope) {
                    this._bg.alpha = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._bg, .3, {
                        alpha: .9,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._deviceContainer, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        x: this._metalGuySprite.x,
                        ease: Back.easeOut
                    }, 0), Common.animator.add(tl), this._deviceContainer.alpha = 0, this._metalGuySprite.x -= 100, this._metalGuySprite.alpha = 0
                }, HowToPlayOverlay.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._deviceContainer, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        x: this._metalGuySprite.x - 50,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(tl)
                }, HowToPlayOverlay.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH)
                }, HowToPlayOverlay.prototype.update = function() {
                    Common.animator.paused || (this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenBottomSprite.filters[0].time -= 5 * p3.Timestep.deltaTime)
                }, HowToPlayOverlay.prototype.updatePaginationSprite = function() {
                    for (var i = 0; i < this._arrPaginationSprite.length; ++i) this._arrPaginationSprite[i].texture = p3.AssetManager.instance.getTexture(i == this._paginationIndex ? "ui_help_pagination_on" : "ui_help_pagination_off")
                }, HowToPlayOverlay.prototype.onCloseBtn_click = function() {
                    this.animateOut(function() {
                        this.signals.previous.dispatch()
                    }, this)
                }, HowToPlayOverlay.prototype.onNextBtn_click = function() {
                    var nextScreen = this._paginationIndex + 1;
                    nextScreen >= this._screens.length && (nextScreen = 0);
                    var tl = new TimelineMax;
                    tl.to(this._screens[this._paginationIndex], .5, {
                        alpha: 0,
                        ease: Sine.easeInOut
                    }, 0), tl.to(this._screens[nextScreen], .5, {
                        alpha: 1,
                        ease: Sine.easeInOut
                    }, 0), Common.animator.add(tl), this._paginationIndex = nextScreen, this.updatePaginationSprite()
                }, HowToPlayOverlay.prototype.onPrevBtn_click = function() {
                    var nextScreen = this._paginationIndex - 1;
                    nextScreen < 0 && (nextScreen = this._screens.length - 1);
                    var tl = new TimelineMax;
                    tl.to(this._screens[this._paginationIndex], .5, {
                        alpha: 0,
                        ease: Sine.easeInOut
                    }, 0), tl.to(this._screens[nextScreen], .5, {
                        alpha: 1,
                        ease: Sine.easeInOut
                    }, 0), Common.animator.add(tl), this._paginationIndex = nextScreen, this.updatePaginationSprite()
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/SWButton": 92
            }
        ],
        83: [
            function(require, module, exports) {
                "use strict";

                function LeaderboardOverlay(subMenu) {
                    p3.Scene.call(this), this.subMenu = !!subMenu, this._arrTabButton = [], this._tables = []
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    StateButton = (require("../Utils"), require("../ui/StateButton")),
                    Slider = require("../ui/Slider"),
                    SWButton = require("../ui/SWButton"),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = LeaderboardOverlay, LeaderboardOverlay.prototype = Object.create(p3.Scene.prototype), LeaderboardOverlay.prototype.constructor = LeaderboardOverlay, LeaderboardOverlay.prototype.init = function() {
                    this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .9, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this.subMenu || this.addChild(this._bg);
                    for (var i = 0; i < 3; i++) this._tables[i] = new PIXI.Container, 0 != i && (this._tables[i].visible = !1);
                    this._deviceContainer = new PIXI.Container, this.addChild(this._deviceContainer), this._deviceSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_large")), this._deviceSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._deviceContainer.addChild(this._deviceSprite), this._deviceScreenSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_large_display")), this._deviceScreenSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceScreenSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenSprite);
                    this._deviceScreenSprite.filters = [filter], this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(-30, -282), this._deviceSprite.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter], this._deviceCloseSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_close")), this._deviceCloseSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceCloseSprite), this._deviceScrollSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_scroll_large")), this._deviceScrollSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceScrollSprite), this._deviceTabSwitchSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_tab_switch")), this._deviceTabSwitchSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceTabSwitchSprite), this._btnContainer = new PIXI.Container, this._btnContainer.scale.set(.75), this._btnContainer.x = this._deviceCloseSprite.x + 368, this._btnContainer.y = this._deviceCloseSprite.y - 222, this._deviceSprite.addChild(this._btnContainer);
                    var btnCloseStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_red_medium_out"), p3.AssetManager.instance.getTexture("ui_button_red_medium_over"), p3.AssetManager.instance.getTexture("ui_button_red_medium_down"), p3.AssetManager.instance.getTexture("ui_icon_negative"));
                    this._closeButton = new SWButton(btnCloseStates), this._closeButton.downSoundName = "sfx_ui_btn_press_01", this._closeButton.signals.down.addOnce(this.onCloseBtn_click, this), this._btnContainer.addChild(this._closeButton);
                    var text = Common.copy.LEADERBOARD[Common.COUNTRY_CODE];
                    webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.position.set(-25, -290), this._deviceSprite.addChild(this._title);
                    for (var arrTabTitle = ["Daily", "Weekly", "All Time"], arrTabDownCb = [this.onDailyBtn_click, this.onWeeklyBtn_click, this.onAllTimeBtn_click], i = 0; i < 3; ++i) {
                        var btnTabButton = new StateButton(p3.AssetManager.instance.getTexture("ui_btn_tab_out"), p3.AssetManager.instance.getTexture("ui_btn_tab_over"), p3.AssetManager.instance.getTexture("ui_btn_tab_down"));
                        btnTabButton.init(0 == i), btnTabButton.anchor = new PIXI.Point(.5, .5), btnTabButton.x = -30 - .95 * btnTabButton.width * (1 - i), btnTabButton.y = -195, btnTabButton.signals.down.add(arrTabDownCb[i], this), this._deviceSprite.addChild(btnTabButton);
                        var text = arrTabTitle[i];
                        if (webfont) var buttonText = new PIXI.Text(text, {
                            fontFamily: "Arial",
                            fontSize: 30,
                            fill: 0,
                            align: "center"
                        });
                        else var buttonText = new PIXI.extras.BitmapText(text, {
                            font: "30px Great Escape",
                            tint: 0,
                            align: "center"
                        });
                        buttonText.anchor.set(.5), btnTabButton.addChild(buttonText), this._arrTabButton.push(btnTabButton)
                    }
                    var text = Common.copy.LOADING_SCORES[Common.COUNTRY_CODE];
                    webfont ? this._loadingText = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 30,
                        fill: 16777215,
                        align: "center"
                    }) : this._loadingText = new PIXI.extras.BitmapText(text, {
                        font: "30px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._loadingText.anchor.set(.5), this._loadingText.y = 50, this._deviceSprite.addChild(this._loadingText), this._metalGuySprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_char_1")), this._metalGuySprite.anchor = new PIXI.Point(0, 1), this._metalGuySprite.x = 330, this._metalGuySprite.y = Common.STAGE_HEIGHT, this.addChild(this._metalGuySprite)
                    // Common.hiscoreManager.signals.loaded.addOnce(function(results) {
                    //     // this.onResultsLoaded(results)
                    // }, this), 
                    // Common.hiscoreManager.loadAll()
                }, LeaderboardOverlay.prototype.onResultsLoaded = function(results) {
                    this._loadingText.visible = !1;
                    var contentMask = new PIXI.Graphics;
                    contentMask.beginFill(), contentMask.drawRect(-350, -140, 640, 396), contentMask.endFill(), this._deviceSprite.addChild(contentMask), this._contentContainer = new PIXI.Container, this._contentContainer.x = -40, this._contentContainer.mask = contentMask, this._deviceSprite.addChild(this._contentContainer);
                    for (var data = [results.daily, results.weekly, results.all], localResults = [Common.savedData.getBestScore(Common.hiscoreManager.getTodayTimestamp()), Common.savedData.getBestScore(Common.hiscoreManager.getLastWeekTimestamp()), Common.savedData.getBestScore(0)], height = 0, i = 0; i < data.length; i++) this._tables[i].addChild(this.initLeaderboardTable(data[i], localResults[i])), this._contentContainer.addChild(this._tables[i]), this._tables[i].visible && (height = this._tables[i].height);
                    this._scrollSlider = new Slider(p3.AssetManager.instance.getTexture("ui_scroll_slider"), this._contentContainer, height, 356, 280), this._scrollSlider.anchor = new PIXI.Point(.5, .5), this._scrollSlider.position = new PIXI.Point(356, -85), this._scrollSlider.init(), this._deviceSprite.addChild(this._scrollSlider)
                }, LeaderboardOverlay.prototype.initLeaderboardTable = function(data, localBest) {
                    var table = new PIXI.Container,
                        CONTENT_CONTAINER_WIDTH = 642;
                    if (localBest) {
                        var localBestContainer = new PIXI.Container;
                        localBestContainer.y -= 85;
                        for (var text = "-", i = 0; i < data.length; i++)
                            if (data[i].score_int == localBest.score && data[i].name_str == localBest.name) {
                                text = (i + 1).toString();
                                break
                            }
                        var position = new PIXI.extras.BitmapText(text, {
                            font: "30px Great Escape",
                            tint: 16777215,
                            align: "center"
                        });
                        position.anchor.set(.5, 1), position.x = -180, localBestContainer.addChild(position);
                        var text = localBest.name,
                            name = new PIXI.extras.BitmapText(text, {
                                font: "36px Great Escape",
                                tint: 3997650,
                                align: "center"
                            });
                        name.anchor.set(.5, 1), name.x = -70, name.y = 2, localBestContainer.addChild(name);
                        var text = localBest.score.toLocaleString("en-US"),
                            score = new PIXI.extras.BitmapText(text, {
                                font: "30px Great Escape",
                                tint: 16777215,
                                align: "center"
                            });
                        score.anchor.set(.5, 1), score.x = 110, localBestContainer.addChild(score);
                        var divider = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_leaderboard_devider"));
                        divider.anchor = new PIXI.Point(.5, 1), divider.y = 15, localBestContainer.addChild(divider), table.addChild(localBestContainer)
                    }
                    if (0 == data.length) {
                        var text = Common.copy.NO_SCORES_FOUND[Common.COUNTRY_CODE];
                        if (webfont) var noResults = new PIXI.Text(text, {
                            fontFamily: "Arial",
                            fontSize: 30,
                            fill: 16777215,
                            align: "center"
                        });
                        else var noResults = new PIXI.extras.BitmapText(text, {
                            font: "30px Great Escape",
                            tint: 16777215,
                            align: "center"
                        });
                        return noResults.anchor.set(.5), noResults.y = 50 + (localBest ? 50 : 0), table.addChild(noResults), table
                    }
                    for (var i = 0; i < Math.min(3, data.length); i++) {
                        var bar = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_leaderboard_" + (0 == i ? "gold" : 1 == i ? "silver" : "bronz")));
                        bar.anchor = new PIXI.Point(.5, 1), bar.x = CONTENT_CONTAINER_WIDTH * (0 == i ? 0 : 1 == i ? -.25 : .25), bar.y = 50 + (localBest ? 70 : 0), table.addChild(bar);
                        var text = data[i].score_int.toLocaleString("en-US"),
                            score = new PIXI.extras.BitmapText(text, {
                                font: "30px Great Escape",
                                tint: 13872,
                                align: "center"
                            });
                        score.anchor.set(.5), score.x = bar.x, score.y = bar.y - bar.height / 2, table.addChild(score);
                        var text = (i + 1).toString(),
                            rank = new PIXI.extras.BitmapText(text, {
                                font: "44px Great Escape",
                                tint: 16777215,
                                align: "left"
                            });
                        rank.anchor.set(.5, 1), rank.x = bar.x - bar.width / 2 + 15, rank.y = bar.y - bar.height - 10, table.addChild(rank);
                        var colors = [15719724, 12434877, 14837532],
                            text = data[i].name_str;
                        if (webfont) var name = new PIXI.Text(text, {
                            fontFamily: "Arial",
                            fontSize: 50,
                            fill: colors[i],
                            align: "right"
                        });
                        else var name = new PIXI.extras.BitmapText(text, {
                            font: "52px Great Escape Big",
                            tint: colors[i],
                            align: "right"
                        });
                        name.anchor.set(1, 1), name.x = bar.x + bar.width / 2, name.y = bar.y - bar.height - 10, table.addChild(name)
                    }
                    for (var LEADERBOARD_ENTRY_MARGIN = 50, leaderboardEntryY = bar.y + 30 - 3 * LEADERBOARD_ENTRY_MARGIN, i = 3; i < Math.min(30, data.length); i++) {
                        var rank = new PIXI.extras.BitmapText((i + 1).toString(), {
                            font: "30px Great Escape",
                            tint: 16777215,
                            align: "center"
                        });
                        rank.anchor.set(.5), rank.x = -180, rank.y = leaderboardEntryY + (i + .5) * LEADERBOARD_ENTRY_MARGIN, table.addChild(rank);
                        var text = data[i].name_str,
                            name = new PIXI.extras.BitmapText(text, {
                                font: "30px Great Escape",
                                tint: 3997650,
                                align: "center"
                            });
                        name.anchor.set(.5), name.x = -70, name.y = rank.y, table.addChild(name);
                        var text = data[i].score_int.toLocaleString("en-US"),
                            score = new PIXI.extras.BitmapText(text, {
                                font: "30px Great Escape",
                                tint: 16777215,
                                align: "center"
                            });
                        score.anchor.set(.5), score.x = 110, score.y = rank.y, table.addChild(score);
                        var divider = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_leaderboard_devider"));
                        divider.anchor.set(.5), divider.position.set(0, leaderboardEntryY + i * LEADERBOARD_ENTRY_MARGIN), table.addChild(divider)
                    }
                    return table
                }, LeaderboardOverlay.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, LeaderboardOverlay.prototype.end = function() {}, LeaderboardOverlay.prototype.show = function() {}, LeaderboardOverlay.prototype.animateIn = function(callback, scope) {
                    this._bg.alpha = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._bg, .3, {
                        alpha: .9,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._deviceContainer, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        x: this._metalGuySprite.x,
                        ease: Back.easeOut
                    }, 0), Common.animator.add(tl), this._deviceContainer.alpha = 0, this._metalGuySprite.x -= 100, this._metalGuySprite.alpha = 0
                }, LeaderboardOverlay.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._deviceContainer, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        x: this._metalGuySprite.x - 50,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(tl)
                }, LeaderboardOverlay.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH)
                }, LeaderboardOverlay.prototype.update = function() {
                    Common.animator.paused || (this._deviceScreenSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime)
                }, LeaderboardOverlay.prototype.updateTabButtons = function(pressedBtnIndex) {
                    for (var i = 0; i < this._arrTabButton.length; ++i) i != pressedBtnIndex && this._arrTabButton[i].isPressed && this._arrTabButton[i].reset()
                }, LeaderboardOverlay.prototype.onCloseBtn_click = function() {
                    this.animateOut(function() {
                        this.signals.previous.dispatch()
                    }, this)
                }, LeaderboardOverlay.prototype.onDailyBtn_click = function() {
                    this.updateTabButtons(0), this._tables[0].visible = !0, this._tables[1].visible = !1, this._tables[2].visible = !1, this._scrollSlider && (this._scrollSlider.reset(), this._scrollSlider.resizeContent(this._tables[0].height))
                }, LeaderboardOverlay.prototype.onWeeklyBtn_click = function() {
                    this.updateTabButtons(1), this._tables[0].visible = !1, this._tables[1].visible = !0, this._tables[2].visible = !1, this._scrollSlider && (this._scrollSlider.reset(), this._scrollSlider.resizeContent(this._tables[1].height))
                }, LeaderboardOverlay.prototype.onAllTimeBtn_click = function() {
                    this.updateTabButtons(2), this._tables[0].visible = !1, this._tables[1].visible = !1, this._tables[2].visible = !0, this._scrollSlider && (this._scrollSlider.reset(), this._scrollSlider.resizeContent(this._tables[2].height))
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/SWButton": 92,
                "../ui/Slider": 93,
                "../ui/StateButton": 94
            }
        ],
        84: [
            function(require, module, exports) {
                function SkipTutorialOverlay() {
                    p3.Scene.call(this), this.signals.resume = new signals.Signal
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    SWButton = (require("../Utils"), require("../ui/SWButton")),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = SkipTutorialOverlay, SkipTutorialOverlay.prototype = Object.create(p3.Scene.prototype), SkipTutorialOverlay.prototype.constructor = SkipTutorialOverlay, SkipTutorialOverlay.prototype.init = function() {
                    this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .9, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this.addChild(this._bg), this._deviceContainer = new PIXI.Container, this.addChild(this._deviceContainer), this._deviceSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small")), this._deviceSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._deviceContainer.addChild(this._deviceSprite),
                        this._deviceScreenSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small_display")), this._deviceScreenSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceScreenSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenSprite);
                    this._deviceScreenSprite.filters = [filter], this._deviceQuitSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_quit")), this._deviceQuitSprite.anchor = new PIXI.Point(.5, .5), this._deviceQuitSprite.position = new PIXI.Point(0, 0), this._deviceSprite.addChild(this._deviceQuitSprite), this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(0, -282), this._deviceSprite.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter];
                    var text = Common.copy.PAUSED[Common.COUNTRY_CODE];
                    webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.y -= 290, this._deviceSprite.addChild(this._title);
                    var btnNoStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_red_medium_out"), p3.AssetManager.instance.getTexture("ui_button_red_medium_over"), p3.AssetManager.instance.getTexture("ui_button_red_medium_down"), p3.AssetManager.instance.getTexture("ui_icon_negative"));
                    this._noButton = new SWButton(btnNoStates), this._noButton.x = 75, this._noButton.y = 120, this._noButton.signals.down.addOnce(this.onNoBtn_click, this), this._deviceSprite.addChild(this._noButton);
                    var btnYesStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_gold_out"), p3.AssetManager.instance.getTexture("ui_button_gold_over"), p3.AssetManager.instance.getTexture("ui_button_gold_down"), p3.AssetManager.instance.getTexture("ui_icon_positive"));
                    this._yesButton = new SWButton(btnYesStates), this._yesButton.downSoundName = "sfx_ui_btn_press_01", this._yesButton.x = 300, this._yesButton.y = 120, this._yesButton.signals.down.addOnce(this.onYesBtn_click, this), this._deviceSprite.addChild(this._yesButton);
                    var text = Common.copy.ARE_YOU_SURE_SKIP_TUTORIAL[Common.COUNTRY_CODE];
                    webfont ? this._areYouSureText = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 38,
                        fill: 16777215,
                        align: "center"
                    }) : this._areYouSureText = new PIXI.extras.BitmapText(text, {
                        font: "38px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._areYouSureText.anchor.set(.5), this._areYouSureText.x = 100, this._areYouSureText.y = -75, this._deviceSprite.addChild(this._areYouSureText), this._metalGuySprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_char_2")), this._metalGuySprite.anchor = new PIXI.Point(0, 1), this._metalGuySprite.position = new PIXI.Point(.55 * this._deviceSprite.width, Common.STAGE_HEIGHT), this.addChild(this._metalGuySprite)
                }, SkipTutorialOverlay.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, SkipTutorialOverlay.prototype.end = function() {}, SkipTutorialOverlay.prototype.show = function() {}, SkipTutorialOverlay.prototype.animateIn = function(callback, scope) {
                    this._bg.alpha = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._bg, .3, {
                        alpha: .9,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._deviceContainer, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        x: this._metalGuySprite.x,
                        ease: Back.easeOut
                    }, 0), Common.animator.add(tl), this._deviceContainer.alpha = 0, this._metalGuySprite.x -= 150, this._metalGuySprite.alpha = 0
                }, SkipTutorialOverlay.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._deviceContainer, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        x: this._metalGuySprite.x - 100,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(tl)
                }, SkipTutorialOverlay.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH)
                }, SkipTutorialOverlay.prototype.update = function() {
                    Common.animator.paused || (this._deviceScreenSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime)
                }, SkipTutorialOverlay.prototype.onYesBtn_click = function() {
                    Common.savedData.tutorialComplete(), this.animateOut(function() {
                        this.signals.next.dispatch()
                    }, this)
                }, SkipTutorialOverlay.prototype.onNoBtn_click = function() {
                    Common.bgMusic && Common.bgMusic.howl.fade(Common.bgMusicVolume, 0, 500, Common.bgMusic.id), Common.bgMusic = Common.bgMusicGame, Common.bgMusicGame = null, Common.bgMusic.howl.fade(0, Common.bgMusicVolume, 500, Common.bgMusic.id), this.animateOut(function() {
                        this.signals.resume.dispatch()
                    }, this)
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/SWButton": 92
            }
        ],
        85: [
            function(require, module, exports) {
                function StoryModeOverlay() {
                    p3.Scene.call(this)
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    SWButton = (require("../Utils"), require("../ui/SWButton")),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = StoryModeOverlay, StoryModeOverlay.prototype = Object.create(p3.Scene.prototype), StoryModeOverlay.prototype.constructor = StoryModeOverlay, StoryModeOverlay.prototype.init = function() {
                    this._bg = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._bg.alpha = .9, this._bg.anchor = new PIXI.Point(.5, .5), this._bg.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._bg.width = Common.STAGE_WIDTH, this._bg.height = Common.STAGE_HEIGHT, this._bg.interactive = !0, this.addChild(this._bg), this._deviceContainer = new PIXI.Container, this.addChild(this._deviceContainer), this._deviceSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small")), this._deviceSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.position = new PIXI.Point(.5 * Common.STAGE_WIDTH, .5 * Common.STAGE_HEIGHT), this._deviceContainer.addChild(this._deviceSprite), this._deviceScreenSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_small_display")), this._deviceScreenSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceScreenSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenSprite);
                    this._deviceScreenSprite.filters = [filter], this._deviceCloseSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_close")), this._deviceCloseSprite.anchor = new PIXI.Point(.5, .5), this._deviceSprite.addChild(this._deviceCloseSprite), this._deviceTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box")), this._deviceTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.position = new PIXI.Point(0, -282), this._deviceSprite.addChild(this._deviceTopSprite), this._deviceScreenTopSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_title_box_display")), this._deviceScreenTopSprite.anchor = new PIXI.Point(.5, .5), this._deviceTopSprite.addChild(this._deviceScreenTopSprite);
                    var filter = new ScanlinesFilter(this._deviceScreenTopSprite);
                    this._deviceScreenTopSprite.filters = [filter];
                    var text = Common.copy.STORY_MODE_COMING_SOON_TITLE[Common.COUNTRY_CODE];
                    webfont ? this._title = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 34,
                        fill: 16777215,
                        align: "center"
                    }) : this._title = new PIXI.extras.BitmapText(text, {
                        font: "34px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._title.anchor.set(.5), this._title.y -= 290, this._deviceSprite.addChild(this._title), this._btnContainer = new PIXI.Container, this._btnContainer.scale.set(.75), this._btnContainer.x = this._deviceCloseSprite.x + 368, this._btnContainer.y = this._deviceCloseSprite.y - 222, this._deviceSprite.addChild(this._btnContainer);
                    var btnCloseStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_red_medium_out"), p3.AssetManager.instance.getTexture("ui_button_red_medium_over"), p3.AssetManager.instance.getTexture("ui_button_red_medium_down"), p3.AssetManager.instance.getTexture("ui_icon_negative"));
                    this._closeButton = new SWButton(btnCloseStates), this._closeButton.downSoundName = "sfx_ui_btn_press_01", this._closeButton.signals.down.addOnce(this.onCloseBtn_click, this), this._btnContainer.addChild(this._closeButton);
                    var text = Common.copy.STORY_MODE_COMING_SOON_DESCRIPTION[Common.COUNTRY_CODE];
                    webfont ? this._description = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 24,
                        fill: 16777215,
                        align: "center"
                    }) : this._description = new PIXI.extras.BitmapText(text, {
                        font: "24px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._description.anchor.set(.5), this._description.x = 90, this._description.y = -15, this._deviceSprite.addChild(this._description), this._metalGuySprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_char_2")), this._metalGuySprite.anchor = new PIXI.Point(0, 1), this._metalGuySprite.position = new PIXI.Point(.55 * this._deviceSprite.width, Common.STAGE_HEIGHT), this.addChild(this._metalGuySprite)
                }, StoryModeOverlay.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, StoryModeOverlay.prototype.end = function() {}, StoryModeOverlay.prototype.show = function() {}, StoryModeOverlay.prototype.animateIn = function(callback, scope) {
                    this._bg.alpha = 0;
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._bg, .3, {
                        alpha: .9,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._deviceContainer, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .6, {
                        x: this._metalGuySprite.x,
                        ease: Back.easeOut
                    }, 0), Common.animator.add(tl), this._deviceContainer.alpha = 0, this._metalGuySprite.x -= 150, this._metalGuySprite.alpha = 0
                }, StoryModeOverlay.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._deviceContainer, .5, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        alpha: 0,
                        ease: Sine.easeIn
                    }, 0), tl.to(this._metalGuySprite, .5, {
                        x: this._metalGuySprite.x - 100,
                        ease: Sine.easeOut
                    }, 0), Common.animator.add(tl)
                }, StoryModeOverlay.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH)
                }, StoryModeOverlay.prototype.update = function() {
                    Common.animator.paused || (this._deviceScreenSprite.filters[0].time -= 5 * p3.Timestep.deltaTime, this._deviceScreenTopSprite.filters[0].time -= 5 * p3.Timestep.deltaTime)
                }, StoryModeOverlay.prototype.onCloseBtn_click = function() {
                    this.animateOut(function() {
                        this.signals.previous.dispatch()
                    }, this)
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/SWButton": 92
            }
        ],
        86: [
            function(require, module, exports) {
                "use strict";

                function ArcadeGameScene() {
                    p3.Scene.call(this), this._pauseButton = null, this._gameWorld = null, this._gameUI = null, this.signals.showGameOver = new signals.Signal, this.signals.restart = new signals.Signal, this.signals.showSplash = new signals.Signal, this.signals.skipTutorial = new signals.Signal
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    Utils = require("../Utils"),
                    GameWorld = require("../gameplay/GameWorld"),
                    GameUI = require("../gameplay/GameUI"),
                    TrophyUI = require("../gameplay/TrophyUI"),
                    Mission = require("../gameplay/Mission"),
                    SWButton = require("../ui/SWButton");
                module.exports = ArcadeGameScene, ArcadeGameScene.prototype = Object.create(p3.Scene.prototype), ArcadeGameScene.prototype.constructor = ArcadeGameScene, ArcadeGameScene.prototype.init = function() {
                    Common.savedData.hasSeenTutorial ? (this._gameWorld = new GameWorld({
                        endless: !0
                    }), this._gameWorld.init("map_survival"), this.addChild(this._gameWorld), this._gameUI = new GameUI(this._gameWorld, {
                        autoPauseMission: !0,
                        autoMapMission: !0
                    }), this.addChild(this._gameUI), this._gameUI.init()) : (this._gameWorld = new GameWorld({
                        endless: !1,
                        tutorial: !0,
                        missions: [Mission.prototype.TUTORIAL_01, Mission.prototype.TUTORIAL_02, Mission.prototype.TUTORIAL_END]
                    }), this._gameWorld.init("map_tutorial"), this.addChild(this._gameWorld), this._gameUI = new GameUI(this._gameWorld, {
                        autoPauseMission: !0,
                        autoMapMission: !1
                    }), this.addChild(this._gameUI), this._gameUI.init()), this._gameWorld.missionManager.generateMission(), this._gameWorld.update(), Common.gameWorld = this._gameWorld, Window.gameWorld = this._gameWorld, this._trophyUI = new TrophyUI, this._trophyUI.init(), this.addChild(this._trophyUI);
                    var pauseBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture(Common.savedData.hasSeenTutorial ? "ui_icon_pause" : "ui_icon_negative_small"));
                    this._pauseButton = new SWButton(pauseBtnStates), this._pauseButton.x = Utils.getFirstButtonPositionRight(), this._pauseButton.y = 80, this._pauseButton.signals.down.add(this.onPauseBtn_click, this), this.addChild(this._pauseButton), this._pauseButton.scale.set(0);
                    var tl = new TimelineMax;
                    tl.to(this._pauseButton.scale, 1, {
                        x: 1,
                        y: 1,
                        ease: Back.easeOut
                    }, 2), this._sideBarLeft = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._sideBarLeft.width = 500, this._sideBarLeft.height = Common.STAGE_HEIGHT, this._sideBarLeft.anchor.set(1, 0), this.addChild(this._sideBarLeft), this._sideBarRight = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._sideBarRight.width = 500, this._sideBarRight.height = Common.STAGE_HEIGHT, this._sideBarRight.anchor.set(0, 0), this.addChild(this._sideBarRight)
                }, ArcadeGameScene.prototype.update = function() {
                    this._gameWorld.update(), this._gameUI.update()
                }, ArcadeGameScene.prototype.destroy = function() {
                    Common.animator.removeAll(), TweenMax.killAll(), p3.Scene.prototype.destroy.call(this)
                }, ArcadeGameScene.prototype.end = function() {}, ArcadeGameScene.prototype.show = function() {
                    this._gameWorld.resume()
                }, ArcadeGameScene.prototype.gameOver = function() {
                    Common.bgMusic && (Common.bgMusic.howl.fade(Common.bgMusicVolume, 0, 500, Common.bgMusic.id), Common.bgMusic = null), this.signals.showGameOver.dispatch()
                }, ArcadeGameScene.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH), this._gameUI.resize(), this._pauseButton.x = Utils.getFirstButtonPositionRight(), this._sideBarLeft.x = Utils.getFirstButtonPositionLeft() - 100, this._sideBarRight.x = Utils.getFirstButtonPositionRight() + 100
                }, ArcadeGameScene.prototype.animateIn = function(callback, scope) {}, ArcadeGameScene.prototype.animateOut = function(callback, scope) {}, ArcadeGameScene.prototype.showGUI = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._gameUI, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0), this.showPauseButton()
                }, ArcadeGameScene.prototype.hideGUI = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._gameUI, .3, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0), this.hidePauseButton()
                }, ArcadeGameScene.prototype.showPauseButton = function(callback, scope) {
                    this._pauseButton.interactive = !0, TweenMax.killTweensOf(this._pauseButton);
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._pauseButton, .3, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, 0)
                }, ArcadeGameScene.prototype.hidePauseButton = function(callback, scope) {
                    this._pauseButton.interactive = !1, TweenMax.killTweensOf(this._pauseButton);
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._pauseButton, .3, {
                        alpha: 0,
                        ease: Sine.easeOut
                    }, 0)
                }, ArcadeGameScene.prototype.onPauseBtn_click = function() {
                    this._gameWorld.paused || this._gameWorld.softPaused || (this._gameWorld.pause(), this.hideGUI(function() {
                        Common.savedData.hasSeenTutorial ? this.signals.pause.dispatch() : this.signals.skipTutorial.dispatch()
                    }, this), Common.bgMusic && Common.bgMusic.howl.fade(Common.bgMusicVolume, 0, 500, Common.bgMusic.id), Common.bgMusicGame = Common.bgMusic, Common.bgMusic = Common.audio.playSound("music_menu_strings_gentle_01", {
                        loop: !0,
                        volume: 0
                    }), Common.bgMusic.howl.fade(0, Common.bgMusicVolume, 500, Common.bgMusic.id))
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../gameplay/GameUI": 32,
                "../gameplay/GameWorld": 33,
                "../gameplay/Mission": 38,
                "../gameplay/TrophyUI": 57,
                "../ui/SWButton": 92
            }
        ],
        87: [
            function(require, module, exports) {
                "use strict";

                function MainMenuScene() {
                    p3.Scene.call(this), this._leaderboardButton = null, this._howToPlayButton = null, this._achievementsButton = null, this._muteButton = null, this._exitToArcadeButton = null, this._playArcadeButton = null, this._playStoryButton = null, this._gameLogoSprite = null, this._playArcadeText = null, this._playMissionsText = null, this._comingSoonText = null, this._hiScoreText = null, this._shadyRobotSprite = null, this._shavedGuySprite = null, this._oldManSprite = null, this._weakBeardGuySprite = null, this._naiveGirlSprite = null, this._bgExplosionSprite = null, this._fgExplosionSprite = null, this._hitArea = null, this._screenTransition = null, this._characterContainer = null, this._particle_01a_Sprite = null, this._particle_01b_Sprite = null, this._particle_02a_Sprite = null, this._particle_03a_Sprite = null, this._particle_04a_Sprite = null, this._particle_05a_Sprite = null, this._particle_06a_Sprite = null, this._particle_07a_Sprite = null, this._arrParallaxSprite = [], this._arrParallaxPositionIni = [], this._arrParallaxDelta = [.02, .02, .02, .025, .025, .03, .03, .04, .04, .045, .045, .05, .06, .08, .08], this._parallaxTouchMovePosition = new PIXI.Point(0, 0), this.signals.showArcadeStart = new signals.Signal, this.signals.showAchievements = new signals.Signal, this.signals.showLeaderboard = new signals.Signal, this.signals.showHowToPlay = new signals.Signal, this.signals.showExitToArcade = new signals.Signal, this.signals.showStoryMessage = new signals.Signal, this.signals.playArcade = new signals.Signal, this.signals.playStory = new signals.Signal
                }
                var Common = (require("../AudioParams"), require("../Common")),
                    Utils = require("../Utils"),
                    MuteButton = require("../ui/MuteButton"),
                    SWButton = require("../ui/SWButton"),
                    ScanlinesFilter = require("../lib/ScanlinesFilter");
                module.exports = MainMenuScene, MainMenuScene.prototype = Object.create(p3.Scene.prototype), MainMenuScene.prototype.constructor = MainMenuScene, MainMenuScene.prototype.init = function() {
                    this._bg = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_bg")), this._bg.anchor.set(.5), this._bg.x = .5 * Common.STAGE_WIDTH, this._bg.y = .5 * Common.STAGE_HEIGHT, this.addChild(this._bg), this._characterContainer = new PIXI.Container, this._characterContainer.scale = new PIXI.Point(.9, .9), this._characterContainer.x = .5 * Common.STAGE_WIDTH, this._characterContainer.y = .5 * Common.STAGE_HEIGHT, this.addChild(this._characterContainer), this._bgExplosionSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_char_bg")), this._bgExplosionSprite.anchor.set(.5), this._bgExplosionSprite.x = 36, this._bgExplosionSprite.y = -13, this._bgExplosionSprite.scale.x = 2 - (1 - this._characterContainer.scale.x), this._bgExplosionSprite.scale.y = 2 - (1 - this._characterContainer.scale.y), this._characterContainer.addChild(this._bgExplosionSprite), this._arrParallaxSprite.push(this._bgExplosionSprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._bgExplosionSprite.position.x, this._bgExplosionSprite.position.y)), this._particle_04a_Sprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_particle_04")), this._particle_04a_Sprite.anchor.set(.5), this._particle_04a_Sprite.x = 200, this._particle_04a_Sprite.y = -100, this._particle_04a_Sprite.scale.x = 3 - (1 - this._characterContainer.scale.x), this._particle_04a_Sprite.scale.y = 3 - (1 - this._characterContainer.scale.y), this._characterContainer.addChild(this._particle_04a_Sprite), this._arrParallaxSprite.push(this._particle_04a_Sprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._particle_04a_Sprite.position.x, this._particle_04a_Sprite.position.y)), this._particle_05a_Sprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_particle_05")), this._particle_05a_Sprite.anchor.set(.5), this._particle_05a_Sprite.x = -290, this._particle_05a_Sprite.y = 50, this._particle_05a_Sprite.scale.x = 2 - (1 - this._characterContainer.scale.x), this._particle_05a_Sprite.scale.y = 2 - (1 - this._characterContainer.scale.y), this._characterContainer.addChild(this._particle_05a_Sprite), this._arrParallaxSprite.push(this._particle_05a_Sprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._particle_05a_Sprite.position.x, this._particle_05a_Sprite.position.y)), this._particle_06a_Sprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_particle_06")), this._particle_06a_Sprite.anchor.set(.5), this._particle_06a_Sprite.x = -500, this._particle_06a_Sprite.y = -200, this._particle_06a_Sprite.scale.x = 4 - (1 - this._characterContainer.scale.x), this._particle_06a_Sprite.scale.y = 4 - (1 - this._characterContainer.scale.y), this._characterContainer.addChild(this._particle_06a_Sprite), this._arrParallaxSprite.push(this._particle_06a_Sprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._particle_06a_Sprite.position.x, this._particle_06a_Sprite.position.y)), this._particle_07a_Sprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_particle_07")), this._particle_07a_Sprite.anchor.set(.5), this._particle_07a_Sprite.x = -100, this._particle_07a_Sprite.y = -100, this._particle_07a_Sprite.scale.x = 3 - (1 - this._characterContainer.scale.x), this._particle_07a_Sprite.scale.y = 3 - (1 - this._characterContainer.scale.y), this._characterContainer.addChild(this._particle_07a_Sprite), this._arrParallaxSprite.push(this._particle_07a_Sprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._particle_07a_Sprite.position.x, this._particle_07a_Sprite.position.y)), this._shavedGuySprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_char_5")), this._shavedGuySprite.anchor.set(.5), this._shavedGuySprite.x = 186, this._shavedGuySprite.y = -108, this._characterContainer.addChild(this._shavedGuySprite), this._arrParallaxSprite.push(this._shavedGuySprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._shavedGuySprite.position.x, this._shavedGuySprite.position.y)), this._shadyRobotSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_char_4")), this._shadyRobotSprite.anchor.set(.5), this._shadyRobotSprite.x = -208, this._shadyRobotSprite.y = -76, this._characterContainer.addChild(this._shadyRobotSprite), this._arrParallaxSprite.push(this._shadyRobotSprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._shadyRobotSprite.position.x, this._shadyRobotSprite.position.y)), this._weakBeardGuySprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_char_2")), this._weakBeardGuySprite.anchor.set(.5), this._weakBeardGuySprite.x = -353, this._weakBeardGuySprite.y = 135, this._weakBeardGuySprite.scale = new PIXI.Point(.9, .9), this._characterContainer.addChild(this._weakBeardGuySprite), this._arrParallaxSprite.push(this._weakBeardGuySprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._weakBeardGuySprite.position.x, this._weakBeardGuySprite.position.y)), this._oldManSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_char_3")), this._oldManSprite.anchor.set(.5), this._oldManSprite.x = 368, this._oldManSprite.y = 131, this._oldManSprite.scale = new PIXI.Point(.9, .9), this._characterContainer.addChild(this._oldManSprite), this._arrParallaxSprite.push(this._oldManSprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._oldManSprite.position.x, this._oldManSprite.position.y)), this._particle_02a_Sprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_particle_02")), this._particle_02a_Sprite.anchor.set(.5), this._particle_02a_Sprite.x = -600, this._particle_02a_Sprite.y = -170, this._particle_02a_Sprite.scale.x = 4 - (1 - this._characterContainer.scale.x), this._particle_02a_Sprite.scale.y = 4 - (1 - this._characterContainer.scale.y), this._characterContainer.addChild(this._particle_02a_Sprite), this._arrParallaxSprite.push(this._particle_02a_Sprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._particle_02a_Sprite.position.x, this._particle_02a_Sprite.position.y)), this._particle_03a_Sprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_particle_03")), this._particle_03a_Sprite.anchor.set(.5), this._particle_03a_Sprite.x = 443, this._particle_03a_Sprite.y = -115, this._particle_03a_Sprite.scale.x = 3 - (1 - this._characterContainer.scale.x), this._particle_03a_Sprite.scale.y = 3 - (1 - this._characterContainer.scale.y), this._characterContainer.addChild(this._particle_03a_Sprite), this._arrParallaxSprite.push(this._particle_03a_Sprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._particle_03a_Sprite.position.x, this._particle_03a_Sprite.position.y)), this._naiveGirlSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_char_1")), this._naiveGirlSprite.anchor.set(.5), this._naiveGirlSprite.x = 4, this._naiveGirlSprite.y = -131, this._naiveGirlSprite.scale = new PIXI.Point(.9, .9), this._characterContainer.addChild(this._naiveGirlSprite), this._arrParallaxSprite.push(this._naiveGirlSprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._naiveGirlSprite.position.x, this._naiveGirlSprite.position.y)), this._fgExplosionSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_char_fg")), this._fgExplosionSprite.anchor.set(.5), this._fgExplosionSprite.x = 14, this._fgExplosionSprite.y = 84, this._fgExplosionSprite.scale.x = 2 - (1 - this._characterContainer.scale.x), this._fgExplosionSprite.scale.y = 2 - (1 - this._characterContainer.scale.y), this._characterContainer.addChild(this._fgExplosionSprite), this._arrParallaxSprite.push(this._fgExplosionSprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._fgExplosionSprite.position.x, this._fgExplosionSprite.position.y)), this._particle_01a_Sprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_particle_01")), this._particle_01a_Sprite.anchor.set(.5), this._particle_01a_Sprite.x = 254, this._particle_01a_Sprite.y = 83, this._particle_01a_Sprite.scale.x = 4 - (1 - this._characterContainer.scale.x), this._particle_01a_Sprite.scale.y = 4 - (1 - this._characterContainer.scale.y), this._characterContainer.addChild(this._particle_01a_Sprite), this._arrParallaxSprite.push(this._particle_01a_Sprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._particle_01a_Sprite.position.x, this._particle_01a_Sprite.position.y)), this._particle_01b_Sprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_particle_01")), this._particle_01b_Sprite.anchor.set(.5), this._particle_01b_Sprite.x = -603, this._particle_01b_Sprite.y = 13, this._particle_01b_Sprite.scale.x = 4 - (1 - this._characterContainer.scale.x), this._particle_01b_Sprite.scale.y = 4 - (1 - this._characterContainer.scale.y), this._characterContainer.addChild(this._particle_01b_Sprite), this._arrParallaxSprite.push(this._particle_01b_Sprite), this._arrParallaxPositionIni.push(new PIXI.Point(this._particle_01b_Sprite.position.x, this._particle_01b_Sprite.position.y));
                    var playArcadeBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_gold_large_out"), p3.AssetManager.instance.getTexture("ui_button_gold_large_over"), p3.AssetManager.instance.getTexture("ui_button_gold_large_down")),
                        muteBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_sound_" + (Common.audio.isMute ? "off" : "on"))),
                        achievementsBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_trophies")),
                        leaderboardBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_leaderboard")),
                        helpBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_help")),
                        exitBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_blue_out"), p3.AssetManager.instance.getTexture("ui_button_blue_over"), p3.AssetManager.instance.getTexture("ui_button_blue_down"), p3.AssetManager.instance.getTexture("ui_icon_games")),
                        playStoryBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_gold_large_out_inactive"), p3.AssetManager.instance.getTexture("ui_button_gold_large_over_inactive"), p3.AssetManager.instance.getTexture("ui_button_gold_large_down_inactive"));
                    this._howToPlayButton = new SWButton(helpBtnStates), this._howToPlayButton.x = Utils.getSecondButtonPositionRight(), this._howToPlayButton.y = 80, this._howToPlayButton.signals.down.add(this.onHowToPlayBtn_click, this), this.addChild(this._howToPlayButton), this._muteButton = new MuteButton(muteBtnStates, p3.AssetManager.instance.getTexture("ui_icon_sound_on"), p3.AssetManager.instance.getTexture("ui_icon_sound_off")), this._muteButton.anchor = new PIXI.Point(.5, .5), this._muteButton.x = Utils.getFirstButtonPositionRight(), this._muteButton.y = 80, this.addChild(this._muteButton), this._exitToArcadeButton = new SWButton(exitBtnStates), this._exitToArcadeButton.downSoundName = "sfx_ui_btn_press_01", this._exitToArcadeButton.x = Utils.getFirstButtonPositionLeft(), this._exitToArcadeButton.y = 80, this._exitToArcadeButton.signals.down.add(this.onExitToArcadeBtn_click, this), this._exitToArcadeButton.animate = !0, this.addChild(this._exitToArcadeButton), this._leaderboardButton = new SWButton(leaderboardBtnStates), this._leaderboardButton.x = .5 * Common.STAGE_WIDTH + 75, this._leaderboardButton.y = .5 * Common.STAGE_HEIGHT + 275, this._leaderboardButton.signals.down.add(this.onLeaderboardBtn_click, this), this.addChild(this._leaderboardButton), this._hiscoreContainer = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box")), this._hiscoreContainer.anchor.set(.5, 0), this._hiscoreContainer.scale.set(.4), this._hiscoreContainer.x = 0, this._hiscoreContainer.y = 40, this.addChild(this._hiscoreContainer), this._hiscoreScreen = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box_display")), this._hiscoreScreen.anchor = new PIXI.Point(.5, 0), this._hiscoreContainer.addChild(this._hiscoreScreen);
                    var filter = new ScanlinesFilter(this._hiscoreScreen);
                    this._hiscoreScreen.filters = [filter];
                    var text = Common.copy.HIGHSCORE[Common.COUNTRY_CODE];
                    text = r2l ? Common.savedData.arcade.highScore.toLocaleString("en-US") + " :" + text : text + ": " + Common.savedData.arcade.highScore.toLocaleString("en-US"), webfont ? this._highscoreText = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 24,
                        fill: 16776960,
                        align: "center"
                    }) : this._highscoreText = new PIXI.extras.BitmapText(text, {
                        font: "24px Great Escape",
                        tint: 16776960,
                        align: "center"
                    }), this._highscoreText.anchor.set(.5), this._highscoreText.x = 0, this._highscoreText.y = 62, this.addChild(this._highscoreText), this._playArcadeButton = new SWButton(playArcadeBtnStates), this._playArcadeButton.x = .5 * Common.STAGE_WIDTH + 300, this._playArcadeButton.y = .5 * Common.STAGE_HEIGHT + 175, this._playArcadeButton.signals.down.add(this.onPlayArcadeBtn_click, this), this.addChild(this._playArcadeButton);
                    var text = Common.copy.SURVIVAL_MODE[Common.COUNTRY_CODE];
                    webfont ? this._arcadeText = new PIXI.Text(text, {
                            fontFamily: "Arial",
                            fontSize: 32,
                            fill: 16777215,
                            align: "center"
                        }) : this._arcadeText = new PIXI.extras.BitmapText(text, {
                            font: "32px Great Escape",
                            tint: 16777215,
                            align: "center"
                        }), this._arcadeText.anchor.set(.5), this._arcadeText.x -= 15, this._playArcadeButton.addChild(this._arcadeText), this._playArcadeButton.addChild(this._hiscoreContainer), this._playArcadeButton.addChild(this._highscoreText), this._comingSoonContainer = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box")), this._comingSoonContainer.anchor.set(.5, 0), this._comingSoonContainer.scale.set(.4), this._comingSoonContainer.x = 0, this._comingSoonContainer.y = 40, this._comingSoonScreen = new PIXI.Sprite(p3.AssetManager.instance.getTexture("device/ui_device_addon_copy_box_display")),
                        this._comingSoonScreen.anchor = new PIXI.Point(.5, 0), this._comingSoonContainer.addChild(this._comingSoonScreen);
                    var filter = new ScanlinesFilter(this._comingSoonScreen);
                    this._comingSoonScreen.filters = [filter];
                    var text = Common.copy.COMING_SOON[Common.COUNTRY_CODE];
                    webfont ? this._comingSoonText = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 24,
                        fill: 16777215,
                        align: "center"
                    }) : this._comingSoonText = new PIXI.extras.BitmapText(text, {
                        font: "24px Great Escape",
                        tint: 16777215,
                        align: "center"
                    }), this._comingSoonText.anchor.set(.5), this._comingSoonText.x = 0, this._comingSoonText.y = 62, this._playStoryButton = new SWButton(playStoryBtnStates), this._playStoryButton.downSoundName = "sfx_ui_btn_press_01", this._playStoryButton.x = .5 * Common.STAGE_WIDTH - 300, this._playStoryButton.y = .5 * Common.STAGE_HEIGHT + 175, this._playStoryButton.signals.down.add(this.onPlayStoryBtn_click, this), this.addChild(this._playStoryButton), this._playStoryButton.addChild(this._comingSoonContainer), this._playStoryButton.addChild(this._comingSoonText);
                    var text = Common.copy.STORY_MODE[Common.COUNTRY_CODE];
                    webfont ? this._missionsText = new PIXI.Text(text, {
                        fontFamily: "Arial",
                        fontSize: 32,
                        fill: 11249825,
                        align: "center"
                    }) : this._missionsText = new PIXI.extras.BitmapText(text, {
                        font: "32px Great Escape",
                        tint: 11249825,
                        align: "center"
                    }), this._missionsText.anchor.set(.5), this._missionsText.x -= 15, this._playStoryButton.addChild(this._missionsText), this._achievementsButton = new SWButton(achievementsBtnStates), this._achievementsButton.x = .5 * Common.STAGE_WIDTH - 75, this._achievementsButton.y = .5 * Common.STAGE_HEIGHT + 275, this._achievementsButton.signals.down.add(this.onAchievementsBtn_click, this), this.addChild(this._achievementsButton), this._gameLogoSprite = new PIXI.Sprite(p3.AssetManager.instance.getTexture("ui_splash_logo")), this._gameLogoSprite.anchor = new PIXI.Point(.5, .5), this._gameLogoSprite.x = .5 * Common.STAGE_WIDTH, this._gameLogoSprite.y = .5 * Common.STAGE_HEIGHT + 50, this._gameLogoSprite.alpha = 0, this.addChild(this._gameLogoSprite), this._hitArea = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._hitArea.alpha = 0, this._hitArea.width = Common.STAGE_WIDTH, this._hitArea.height = Common.STAGE_HEIGHT, this._hitArea.anchor = new PIXI.Point(.5, .5), this._hitArea.x = .5 * Common.STAGE_WIDTH, this._hitArea.y = .5 * Common.STAGE_HEIGHT, this._hitArea.interactive = !0, this.addChild(this._hitArea), this._hitArea.touchmove = this._hitArea.mousemove = this.onTouchMove.bind(this), this._hitArea.filterArea = new PIXI.Rectangle(0, 0, 0, 0), this._screenTransition = new PIXI.Sprite(Common.generatedTextures.blackSquare), this._screenTransition.alpha = 1, this._screenTransition.width = Common.STAGE_WIDTH, this._screenTransition.height = Common.STAGE_HEIGHT, this.addChild(this._screenTransition), this._screenTransition.filterArea = new PIXI.Rectangle(0, 0, 0, 0)
                }, MainMenuScene.prototype.destroy = function() {
                    Common.animator.removeAll(), TweenMax.killAll(), p3.Scene.prototype.destroy.call(this)
                }, MainMenuScene.prototype.end = function() {}, MainMenuScene.prototype.show = function() {}, MainMenuScene.prototype.animateIn = function(callback, scope) {
                    Common.bgMusic && Common.bgMusic.howl.fade(Common.bgMusicVolume, 0, 500, Common.bgMusic.id), Common.bgMusic = Common.audio.playSound("music_dal1-4_menu_long_00", {
                        loop: !0,
                        volume: 0
                    }), Common.bgMusic.howl.fade(0, Common.bgMusicVolume, 1e3, Common.bgMusic.id);
                    var tl = new TimelineMax({
                        onComplete: callback,
                        onCompleteScope: scope
                    });
                    tl.to(this._screenTransition, .5, {
                        alpha: 0,
                        ease: Linear.easeNone
                    }), tl.to(this._gameLogoSprite.scale, .5, {
                        x: .5,
                        y: .5,
                        ease: Back.easeOut
                    }, .4), tl.to(this._gameLogoSprite, .25, {
                        alpha: 1,
                        ease: Sine.easeOut
                    }, .4), tl.to(this._characterContainer.scale, .5, {
                        x: 1,
                        y: 1,
                        ease: Sine.easeOut
                    }, .65), Common.animator.add(tl)
                }, MainMenuScene.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onCompleteScope: scope,
                        onComplete: callback
                    });
                    tl.to(this._screenTransition, .5, {
                        alpha: 1,
                        ease: Linear.easeNone
                    }), Common.animator.add(tl)
                }, MainMenuScene.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH), this._exitToArcadeButton.x = Utils.getFirstButtonPositionLeft(), this._muteButton.x = Utils.getFirstButtonPositionRight(), this._howToPlayButton.x = Utils.getSecondButtonPositionRight()
                }, MainMenuScene.prototype.update = function() {
                    if (!Common.animator.paused) {
                        this._hiscoreScreen.filters[0].time -= 5 * p3.Timestep.deltaTime, this._comingSoonScreen.filters[0].time -= 5 * p3.Timestep.deltaTime;
                        for (var i = 0; i < this._arrParallaxSprite.length; ++i) {
                            var newPosition = this.dampenedSpring(this._arrParallaxSprite[i].position, new PIXI.Point(this._arrParallaxPositionIni[i].x + this._arrParallaxDelta[i] * this._parallaxTouchMovePosition.x, this._arrParallaxSprite[i].position.y), p3.Timestep.deltaTime, 2.25);
                            this._arrParallaxSprite[i].position.x = newPosition.x
                        }
                    }
                }, MainMenuScene.prototype.dampenedSpring = function(currentPosition, targetPosition, dt, springStrength) {
                    var result = new PIXI.Point(currentPosition.x, currentPosition.y),
                        displacement = new PIXI.Point(currentPosition.x, currentPosition.y);
                    displacement.x -= targetPosition.x, displacement.y -= targetPosition.y;
                    var displacementLength = Math.sqrt(displacement.x * displacement.x + displacement.y * displacement.y),
                        dampConstant = 65e-5;
                    if (displacementLength < .001) return result;
                    var springMagitude = springStrength * displacementLength + dampConstant * (1 / displacementLength),
                        scalar = 1 / displacementLength * springMagitude * dt;
                    return displacement.x *= scalar, displacement.y *= scalar, result.x -= displacement.x, result.y -= displacement.y, result
                }, MainMenuScene.prototype.onTouchMove = function(e) {
                    var pos = e.data.getLocalPosition(this);
                    pos.x -= .5 * Common.STAGE_WIDTH, pos.y -= .5 * Common.STAGE_HEIGHT, pos.x < .5 * -Common.STAGE_WIDTH ? pos.x = .5 * -Common.STAGE_WIDTH : pos.x > .5 * Common.STAGE_WIDTH && (pos.x = .5 * Common.STAGE_WIDTH), pos.y < .5 * -Common.STAGE_HEIGHT ? pos.y = .5 * -Common.STAGE_HEIGHT : pos.y > .5 * Common.STAGE_HEIGHT && (pos.y = .5 * Common.STAGE_HEIGHT), this._parallaxTouchMovePosition.x = pos.x, this._parallaxTouchMovePosition.y = pos.y
                }, MainMenuScene.prototype.onLeaderboardBtn_click = function() {
                    this.signals.showLeaderboard.dispatch()
                }, MainMenuScene.prototype.onHowToPlayBtn_click = function() {
                    this.signals.showHowToPlay.dispatch()
                }, MainMenuScene.prototype.onAchievementsBtn_click = function() {
                    this.signals.showAchievements.dispatch()
                }, MainMenuScene.prototype.onPlayArcadeBtn_click = function() {
                    this.signals.showArcadeStart.dispatch(), Common.bgMusic && Common.bgMusic.howl.fade(Common.bgMusicVolume, 0, 500, Common.bgMusic.id), Common.bgMusic = null
                }, MainMenuScene.prototype.onPlayStoryBtn_click = function() {
                    this.signals.showStoryMessage.dispatch()
                }, MainMenuScene.prototype.onExitToArcadeBtn_click = function() {
                    this.signals.showExitToArcade.dispatch()
                }
            }, {
                "../AudioParams": 4,
                "../Common": 5,
                "../Utils": 11,
                "../lib/ScanlinesFilter": 73,
                "../ui/MuteButton": 91,
                "../ui/SWButton": 92
            }
        ],
        88: [
            function(require, module, exports) {
                "use strict";

                function PreloaderScene() {
                    this.loaded = 0, this.animated = !1, this.finished = !1, this._bg = null, this._wheel = null, this._loadedSmooth = 0, this._playButton = null, p3.Scene.call(this)
                }
                var Common = require("../Common"),
                    LightSpeedFilter = require("../lib/LightSpeedFilter"),
                    SWButton = require("../ui/SWButton");
                module.exports = PreloaderScene, PreloaderScene.prototype = Object.create(p3.Scene.prototype), PreloaderScene.prototype.constructor = PreloaderScene, PreloaderScene.prototype.init = function() {
                    var assets = Common.assets;
                    this._bg = new PIXI.Sprite(assets.getTexture("canvas_hyperspace")), this._bg.x = .5 * (Common.STAGE_WIDTH - p3.View.width), this._bg.width = p3.View.width, this._bg.height = p3.View.height, this.addChild(this._bg), this._wheel = new PIXI.Container, this._wheel.x = .5 * Common.STAGE_WIDTH, this._wheel.y = .5 * Common.STAGE_HEIGHT, this._wheel.visible = !1, this.addChild(this._wheel), this._wheel.frame = new PIXI.Sprite(assets.getTexture("ui_preloader_bg")), this._wheel.frame.anchor = new PIXI.Point(.5, .5), this._wheel.addChild(this._wheel.frame), this._wheel.fill = new PIXI.Sprite(assets.getTexture("ui_preloader_bar")), this._wheel.fill.anchor = new PIXI.Point(.5, .5), this._wheel.addChild(this._wheel.fill), this._wheel.fill.mask = new PIXI.Graphics, this._wheel.addChild(this._wheel.fill.mask), webfont ? (this._wheel.label = new PIXI.Text("", {
                        fontSize: "32px",
                        fontFamily: "Arial",
                        align: "center",
                        fill: 16777215
                    }), this._wheel.addChild(this._wheel.label)) : (this._wheel.label = new PIXI.extras.BitmapText("", {
                        font: "32px Dosis",
                        align: "center"
                    }), this._wheel.addChild(this._wheel.label)), webfont ? (this._loadingLabel = new PIXI.Text(Common.copy.preloader_loading[Common.COUNTRY_CODE], {
                        fontSize: "40px",
                        fontFamily: "Arial",
                        fontStyle: "bold",
                        align: "center",
                        fill: 16171574
                    }), this._loadingLabel.x = .5 * Common.STAGE_WIDTH, this._loadingLabel.y = .5 * Common.STAGE_HEIGHT + 120, this._loadingLabel.pivot.x = .5 * this._loadingLabel.width, this._loadingLabel.pivot.y = .5 * this._loadingLabel.height, this._loadingLabel.visible = !1, this.addChild(this._loadingLabel)) : (this._loadingLabel = new PIXI.extras.BitmapText(Common.copy.preloader_loading[Common.COUNTRY_CODE], {
                        font: "40px Star Jedi",
                        align: "center"
                    }), this._loadingLabel.x = .5 * Common.STAGE_WIDTH, this._loadingLabel.y = .5 * Common.STAGE_HEIGHT + 120, this._loadingLabel.pivot.x = .5 * this._loadingLabel.textWidth, this._loadingLabel.pivot.y = .5 * this._loadingLabel.textHeight, this._loadingLabel.visible = !1, this.addChild(this._loadingLabel));
                    var continueBtnStates = new p3.ButtonStates(p3.AssetManager.instance.getTexture("ui_button_gold_out"), p3.AssetManager.instance.getTexture("ui_button_gold_over"), p3.AssetManager.instance.getTexture("ui_button_gold_down"), p3.AssetManager.instance.getTexture("ui_icon_play"));
                    this._playButton = new SWButton(continueBtnStates), this._playButton.x = .5 * Common.STAGE_WIDTH, this._playButton.y = .5 * Common.STAGE_HEIGHT, this._playButton.animate = !0, this._playButton.visible = !1, this._playButton.signals.click.add(this.onPlayButtonClick, this), this.addChild(this._playButton);
                    var filter = new LightSpeedFilter;
                    this._bg.filters = [filter]
                }, PreloaderScene.prototype.destroy = function() {
                    p3.Scene.prototype.destroy.call(this)
                }, PreloaderScene.prototype.appear = function() {
                    this.animateIn()
                }, PreloaderScene.prototype.show = function() {}, PreloaderScene.prototype.animateIn = function(callback, scope) {
                    var filter = this._bg.filters[0];
                    filter.enterLightSpeed(2, function() {
                        this.animated = !0
                    }, this), this._wheel.scale = new PIXI.Point, this._wheel.visible = !0, TweenMax.to(this._wheel.scale, .34, {
                        delay: .2,
                        x: 1,
                        y: 1,
                        ease: Back.easeOut,
                        easeParams: [2]
                    }), this._loadingLabel.scale = new PIXI.Point, this._loadingLabel.visible = !0, TweenMax.to(this._loadingLabel, .4, {
                        delay: .6,
                        alpha: .6,
                        ease: Power2.easeInOut,
                        yoyo: !0,
                        repeat: -1
                    }), TweenMax.to(this._loadingLabel.scale, .34, {
                        delay: .4,
                        x: 1,
                        y: 1,
                        ease: Back.easeOut,
                        easeParams: [1]
                    })
                }, PreloaderScene.prototype.animateOut = function(callback, scope) {
                    var tl = new TimelineMax({
                        onComplete: callback,
                        onCompleteScope: scope
                    });
                    tl.insert(TweenMax.to(this._wheel.scale, .34, {
                        x: 0,
                        y: 0,
                        ease: Back.easeIn,
                        easeParams: [2]
                    })), tl.insert(TweenMax.to(this._loadingLabel.scale, .34, {
                        delay: .2,
                        x: 0,
                        y: 0,
                        ease: Back.easeIn,
                        easeParams: [1]
                    }))
                }, PreloaderScene.prototype.resize = function() {
                    this.x = .5 * (p3.View.width - Common.STAGE_WIDTH), this._bg.width = p3.View.width, this._bg.height = p3.View.height, this._bg.filterArea = new PIXI.Rectangle(0, 0, this._bg.width, this._bg.height)
                }, PreloaderScene.prototype.update = function() {
                    var filter = this._bg.filters[0];
                    if (filter.update(), this._loadedSmooth = Math.min(1, this._loadedSmooth + .2 * (this.loaded - this._loadedSmooth)), this._wheel.label.text = Common.copy.preloader_percentage[Common.COUNTRY_CODE].replace("[VALUE]", Math.round(100 * this._loadedSmooth)), webfont ? (this._wheel.label.pivot.x = .5 * this._wheel.label.width, this._wheel.label.pivot.y = .5 * this._wheel.label.height) : (this._wheel.label.updateText(), this._wheel.label.pivot.x = .5 * this._wheel.label.textWidth, this._wheel.label.pivot.y = .5 * this._wheel.label.textHeight), 1 == this.loaded && !this.finished && this.animated) {
                        this.finished = !0, filter.exitLightSpeed(2, function() {
                            this.animateOut(function() {
                                p3.Device.isMobile ? (this._playButton.scale = new PIXI.Point, this._playButton.visible = !0, TweenMax.to(this._playButton.scale, .34, {
                                    delay: .14,
                                    x: 1,
                                    y: 1,
                                    ease: Back.easeOut,
                                    easeParams: [2]
                                })) : this.signals.next.dispatch(this)
                            }, this)
                        }, this);
                        var tl = new TimelineMax;
                        tl.append(TweenMax.to(this._wheel.scale, .36, {
                            delay: .54,
                            x: 1.24,
                            y: 1.24,
                            ease: Power0.easeNone
                        })), tl.append(TweenMax.to(this._wheel.scale, .24, {
                            x: 1,
                            y: 1,
                            ease: Back.easeOut
                        }))
                    }
                    this.drawMask()
                }, PreloaderScene.prototype.drawMask = function() {
                    var radius = 200,
                        start = .5 * -Math.PI,
                        end = Math.round(this._loadedSmooth * Math.PI * 2 * PIXI.RAD_TO_DEG);
                    this._wheel.fill.mask.clear(), this._wheel.fill.mask.moveTo(0, 0), this._wheel.fill.mask.beginFill(16711680), this._wheel.fill.mask.lineTo(Math.cos(start) * radius, Math.sin(start) * radius);
                    for (var theta, i = 0; i <= end; ++i) theta = start + i * PIXI.DEG_TO_RAD, this._wheel.fill.mask.lineTo(Math.cos(theta) * radius, Math.sin(theta) * radius);
                    this._wheel.fill.mask.lineTo(0, 0), this._wheel.fill.mask.endFill()
                }, PreloaderScene.prototype.onPlayButtonClick = function(button) {
                    this._playButton.interactive = !1, this._playButton.onMouseOut(), TweenMax.to(this._playButton.scale, .34, {
                        x: 0,
                        y: 0,
                        ease: Back.easeIn,
                        easeParams: [2],
                        onComplete: function() {
                            this.signals.next.dispatch(this)
                        },
                        onCompleteScope: this
                    })
                }
            }, {
                "../Common": 5,
                "../lib/LightSpeedFilter": 72,
                "../ui/SWButton": 92
            }
        ],
        89: [
            function(require, module, exports) {
                function CornerFrame(width, height) {
                    PIXI.Container.call(this), this._width = width, this._height = height;
                    var texture = Common.assets.getTexture("ui_name_chevron");
                    this._topLeft = new PIXI.Sprite(texture), this._topLeft.x = Math.round(.5 * -width), this._topLeft.y = Math.round(.5 * -height), this._topLeft.anchor = new PIXI.Point(.5, .5), this.addChild(this._topLeft), this._topRight = new PIXI.Sprite(texture), this._topRight.x = Math.round(.5 * width), this._topRight.y = Math.round(.5 * -height), this._topRight.scale.x = -1, this._topRight.anchor = new PIXI.Point(.5, .5), this.addChild(this._topRight), this._bottomLeft = new PIXI.Sprite(texture), this._bottomLeft.x = Math.round(.5 * -width), this._bottomLeft.y = Math.round(.5 * height), this._bottomLeft.scale.y = -1, this._bottomLeft.anchor = new PIXI.Point(.5, .5), this.addChild(this._bottomLeft), this._bottomRight = new PIXI.Sprite(texture), this._bottomRight.x = Math.round(.5 * width), this._bottomRight.y = Math.round(.5 * height), this._bottomRight.scale.x = -1, this._bottomRight.scale.y = -1, this._bottomRight.anchor = new PIXI.Point(.5, .5), this.addChild(this._bottomRight)
                }
                var Common = require("../Common");
                module.exports = CornerFrame, CornerFrame.prototype = Object.create(p3.Scene.prototype), CornerFrame.prototype.constructor = CornerFrame, CornerFrame.prototype.animate = function() {
                    var theta, radius = 4,
                        duration = .24;
                    theta = Math.atan2(this._topLeft.y, this._topLeft.x), TweenMax.to(this._topLeft, duration, {
                        x: this._topLeft.x + Math.cos(theta) * radius,
                        y: this._topLeft.y + Math.sin(theta) * radius,
                        ease: Power1.easeInOut,
                        yoyo: !0,
                        repeat: -1
                    }), theta = Math.atan2(this._topRight.y, this._topRight.x), TweenMax.to(this._topRight, duration, {
                        x: this._topRight.x + Math.cos(theta) * radius,
                        y: this._topRight.y + Math.sin(theta) * radius,
                        ease: Power1.easeInOut,
                        yoyo: !0,
                        repeat: -1
                    }), theta = Math.atan2(this._bottomLeft.y, this._bottomLeft.x), TweenMax.to(this._bottomLeft, duration, {
                        x: this._bottomLeft.x + Math.cos(theta) * radius,
                        y: this._bottomLeft.y + Math.sin(theta) * radius,
                        ease: Power1.easeInOut,
                        yoyo: !0,
                        repeat: -1
                    }), theta = Math.atan2(this._bottomRight.y, this._bottomRight.x), TweenMax.to(this._bottomRight, duration, {
                        x: this._bottomRight.x + Math.cos(theta) * radius,
                        y: this._bottomRight.y + Math.sin(theta) * radius,
                        ease: Power1.easeInOut,
                        yoyo: !0,
                        repeat: -1
                    })
                }
            }, {
                "../Common": 5
            }
        ],
        90: [
            function(require, module, exports) {
                "use strict";

                function LetterSelector(alphabet) {
                    PIXI.Container.call(this), this.spacing = 140, this._alphabet = alphabet || ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], this._bg = null, this._index = 0, this._letter = null, this.on("added", this.init, this)
                }
                require("../Common");
                module.exports = LetterSelector, LetterSelector.prototype = Object.create(PIXI.Container.prototype), LetterSelector.prototype.constructor = LetterSelector, LetterSelector.prototype.init = function() {
                    this.off("added", this.init);
                    var width = 200,
                        height = 200;
                    this._bg = new PIXI.Container, this.addChild(this._bg), this._bg.mask = new PIXI.Graphics, this._bg.mask.beginFill(16711680), this._bg.mask.drawRect(.5 * -width, .5 * -height, width, height), this._bg.mask.endFill(), this._bg.addChild(this._bg.mask), webfont ? (this._letter = new PIXI.Text(this._alphabet[this._index].toUpperCase(), {
                        fontSize: "120px",
                        fontFamily: "Arial",
                        align: "center",
                        fill: 16777215
                    }), this._letter.pivot.x = .5 * this._letter.width, this._letter.pivot.y = .5 * this._letter.height, this._bg.addChild(this._letter)) : (this._letter = new PIXI.extras.BitmapText(this._alphabet[this._index].toUpperCase(), {
                        font: "120px Great Escape Big",
                        align: "center"
                    }), this._letter.pivot.x = .5 * this._letter.textWidth, this._letter.pivot.y = .5 * this._letter.textHeight, this._bg.addChild(this._letter))
                }, LetterSelector.prototype.next = function() {
                    var last = this._letter;
                    ++this._index >= this._alphabet.length && (this._index = 0), webfont ? (this._letter = new PIXI.Text(this._alphabet[this._index].toUpperCase(), {
                        fontSize: "120px",
                        fontFamily: "Arial",
                        align: "center",
                        fill: 16777215
                    }), this._letter.y = this.spacing, this._letter.pivot.x = .5 * this._letter.width, this._letter.pivot.y = .5 * this._letter.height, this._bg.addChild(this._letter)) : (this._letter = new PIXI.extras.BitmapText(this._alphabet[this._index].toUpperCase(), {
                        font: "120px Great Escape Big",
                        align: "center"
                    }), this._letter.y = this.spacing, this._letter.pivot.x = .5 * this._letter.textWidth, this._letter.pivot.y = .5 * this._letter.textHeight, this._bg.addChild(this._letter)), TweenMax.killTweensOf(last), TweenMax.to(last, .18, {
                        y: -this.spacing,
                        ease: Power1.easeOut,
                        onComplete: function() {
                            last.parent.removeChild(last), last.destroy(!1)
                        },
                        onCompleteScope: this
                    }), TweenMax.killTweensOf(this._letter), TweenMax.to(this._letter, .18, {
                        y: 0,
                        ease: Power1.easeOut
                    })
                }, LetterSelector.prototype.previous = function() {
                    var last = this._letter;
                    --this._index < 0 && (this._index = this._alphabet.length - 1), webfont ? (this._letter = new PIXI.Text(this._alphabet[this._index].toUpperCase(), {
                        fontSize: "120px",
                        fontFamily: "Arial",
                        align: "center",
                        fill: 16777215
                    }), this._letter.y = -this.spacing, this._letter.pivot.x = .5 * this._letter.width, this._letter.pivot.y = .5 * this._letter.height, this._bg.addChild(this._letter)) : (this._letter = new PIXI.extras.BitmapText(this._alphabet[this._index].toUpperCase(), {
                        font: "120px Great Escape Big",
                        align: "center"
                    }), this._letter.y = -this.spacing, this._letter.pivot.x = .5 * this._letter.textWidth, this._letter.pivot.y = .5 * this._letter.textHeight, this._bg.addChild(this._letter)), TweenMax.killTweensOf(last), TweenMax.to(last, .18, {
                        y: this.spacing,
                        ease: Power1.easeOut,
                        onComplete: function() {
                            last.parent.removeChild(last), last.destroy(!1)
                        },
                        onCompleteScope: this
                    }), TweenMax.killTweensOf(this._letter), TweenMax.to(this._letter, .18, {
                        y: 0,
                        ease: Power1.easeOut
                    })
                }, Object.defineProperty(LetterSelector.prototype, "value", {
                    get: function() {
                        return this._alphabet[this._index].toUpperCase()
                    },
                    set: function(value) {
                        value = value.toLowerCase(), this._index = this._alphabet.indexOf(value), webfont ? (this._letter.text = value.toUpperCase(), this._letter.pivot.x = .5 * this._letter.width, this._letter.pivot.y = .5 * this._letter.height) : (this._letter.text = value.toUpperCase(), this._letter.updateText(), this._letter.pivot.x = .5 * this._letter.textWidth, this._letter.pivot.y = .5 * this._letter.textHeight)
                    }
                })
            }, {
                "../Common": 5
            }
        ],
        91: [
            function(require, module, exports) {
                "use strict";

                function MuteButton(states, onIconTexture, offIconTexture) {
                    SWButton.call(this, states), this._onIconTexture = onIconTexture, this._offIconTexture = offIconTexture
                }
                var Common = require("../Common"),
                    SWButton = require("./SWButton");
                module.exports = MuteButton, MuteButton.prototype = Object.create(SWButton.prototype), MuteButton.prototype.constructor = MuteButton, MuteButton.prototype.onMouseDown = function(event) {
                    this._enabled = !this._enabled, this._currentIconTexture = this.isEnabled() ? this._offIconTexture : this._onIconTexture, this._icon.texture = this._currentIconTexture, Common.audio.mute(!Common.audio.isMute), SWButton.prototype.onMouseDown.call(this, event), console.log("isMute = " + Common.audio.isMute)
                }, MuteButton.prototype.isEnabled = function() {
                    return !!p3.Button.audio && !p3.Button.audio.isMute
                }
            }, {
                "../Common": 5,
                "./SWButton": 92
            }
        ],
        92: [
            function(require, module, exports) {
                "use strict";

                function SWButton(states) {
                    p3.Button.call(this, states), this._ring = new PIXI.Sprite(states.ring || PIXI.Texture.EMPTY), this._ring.anchor = new PIXI.Point(.5, .5), this.addChild(this._ring), this.overSoundName = "sfx_ui_btn_rollover_00", this.downSoundName = "sfx_ui_btn_press_00", this.animate = !0
                }
                module.exports = SWButton, SWButton.prototype = Object.create(p3.Button.prototype), SWButton.prototype.constructor = SWButton, SWButton.prototype.onMouseOver = function() {
                    p3.Button.prototype.onMouseOver.call(this), TweenMax.killTweensOf(this._ring);
                    var speed = 10;
                    TweenMax.to(this._ring, (Math.PI - this._ring.rotation) / speed, {
                        rotation: .5 * Math.PI,
                        ease: Back.easeOut,
                        easeParams: [2]
                    }), this._icon.scaleOr || (this._icon.scaleOr = this._icon.scale.x), TweenMax.killTweensOf(this._icon.scale), TweenMax.to(this._icon.scale, .8, {
                        x: 1.2 * this._icon.scaleOr,
                        y: 1.2 * this._icon.scaleOr,
                        ease: Elastic.easeOut,
                        easeParams: [1.6]
                    })
                }, SWButton.prototype.onMouseOut = function() {
                    p3.Button.prototype.onMouseOut.call(this), TweenMax.killTweensOf(this._ring);
                    var speed = 10;
                    TweenMax.to(this._ring, this._ring.rotation / speed, {
                        rotation: 0,
                        ease: Power2.easeInOut
                    }), TweenMax.killTweensOf(this._icon.scale), TweenMax.to(this._icon.scale, .34, {
                        x: this._icon.scaleOr,
                        y: this._icon.scaleOr,
                        ease: Power1.easeInOut
                    })
                }
            }, {}
        ],
        93: [
            function(require, module, exports) {
                function Slider(texture, container, containerHeight, displayHeight, sliderHeight) {
                    PIXI.Sprite.call(this, texture), this.anchor = new PIXI.Point(.5, .5), this.interactive = !0, this.mousedown = this.touchstart = this.onMouseDown.bind(this), this.mousemove = this.touchmove = this.onMouseMove.bind(this), this._container = container, this._containerHeight = containerHeight, this._displayHeight = displayHeight, this._sliderHeight = sliderHeight, this._handleActive = !1
                }
                module.exports = Slider, Slider.prototype = Object.create(PIXI.Sprite.prototype), Slider.prototype.constructor = Slider, Slider.prototype.init = function() {
                    this._containerY = this._container.y, this._handleYMin = this.y, this._handleYMax = this.y + this._sliderHeight, this.visible = this._containerHeight > this._displayHeight
                }, Slider.prototype.onMouseDown = function(e) {
                    this._handleActive = !0, this._handleY = e.data.getLocalPosition(this.parent).y, this._handleUp = function() {
                        this.onMouseUp()
                    }.bind(this), document.body.addEventListener("touchend", this._handleUp), document.body.addEventListener("mouseup", this._handleUp)
                }, Slider.prototype.onMouseUp = function() {
                    this._handleActive = !1, document.body.removeEventListener("mouseup", this._handleUp), document.body.removeEventListener("touchend", this._handleUp)
                }, Slider.prototype.onMouseMove = function(e) {
                    if (this._handleActive) {
                        var newY = e.data.getLocalPosition(this.parent).y,
                            delta = newY - this._handleY;
                        this.y += delta, this.y = Math.max(this._handleYMin, this.y), this.y = Math.min(this._handleYMax, this.y);
                        var perc = (this.y - this._handleYMin) / (this._handleYMax - this._handleYMin);
                        this._container.y = this._containerY - Math.max(0, this._containerHeight - this._displayHeight) * perc, this._handleY = newY
                    }
                }, Slider.prototype.resizeContent = function(containerHeight) {
                    this._containerHeight = containerHeight, this.visible = this._containerHeight > this._displayHeight, this.reset()
                }, Slider.prototype.reset = function() {
                    this.y = this._handleYMin, this._container.y = this._containerY
                }
            }, {}
        ],
        94: [
            function(require, module, exports) {
                function StateButton(normalTexture, overTexture, downTexture) {
                    this.animate = !1, this.signals = {}, this._normalTexture = normalTexture, this._overTexture = overTexture, this._downTexture = downTexture, this._isPressed = !1, PIXI.Sprite.call(this, this._normalTexture), this.anchor = new PIXI.Point(.5, .5), this.interactive = !0, this.buttonMode = !0, this.mousedown = this.touchstart = this.onMouseDown.bind(this), this.mouseupoutside = this.touchendoutside = this.onMouseOut.bind(this), this.mouseover = this.onMouseOver.bind(this), this.mouseout = this.onMouseOut.bind(this)
                }
                var Common = require("../Common");
                module.exports = StateButton, StateButton.prototype = Object.create(PIXI.Sprite.prototype), StateButton.prototype.constructor = StateButton, StateButton.prototype.init = function(isPressed) {
                    this.signals.down = new signals.Signal, this.signals.over = new signals.Signal, this.signals.out = new signals.Signal, isPressed && (this._isPressed = !0, this.texture = this._downTexture)
                }, StateButton.prototype.reset = function() {
                    this.texture = this._normalTexture, this._isPressed = !1
                }, StateButton.prototype.dispose = function() {
                    this.signals.down.dispose(), this.signals.over.dispose(), this.signals.out.dispose()
                }, StateButton.prototype.onMouseDown = function(event) {
                    this._isPressed || (this._isPressed = !this._isPressed, this.texture = this._isPressed ? this._downTexture : this._overTexture, this.signals.down.dispatch(this, event), Common.audio.playSound("sfx_ui_btn_press_00"))
                }, StateButton.prototype.onMouseOver = function(event) {
                    this._isPressed || (this.texture = this._overTexture, this.signals.over.dispatch(this, event), Common.audio.playSound("sfx_ui_btn_rollover_00"))
                }, StateButton.prototype.onMouseOut = function(event) {
                    this._isPressed || (this.texture = this._normalTexture, this.signals.out.dispatch(this, event))
                }, Object.defineProperty(StateButton.prototype, "normalTexture", {
                    get: function() {
                        return this._normalTexture
                    }
                }), Object.defineProperty(StateButton.prototype, "overTexture", {
                    get: function() {
                        return this._overTexture
                    }
                }), Object.defineProperty(StateButton.prototype, "downTexture", {
                    get: function() {
                        return this._downTexture
                    }
                }), Object.defineProperty(StateButton.prototype, "isPressed", {
                    get: function() {
                        return this._isPressed
                    }
                })
            }, {
                "../Common": 5
            }
        ]
    }, {}, [9])(9)
});